<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Haven's Blog]]></title>
  <link href="http://www.ifun.cc/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://www.ifun.cc/"/>
  <updated>2014-07-08T19:11:42+08:00</updated>
  <id>http://www.ifun.cc/</id>
  <author>
    <name><![CDATA[Haven]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一个基于Nodejs的简单iOS MDM服务]]></title>
    <link href="http://www.ifun.cc/blog/2014/07/08/%5B%3F%5D-ge-ji-yu-nodejsde-jian-dan-ios-mdmfu-wu/"/>
    <updated>2014-07-08T18:57:37+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/07/08/[?]-ge-ji-yu-nodejsde-jian-dan-ios-mdmfu-wu</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>如果有效的管理自己的iOS移动设备，苹果为我们提供了MDM技术。最近小弟在研究它，有一点小经验，写了一个简单的iOS MDM服务, 服务器采用Nodejs＋Mongodb.</p>

<p>大家可以试用一下,请直接<a href="https://www.sohoin.com">猛击这儿</a>(记得用设备的safari打开)进入。</p>

<p>首先需要大家注册一个帐号，密码与帐号是管理你设备所需的。</p>

<p>登陆进系统后，会有两步需要你完成，一是点击安装mdm描述文件，安装成功后请进行第二步，安装udid获取描述文件，第二步会获取你设备UDID, 并加入到你的管理列表中，这样你以后就可以对其进行管理。</p>

<p>完成上面两步后就可以看到下面多了两列命令，一个是锁屏，一个是清除密码。目前只支持这两个命令，后续会慢慢加入。</p>

<p>界在很丑呀，有空美化一下，换衣大家提意见。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa触发方法调用的几种方法]]></title>
    <link href="http://www.ifun.cc/blog/2014/06/14/cocoahong-fa-fang-fa-diao-yong-de-ji-chong-fang-fa/"/>
    <updated>2014-06-14T09:38:40+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/06/14/cocoahong-fa-fang-fa-diao-yong-de-ji-chong-fang-fa</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>今天周未，有点空闲时间，小结一下Cocoa中触发方法调用的几种方法。</p>

<h3>1.SEL触发</h3>

<p>SEL就是selector的缩写，它表示Cocoa中的方法选择器，不明白？那请仔细了解Objective_C的运行时机制与Cocoa底层思想。 <br></p>

<p><code>
SEL theSelector = @selector(methodWithInt:andInt:);
</code>
看了上面代码这下你明白了什么是SEL了吧，平时我们开发当中经常用到的。<br>
有了SEL这样就可以触发方法调用了,<br></p>

<p><code>
[self performSelector:theSelector]
[self performSelector:@selector(methodWithInt:andInt:)];
</code>
上面两句代码是同一个道理。<br></p>

<h3>2. IMP触发</h3>

<p>IMP其实就是一个函数指针的概念，就可以这么简单理解。<br></p>

<p><code>
IMP theImplementation = [self methodForSelector:theSelector];
</code>
上面这句代码就是获取methodWithInt:andInt:这个方法的地址。<br>
有了这个函数指针后，我们就可以触发方法：</p>

<p><code>
theImplementation(self, theSelector, 30, 5);
</code>
第一个是对象，第二个SEL， 后面的传入的参数。</p>

<h3>3. objc_msgSend方法</h3>

<p>这是Objc运行时的一个C方法，我们先看一个示列:<br></p>

<p><code>
objc_msgSend(self, @selector(fly));
</code>
这行代码等价于<br></p>

<p>[self fly];</p>

<h3>4. NSInvocation</h3>

<p>NSInvocation相比上面几种方法，可以动态决定传入的参数个数。有了它，我们就可以实现&hellip;这样的变参API封装。<br>
说得有点抽像，看代码更清楚:<br></p>

<p>假如我们实现了一个两个数相加的方法，</p>

<p><code>
-(void)addNSNumber:(NSNumber *)first withNumber:(NSNumber *)second
</code>
我们可以用下面的方法来触发这个方法，并获取返回值。<BR></p>

<p>```
&ndash; (NSNumber *)testAdd {</p>

<pre><code>NSNumber *retval;

NSNumber *arg1 = [NSNumber numberWithDouble:15.0];
NSNumber *arg2 = [NSNumber numberWithDouble:13.0];

SEL selector = @selector(addNSNumber:withNumber:);

NSMethodSignature *sig = [self  methodSignatureForSelector:selector];
NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:sig];

[invocation setTarget:self];
[invocation setSelector:selector];
[invocation setArgument:(void *)&amp;arg1 atIndex:2];
[invocation setArgument:(void *)&amp;arg2 atIndex:3];
[invocation invoke];

if ([sig methodReturnLength]) {
    [invocation getReturnValue:&amp;retval];
    return retval;
}

return nil;
</code></pre>

<p>}
```
代码很容易理解，我也不多做解释，有不明白的请留言。<br></p>

<p>下面是变参封装, 写了两个NSObject的Extension（Category）:<br></p>

<p>```
+ (NSInvocation *)createInvocationOnTarget:(id)target selector:(SEL)selector {</p>

<pre><code>return [NSObject createInvocationOnTarget:target selector:selector withArguments:nil];
</code></pre>

<p>}</p>

<ul>
<li><p>(NSInvocation <em>)createInvocationOnTarget:(id)target selector:(SEL)selector withArguments:(id)arg1, &hellip; {
  NSMethodSignature </em>sig = [target methodSignatureForSelector:selector];
  NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:sig];</p>

<p>  [invocation setTarget:target];
  [invocation setSelector:selector];</p>

<p>  if(arg1) {
      va_list args;
      va_start(args, arg1);</p>

<pre><code>  [invocation setArgument:(void *)&amp;arg1 atIndex:2];

  id obj;
  int ct = 3;

  while( obj = va_arg(args, id) ) {
      NSLog(@"%@", obj);
      [invocation setArgument:(void *)&amp;obj atIndex:ct];

      ct++;
  }

  va_end(args);
</code></pre>

<p>  }</p>

<p>  return invocation;
}
```</p></li>
</ul>


<p>调用方法:</p>

<p>```
NSInvocation *invocation = [NSObject createInvocationOnTarget:mathInstance selector:selector withArguments: arg1, arg2, nil];</p>

<p>[invocation invoke];
[invocation getReturnValue:&amp;retval];</p>

<p>return retval;
```</p>

<p>目前只了解这些方法，如果你有更多的方法，还望提醒<br></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[结队开发之多storyboard]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/23/jie-dui-kai-fa-zhi-duo-storyboard/"/>
    <updated>2014-02-23T10:38:15+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/23/jie-dui-kai-fa-zhi-duo-storyboard</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>Storyboard的出现，让开发变得像讲故事一样，UI间的关系流程也一目了然。它其实是xib的升级版本，将多个xib统一管理了。任何事都有双面性，Storyboard也有它的缺点。笔者就说说自己的经验，版本管理中，多人修改很容易严生冲突。storyboard中UIViewController太多，找到想要的比较困难（特别是在MBA上）。 这些缺点在结队开发中就会遇见。 如果我们用xib文件，这样将UI最小化分隔开，将后用code将这些小单元连接起来，就可以解决这个问题。如果只用xib就展现不出storyboard的故事情节能力。</p>

<!-- more -->


<p>本人提供两种解决方案：<br>
1.<a href="#md-1">Xib link Xib</a><br>
2.<a href="#md-2">Storyboard link Storyboard</a></p>

<p>其实它们之间可以两两组合，这样就可以延伸出另外两种方法:
3.Xib link Storyboard <br>
4.Storyboard link Xib <br></p>

<h3><a id="md-1">Xib link Xib</a></h3>

<p>这种方法其实我以<a href="http://www.ifun.cc/blog/2014/02/22/ioskai-fa-zhi-xibji-qiao-jie-shao/">上一篇</a>文章已经介绍过了，大家自行阅读，在些也不多述。</p>

<h3><a id="md-2">Storyboard link Storyboard</a></h3>

<p>这种方法与上面方法原理是一样的，利用加载storyboard时，实例化对应自定义UIViewController类，然后手动addSubview到对link view上，以达到链接的目录。 用言语表达是有点抽象，还是用代码表达吧，容易理解。<br></p>

<p>在这儿用到了Github上一个人写的link代码:<a href="https://github.com/rob-brown/RBStoryboardLink">RBStoryboardLink</a>。它的用法也在README中说得很清楚了。</p>

<p>大家将源码下载下来，里面有一个sample:LinkedTabs. 由于原作者用到了cocoapods,所以需要到源码LinkedTabs目录下， 运行一个命令行:</p>

<p><code>
pod update
</code>
我还是简单说一下sample的结构。<br>
里面有三个storyboard,分别是MainStoryboard，FirstTabStoryboard， SecondTabStoryboard， 现在需要将MainStoryboard中的两个UIViewController分别与FirstTabStoryboard,SecondTabStoryboard建立连接，以达到程序运行后，这三个storyboard像是在一起的目的。<br></p>

<p>打开MainStoryboard，定位到Tab1的UIViewController<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edt58mgnxij20vp0g6mzp.jpg" alt="" /><br></p>

<p>注意图中两个箭头，上面一个一定要填这个自定义类RBStoryboardLink， 就是个类完成了连接的任务。<br>
下面一个箭头处，是传递的属性与对应的值，在实例化RBStoryboardLink的时候传送递给实例化对象。storyboardName这个属性表示要link到哪儿去，这儿我们要link到FirstTabStoryboard，所以值为FirstTabStoryboard。还有一个可选属性sceneIdentifier, 表示要link到Storyboard中的哪一个UIViewController. 如果不传这个属性，那就link到FirstTabStoryboard中的initial View Controller.<br></p>

<p>如果我们想link到FirstTabStoryboard中的第二个UIViewController那如何办呢，很简单:<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edt5kfj27gj20vp0haju2.jpg" alt="" /><br>
如上图，我们先找到这个被linke的View Controller，然后在Storyboard ID那输入该View Controller的标识，如在此输入:NavController.</p>

<p>接着在需要link的地方加入sceneIdentifier:NavController, 见下图箭头处。<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edt5nd36iwj20vl0fktb6.jpg" alt="" /><br></p>

<p>这样就link成功了。</p>

<p>方法3与方法4只是组合出来的方法，也不在此多述了。</p>

<hr />

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发之xib技巧介绍]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/22/ioskai-fa-zhi-xibji-qiao-jie-shao/"/>
    <updated>2014-02-22T16:16:29+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/22/ioskai-fa-zhi-xibji-qiao-jie-shao</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>iOS开发的这些年里，我遇到过这样的一群人，他们认为用代码写UI的人就要NB一点，用xib就是要低一个级别。更有一个高级工程师Level的朋友，聊天当中还特意强调自己全用代码写UI。对此我只能在心里暗笑两下。到底是用xib还是代码来创建UI,这个问题以前也有过很多争论，我只想说一点，各有各的优点。如果能够将两者融合贯通，那将是更有优势。笔者开发过程中，UI能用xib就尽量用xib（能用storyboard就用storyboard, 一个storyboard里最好别装太多的UIViewController，这在结队开发中将不利，我在下一篇教程中介绍如何使用多个storyboard来解决这个问题）.本文主要介绍使用xib的一些技术，即在xib中布局UI,然后xib与code相结合，快速UI开发介绍。本文主要讲解的也就是加载xib的技术。<br></p>

<!-- more -->


<p>还是老方法，用代码说话，首先创建一个Single Page工程，命名为:LoadNibViewDemo.<br></p>

<h3>1.直接加载xib中的UIView</h3>

<p>创建一个View1.xib, 随便设一个背景色，加一个标识UILabel, 这样好知道是这个view是哪一个view. 你可以在这个view上加作意的subview，我只是说明原理，所以这儿并没有加作何subview. 最终我的View1如下图：<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edsa871blkj20vk0ekdhe.jpg" alt="" /><br>
由于View1会放到其它View上作为subview，所以这儿size是Freeform, Status Bar是:None。<br><br></p>

<p>将下面代码放到viewDidLoad中:<br></p>

<p>```</p>

<pre><code>//1
NSArray *views = [[NSBundle mainBundle] loadNibNamed:@"View1" owner:nil options:nil]; //&amp;1
UIView *v = [views lastObject];
CGRect r = v.frame;
r.origin.y += 80;
v.frame = r;
[self.view addSubview:v];
</code></pre>

<p>```
&amp;1这行代码就是加载View1.xib， 然后将xib中的UIView实保存到views中， 由于xib中我们只拖入了一个view, 所以这儿lastObject就返回这个view的实例，这样便加载了xib中的UIView. 接着将这个UIView addSubview到其它view上，运行效果如图：<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edsai5knbvj208v0fsjre.jpg" alt="" /><br></p>

<h3>2.通过Owner建立变量关联<br></h3>

<p>首先我们为ViewController创建一个IBOutlet属性:</p>

<p><code>
@property (nonatomic, weak) IBOutlet UIView *referencedView;
</code>
接着同上面介绍的一样创建一个View2.xib, 如下图：<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1edsap4cbeoj20vp0ebwfj.jpg" alt="" /><br><br></p>

<p>File&rsquo;s Owner中，我们设为ViewController, 这样我们就可以与实例变量_referencedView建立关联了,如图<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edsaret2huj20kg0aogm7.jpg" alt="" /> <br></p>

<p>接着在viewDidLoad中，在刚才加入的代码下面添加如下代码：<br></p>

<p>```</p>

<pre><code>// 2
[[NSBundle mainBundle] loadNibNamed:@"View2" owner:self options:nil];
r = _referencedView.frame;
r.origin.y = v.frame.size.height + v.frame.origin.y;
_referencedView.frame = r;
[self.view addSubview:_referencedView];
</code></pre>

<p>```
与//1中的代码有点类似，只不过owner属性为self了。这样一来，loadNibNamed后，就会实例化与之关联的变量_referencedView, 运行程序你将会看到效果：<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edsay5nckmj208w0fst8r.jpg" alt="" /><br></p>

<h3>3.Class Owner建立变量关联<br></h3>

<p>其实这个原理与上面2说的一样的，只不过这儿我们特别定义一个class来作为xib的Owner， 要所有需要关系的view都可以声明在这个Owner中，这样方便代码管理与维护。<br>
这儿我们声明一个NSObject的子类FileOwner, 然后再在FileOnwer中声明IBOutLet的关联变量：</p>

<p><code>
@property (nonatomic, weak) IBOutlet UIView *view;
</code>
同理创建一个View3.xib, File&rsquo;s Owner设为FileOwner, 并建立view关联：<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edsb5soi16j20ql0c4t9r.jpg" alt="" /><br><br></p>

<p>接着在viewDidLoad结尾处添加以下代码:<br></p>

<p>```</p>

<pre><code>// 3
FileOwner *owner = [FileOwner new];
[[NSBundle mainBundle] loadNibNamed:@"View3" owner:owner options:nil];
r = owner.view.frame;
r.origin.y = _referencedView.frame.origin.y + _referencedView.frame.size.height;
owner.view.frame = r;
[self.view addSubview:owner.view];
</code></pre>

<p>```</p>

<p>运行效果：<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edsb8f38gxj208x0fsglp.jpg" alt="" /><br><br></p>

<h3>4.引入UIView Category<br></h3>

<p>为了代码简单，我们增加一个UIView Category方法</p>

<p>```
+(id)loadFromNibNamed:(NSString*) nibName {</p>

<pre><code>return [FileOwner viewFromNibNamed:nibName];
</code></pre>

<p>}
```</p>

<p>其中FileOwner的class 方法：</p>

<p>```
+(id)viewFromNibNamed:(NSString*) nibName {</p>

<pre><code>FileOwner *owner = [self new];
[[NSBundle mainBundle] loadNibNamed:nibName owner:owner options:nil];
return owner.view;
</code></pre>

<p>}
```
这样加载xib的代码就会变得更简单。<br>
同理，我们创建一个View4.xib, File&rsquo;s Owner设为FileOwner, 并建立view关联：<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edsbhtxokzj20vn0dut9n.jpg" alt="" /><br></p>

<p>接着在viewDidLoad尾添加代码:</p>

<p>```</p>

<pre><code>// 4
UIView *v4 = [UIView loadFromNibNamed:@"View4"];
r = v4.frame;
r.origin.y = owner.view.frame.origin.y + owner.view.frame.size.height;
v4.frame = r;
[self.view addSubview:v4];
</code></pre>

<p>```
运行效果:<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edsehvv6clj208w0frq2z.jpg" alt="" /> <br></p>

<h3>5.自定义UIView类<br></h3>

<p>在4Category的基础上，我们再引入自定义UIView类，并在xib中与之关联。首先我们创建一个UIView字类UIView5.<br>
接着，我们创建一个View5.xib, File&rsquo;s Owner设为FileOwner, 并建立view关联：<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edsen8i9nvj20vq0ed0u2.jpg" alt="" /><br></p>

<p>接着增加一个UIView的Category方法：</p>

<p>```
+(id)loadFromNib {</p>

<pre><code>return [self loadFromNibNamed:NSStringFromClass(self)];
</code></pre>

<p>}
```</p>

<p>在viewDidLoad尾加入代码：</p>

<p>```</p>

<pre><code>// 5
View5 *v5 = [View5 loadFromNib];
r = v5.frame;
r.origin.y = v4.frame.origin.y + v4.frame.size.height;
v5.frame = r;
[self.view addSubview:v5];
</code></pre>

<p>```</p>

<p>动行效果：<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edserc400wj208x0fuglv.jpg" alt="" /><br></p>

<h3>6.设置Onwer为UIViewController</h3>

<p>首先，我们创建一个View6.xib, File&rsquo;s Owner设为UIViewController. 这样UIViewController的view属性关联我们xib中的UIView <br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edsezb1w85j20vv0dtgn1.jpg" alt="" /><br></p>

<p>接着在viewDidLoad中添加代码:<br></p>

<p>```</p>

<pre><code>// 6
UIView *v6 = [[UIViewController alloc] initWithNibName:@"View6" bundle:nil].view;
r = v6.frame;
r.origin.y = v5.frame.origin.y + v5.frame.size.height;
v6.frame = r;
[self.view addSubview:v6];
</code></pre>

<p>```
动行效果:<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edsf1mhayzj208w0ft74f.jpg" alt="" /><br></p>

<p>说了这么多，是时候做一下总结了，其实其本是两个方法，一个是没有File&rsquo;s Onwer直接加载xib中的UIView，二是通过File&rsquo;s Onwer关联变量加载xib中的UIView。 然后就是一些Category提供简单接口而已。大家可以再细细品味一下上面所介绍的内容。<br></p>

<p>大家可以看我源码中UIView+Ext的Category方法中还提供了一个方法：+ (id)loadFromNibNoOwner;它应是方法5与方法1的组合，在此我就不细说了。 都是由上面两个基本方法演变出来的。<br></p>

<h3>7.xib link xib</h3>

<p>大家有没有想过在xib中link其它xib？ 很可惜苹果不支持这个功能。但是我们可以通过一点技巧实现这个功能。下而我就简单介绍一下<br>
先说一下原理，加载xib的UIView，如果这个UIView是自定义的UIView（即xib中关联了UIView的子类），如下图：<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1edsfenvw77j20vo0g40ux.jpg" alt="" /><br></p>

<p>那么在加载显示这个view的时候会触发一些方法，如:<br></p>

<p><code>
- (id)initWithCoder:(NSCoder *)aDecoder
- (id)awakeAfterUsingCoder:(NSCoder*)aDecoder
</code>
我们就在这儿作些文章，在这儿用前面介绍的方法加载想要的的xib中UI实例替换掉原来返回的实例。</p>

<p>首先我写了一个UIView的了类SubView，代码很容易理解:</p>

<p>```</p>

<h1>import &ldquo;SubView.h&rdquo;</h1>

<h1>include &ldquo;UIView+Ext.h&rdquo;</h1>

<p>@implementation SubView</p>

<ul>
<li><p>(id)initWithFrame:(CGRect)frame
{
  self = [super initWithFrame:frame];
  if (self) {
      // Initialization code
  }
  return self;
}</p></li>
<li><p>(id) awakeAfterUsingCoder:(NSCoder<em>)aDecoder {
  BOOL theThingThatGotLoadedWasJustAPlaceholder = ([[self subviews] count] == 0);
  if (theThingThatGotLoadedWasJustAPlaceholder) {
      SubView</em> theRealThing = [[self class] loadFromNibNoOwner];</p>

<pre><code>  // pass properties through
  [self copyUIPropertiesTo:theRealThing];

  //auto layout
  self.translatesAutoresizingMaskIntoConstraints = NO;
  theRealThing.translatesAutoresizingMaskIntoConstraints = NO;

  return theRealThing;
</code></pre>

<p>  }
  return self;
}</p></li>
</ul>


<p>&ndash;(void) copyUIPropertiesTo:(UIView *)view
{</p>

<pre><code>// reflection did not work to get those lists, so I hardcoded them
// any suggestions are welcome here

NSArray *properties =
[NSArray arrayWithObjects: @"frame",@"bounds", @"center", @"transform", @"contentScaleFactor", @"multipleTouchEnabled", @"exclusiveTouch", @"autoresizesSubviews", @"autoresizingMask", @"clipsToBounds", @"backgroundColor", @"alpha", @"opaque", @"clearsContextBeforeDrawing", @"hidden", @"contentMode", @"contentStretch", nil];

// some getters have 'is' prefix
NSArray *getters =
[NSArray arrayWithObjects: @"frame", @"bounds", @"center", @"transform", @"contentScaleFactor", @"isMultipleTouchEnabled", @"isExclusiveTouch", @"autoresizesSubviews", @"autoresizingMask", @"clipsToBounds", @"backgroundColor", @"alpha", @"isOpaque", @"clearsContextBeforeDrawing", @"isHidden", @"contentMode", @"contentStretch", nil];

for (int i=0; i&lt;[properties count]; i++)
{
    NSString * propertyName = [properties objectAtIndex:i];
    NSString * getter = [getters objectAtIndex:i];

    SEL getPropertySelector = NSSelectorFromString(getter);

    NSString *setterSelectorName =
    [propertyName stringByReplacingCharactersInRange:NSMakeRange(0,1) withString:[[propertyName substringToIndex:1] capitalizedString]];

    setterSelectorName = [NSString stringWithFormat:@"set%@:", setterSelectorName];

    SEL setPropertySelector = NSSelectorFromString(setterSelectorName);

    if ([self respondsToSelector:getPropertySelector] &amp;&amp; [view respondsToSelector:setPropertySelector])
    {
        NSObject * propertyValue = [self valueForKey:propertyName];

        [view setValue:propertyValue forKey:propertyName];
    }
}    
</code></pre>

<p>}</p>

<p>@end</p>

<p>```</p>

<p>创建一个EmbeddedView.xib，我们想在其它xib中直接link这个EmbeddedView.xib, 还需要创建一个SubView的了类EmbeddedView.<br>
我的xib信息是这样的:<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1edsfrbnwxnj212u0ge771.jpg" alt="" /><br></p>

<p>一切就绪后，运行:<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edsfsk2afbj208v0ft0ss.jpg" alt="" /><br></p>

<p>xib可以快速布署UI, 可以提高开发速度哦。
随便在此预告一下下一篇教程的内容:多Storyboard协作开发。</p>

<p>终于这个教程写完了，完整的Demo可以在此下载:<a href="https://github.com/ondev/LoadNibViewDemo">LoadNibViewDemo</a>.
写个教程我容易吗？ 还希望大家多多支持，你们的支持将是我源源不断的动力。</p>

<hr />

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS App重新签名方法介绍]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/22/ios-appzhong-xin-qian-ming-fang-fa-jie-shao/"/>
    <updated>2014-02-22T14:38:26+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/22/ios-appzhong-xin-qian-ming-fang-fa-jie-shao</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>今天要给大家介绍两种app重新签名的方法, 做一下记录方便需要的朋友。<br>
1. <a href="#md-1">通过Xcode重答名</a> <br>
2. <a href="#md-2">直接修改已签名的iPA文件</a></p>

<!-- more -->


<h3>1.<a name="md-1" id="md-1">通过Xcode重答名</a></h3>

<p>用Xcode打过包的朋友都知道，只需要在Xcode中点两下，就可以签名了，这种方法比较简单直观。今天要介绍的是打包后，不同Mac上重新签名的方法，即传播Xcode Archive.<br></p>

<p>在Xcode中archive成功后，点击Distribute后,我们选择第三个选项：Export as Xcode Archive:<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1eds5kjya4pj20o30h4767.jpg" alt="" /><br></p>

<p>然后我们就会得到一个后缀为xcarchive的文件，用于Mac间传递。现在我们就可以将这个.xcarchive文件发给其它同事，同事收到后双击，就可以在Xcode中打开，接着它就可以Submit to the iOS App Store或Save for Enterprise or Ad Hoc Deployment. 这样就可以达到重签名的目的 <br></p>

<h3>2.<a name="md-2" id="md-2">直接修改已签名的iPA文件</a></h3>

<p>其实iPA文件就是zip文件，只是后缀不同而已。要重签名，我们需要准备证书与provision profile， 证书直接在Keychian里管理，provision profile与证书是对应关系。 真机调试或提交过App到App Store的朋友都应不会陌生。<br></p>

<p>下面直接说步骤：<br>
a.解压iPA文件<br>
b.删掉旧的签名文件<br>
c.拷贝新的provision profile替换旧的embedded.mobileprovision<br>
d.用codesign命令重签名<br>
f.重新zip为iPA文件<br></p>

<p>下面有一个脚本，它完成了上面5步骤：<br></p>

<p>```</p>

<h1>!/bin/sh</h1>

<p>if ! ([ -f &ldquo;$1&rdquo; ]); then
echo \&ldquo;${1}\"文件不存在
exit
fi
ipaName=${1%.ipa}
if [ &rdquo;$ipaName" = &ldquo;$1&rdquo; ]; then
echo \&ldquo;${1}\"不是ipa文件
exit
fi</p>

<h2>step 1, unzip ipa file</h2>

<p>unzip ${ipaName}.ipa</p>

<h2>step 2, remove old codesign</h2>

<p>rm -rf Payload/*.app/_CodeSignature/</p>

<h2>step 3, copy new provision profile</h2>

<p>cp 123.mobileprovision Payload/*.app/embedded.mobileprovision</p>

<h2>step 4, codesign with new certificate and provision</h2>

<p>(/usr/bin/codesign -f -s &ldquo;iPhone Developer: XXXXX (XXX)&rdquo; &mdash;resource-rules Payload/<em>.app/ResourceRules.plist Payload/</em>.app/) || {</p>

<h2>if code sign error, will to here</h2>

<p>echo failed
rm -rf Payload/
exit
}</p>

<h2>step 5, zip it</h2>

<p>zip -r ${ipaName}abc.ipa Payload/
rm -rf Payload/</p>

<p>```</p>

<p>需要注意脚本中有两处需要你们手动修改，第一处是123.mobileprovision，这个文件需要与脚本放同一目录，第二处是XXXXX (XXX), 这儿XXX改为你keychian里有的证书，只需要改XXX, 括号保留。<br></p>

<h3>用法</h3>

<p>保存并修改上面的脚本为resign.sh，再将需要重签名的xxx.ipa与123.mobileprovision文件置于同一目录。然后运行命令：<br></p>

<p><code>
chmod 777 resign.sh
./resign.sh xxx.ipa
</code>
成功后，在目录里会多一个重签名的abc.ipa<br></p>

<hr />

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
</feed>
