<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Haven's Blog]]></title>
  <link href="http://www.ifun.cc/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://www.ifun.cc/"/>
  <updated>2014-02-22T14:04:23+08:00</updated>
  <id>http://www.ifun.cc/</id>
  <author>
    <name><![CDATA[Haven]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[动态计算UITableViewCell高度详解]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/21/dong-tai-ji-suan-uitableviewcellgao-du-xiang-jie/"/>
    <updated>2014-02-21T21:49:56+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/21/dong-tai-ji-suan-uitableviewcellgao-du-xiang-jie</id>
    <content type="html"><![CDATA[<p>不知道大家有没有发现，在iOS APP开发过程中，UITableView是我们显示内容常见的控件，本人觉得它是UIKit中最复杂的一个控件。今天要向大家介绍的就是如何动态计算UITableViewCell高度的一经验与技巧，在此做一些总结方便朋友们查阅。<br></p>

<blockquote><p>同时也欢迎广大iOS技术人员加入技术开发群：&lt;疯狂IT人>93916004，众人拾柴火焰高，大家一起讨论研究。<br></p></blockquote>

<p>为了不让讲解空洞抽象，我还是用代码实例的方式进行讲解，这样更容易接收与学习。<br>
本文将介绍四种情况下UITableViewCell的计算方式，分别是：<br></p>

<ol>
<li><a href="#md-1">Auto Layout with UILabel in UITableViewCell</a></li>
<li><a href="#md-2">Auto Layout with UITextView in UITableViewCell</a></li>
<li><a href="#md-3">Manual Layout with UILabel in UITableViewCell</a></li>
<li><a href="#md-4">Manual Layout with UITextView in UITableViewCell</a></li>
<li><a href="#md-5">随UITextView高度动态改变Cell高度</a></li>
</ol>


<blockquote><p>由于只是一个demo，所以命名这些都是随意从简。</p></blockquote>

<p>首先创建一个Single Page的工程，我命名为CellHeightDemo</p>

<h3><a name="md-1" id="md-1">Auto Layout with UILabel in UITableViewCell</a></h3>

<p>创建一个空的xib,命名为C1.xib, 然后拖入一个UITableViewCell控件。接着创建一个UITableViewCell的子类，命名为C1类。然后在C1.xib中，将与C1类进行关联。别给我说你不会关联，如果不会那看下图你就明白了。<sup>V</sup>^<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edryoxqtp4j207806v0sx.jpg" alt="" /><br>
只需要在Class那里写入关联的类名C1即可。<br><br></p>

<p>还有由于UITableViewCell需要重用功能，所以我们还需要设置一个重用标识<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edrysb61mgj207906vdg8.jpg" alt="" /><br>
在Identifier那里写入重用标识C1,当然你也可以用任意字符。不过后面代码里需要这个字符。<br><br></p>

<p>接着我们来布局。用到了auto layout, 在此我不想介绍auto layout, 以后有时间再专门介绍，下图就是我布局<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edrywtqnijj20vk0dv416.jpg" alt="" /><br>
这儿有两点需要说明：1. UILabel的属性Lines这儿设为了0表示显示多行。2. Auto Layout一定要建立完完整。<br><br></p>

<p>接着我们在UITableView中来使用我们自定义的UITableViewCell C1.<br>
首先我们创建一个UITableViewController的子类T1ViewController, 接着在Main.storyboard中拖入一个UITableViewController，并关联T1ViewController.<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edrzk4ttqrj20kj0i7dhk.jpg" alt="" /><br><br></p>

<p>一切都准备好了，那我们现在来写点代码，给UITableView加点料。<br>
我们想要我们的UITableView使用C1.xib中自定义的Cell,那么我们需要向UITableView进行注册。<br></p>

<p><code>
UINib *cellNib = [UINib nibWithNibName:@"C1" bundle:nil];
[self.tableView registerNib:cellNib forCellReuseIdentifier:@"C1"];
</code>
这样就进行注册了，接着我们还需要每行显示的数据，为了简单一点，我就声明了一个NSArray变量来存放数据。</p>

<p><code>
self.tableData = @[@"1\n2\n3\n4\n5\n6", @"123456789012345678901234567890", @"1\n2", @"1\n2\n3", @"1"];
</code></p>

<p>现在实现UITableViewDataSource的protocol:</p>

<p>```
&ndash; (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{</p>

<pre><code>// Return the number of rows in the section.
return self.tableData.count;
</code></pre>

<p>}</p>

<ul>
<li>(UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath <em>)indexPath
{
  C1 </em>cell = [self.tableView dequeueReusableCellWithIdentifier:@&ldquo;C1&rdquo;];
  cell.t.text = [self.tableData objectAtIndex:indexPath.row];
  return cell;
}
```
从self.tableData中的数据我们可以看到，每一个Cell显示的数据高度是不一样的，那么我们需要动态计算Cell的高度。由于是auto layout，所以我们需要用到一个新的API systemLayoutSizeFittingSize:来计算UITableViewCell所占空间高度。Cell的高度是在- (CGFloat)tableView:(UITableView <em>)tableView heightForRowAtIndexPath:(NSIndexPath </em>)indexPath这个UITableViewDelegate的方法里面传给UITableView的。<br></li>
</ul>


<blockquote><p>这里有一个需要特别注意的问题，也是效率问题。UITableView是一次性计算完所有Cell的高度，如果有1W个Cell，那么- (CGFloat)tableView:(UITableView <em>)tableView heightForRowAtIndexPath:(NSIndexPath </em>)indexPath就会触发1W次，然后才显示内容。不过在iOS7以后，提供了一个新方法可以避免这1W次调用，它就是- (CGFloat)tableView:(UITableView <em>)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath </em>)indexPath。要求返回一个Cell的估计值，实现了这个方法，那只有显示的Cell才会触发计算高度的protocol. 由于systemLayoutSizeFittingSize需要cell的一个实例才能计算，所以这儿用一个成员变量存一个Cell的实列，这样就不需要每次计算Cell高度的时候去动态生成一个Cell实例，这样即方便也高效也少用内存，可谓一举三得。</p></blockquote>

<p>我们声明一个存计算Cell高度的实例变量：</p>

<p><code>
@property (nonatomic, strong) UITableViewCell *prototypeCell;
</code></p>

<p>然后初始化它：</p>

<p><code>
self.prototypeCell  = [self.tableView dequeueReusableCellWithIdentifier:@"C1"];
</code></p>

<p>下面是计算Cell高度的实现：</p>

<p>```
&ndash; (CGFloat)tableView:(UITableView <em>)tableView heightForRowAtIndexPath:(NSIndexPath </em>)indexPath {</p>

<pre><code>C1 *cell = (C1 *)self.prototypeCell;
cell.t.text = [self.tableData objectAtIndex:indexPath.row];
CGSize size = [cell.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize];
NSLog(@"h=%f", size.height + 1);
return 1  + size.height;
</code></pre>

<p>}
```
看了代码，可能你有点疑问，为何这儿要加1呢？笔者告诉你，如果不加1，结果就是错误的，Cell中UILabel将显示不正确。原因就是因为这行代码CGSize size = [cell.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize];由于是在cell.contentView上调用这个方法，那么返回的值将是contentView的高度，UITableViewCell的高度要比它的contentView要高1,也就是它的分隔线的高度。如果你不相信，那请看C1.xib的属性，比较下面两张图。<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1eds2g75es4j20vi0bd3zx.jpg" alt="" />
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1eds2gqoui2j20vl0eegni.jpg" alt="" />
发现没Cell的高度是127, 面contentView的高度是126, 这下明白了吧。</p>

<p>为了让读者看清楚，我将Cell中UILabel的背景色充为了light gray.下面是运行效果：<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1eds2k4ighsj208y0ejdgc.jpg" alt="" /></p>

<h3><a name="md-2" id="md-2">Auto Layout with UITextView in UITableViewCell</a></h3>

<p>本小段教程将介绍UITextView在cell中计算高度需要注意的地方。同样参考上面我们创建一个C2.xib, UITableViewCell的子类C2,并关联C2.xib与C2类。并在C2.xib中对其布局，同样使用了auto layout. 布局如下图：<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1eds2o28t18j20vp0ej41f.jpg" alt="" /></p>

<p>创始UITableViewController的了类T2ViewController，在Main.storyboard中拖入UITableViewController,并关联他们。接着代码中注册C2.xib到UITableView.</p>

<p>下面计是计算高度的代码：</p>

<p>```
&ndash; (CGFloat)tableView:(UITableView <em>)tableView heightForRowAtIndexPath:(NSIndexPath </em>)indexPath {</p>

<pre><code>C2 *cell = (C2 *)self.prototypeCell;
cell.t.text = [self.tableData objectAtIndex:indexPath.row];
CGSize size = [cell.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize];
CGSize textViewSize = [cell.t sizeThatFits:CGSizeMake(cell.t.frame.size.width, FLT_MAX)];
CGFloat h = size.height + textViewSize.height;
h = h &gt; 89 ? h : 89;  //89是图片显示的最低高度， 见xib
NSLog(@"h=%f", h);
return 1 + h;
</code></pre>

<p>}
```</p>

<p>在这儿我们是通过sizeThatFits:计算的UITextView的高度(这是计算UITextView内容全部显示时的方法，在第四小段中我们还会用到它)，然后加上systemLayoutSizeFittingSize:返回的高度。为什么要这样呢？ 因为UITextView内容的高度不会影响systemLayoutSizeFittingSize计算。这句话什么意思呢？我真不知道如何用言语表达了。还是先上一张图吧：<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1eds2zaziwfj20bf05udg4.jpg" alt="" /><br>
此图中距顶的约束是10, 距底的约束8, 距左边约束是87,距右边的约束是13, 那么systemLayoutSizeFittingSize:返回的CGSize为height等于19, size等于100. 它UITextView的frame是不影响systemLayoutSizeFittingSize:的计算。不知道这样说大家明白没。<br>
所以，我们需要加上textViewSize.height. <br></p>

<p>下面是运行效果：<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1eds36rqilej208w0cpt94.jpg" alt="" /></p>

<h3><a name="md-3" id="md-3">Manual Layout with UILabel in UITableViewCell</a></h3>

<p>本小段教程将介绍UILabel在Manual layout cell中计算高度， 原理是根据字体与字符串长度来计算长度与宽度。
按照前面介绍的，我们需要创建C3.xib, C3类, T3ViewController类,Main.storyboard中拖入UITableViewController，并分别建立关联。 为了简单，C3.xib中我就不加padding之类的了，如图<br></p>

<blockquote><p>记得关闭C3.xib的auto layout</p></blockquote>

<p><img src="http://ww1.sinaimg.cn/large/6bf526ffgw1eds3ek4ejjj20vq0dr0ue.jpg" alt="" /><br></p>

<p>直接上代码了：</p>

<p>```
&ndash; (UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{</p>

<pre><code>C3 *cell = [self.tableView dequeueReusableCellWithIdentifier:@"C3"];
cell.t.text = [self.tableData objectAtIndex:indexPath.row];
[cell.t sizeToFit];
return cell;
</code></pre>

<p>}</p>

<ul>
<li>(CGFloat)tableView:(UITableView <em>)tableView heightForRowAtIndexPath:(NSIndexPath </em>)indexPath {
  C3 <em>cell = (C3 </em>)self.prototypeCell;
  NSString *str = [self.tableData objectAtIndex:indexPath.row];
  cell.t.text = str;
  CGSize s = [str calculateSize:CGSizeMake(cell.t.frame.size.width, FLT_MAX) font:cell.t.font];
  CGFloat defaultHeight = cell.contentView.frame.size.height;
  CGFloat height = s.height > defaultHeight ? s.height : defaultHeight;
  NSLog(@&ldquo;h=%f&rdquo;, height);
  return 1  + height;
}
```</li>
</ul>


<p>这儿用到了一个NSString的Cagetory方法：</p>

<p>```
&ndash; (CGSize)calculateSize:(CGSize)size font:(UIFont *)font {</p>

<pre><code>CGSize expectedLabelSize = CGSizeZero;

if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7) {
    NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];
    paragraphStyle.lineBreakMode = NSLineBreakByWordWrapping;
    NSDictionary *attributes = @{NSFontAttributeName:font, NSParagraphStyleAttributeName:paragraphStyle.copy};

    expectedLabelSize = [self boundingRectWithSize:size options:NSStringDrawingUsesLineFragmentOrigin attributes:attributes context:nil].size;
}
else {
    expectedLabelSize = [self sizeWithFont:font
                                   constrainedToSize:size
                                       lineBreakMode:NSLineBreakByWordWrapping];
}

return CGSizeMake(ceil(expectedLabelSize.width), ceil(expectedLabelSize.height));
</code></pre>

<p>}
```</p>

<p>原理上面我已说了，这儿没有什么好说明的，代码一目了然。</p>

<p>运行效果如图：<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1eds3jmducyj208u0ekjrq.jpg" alt="" /></p>

<h3><a name="md-4" id="md-4">Manual Layout with UITextView in UITableViewCell</a></h3>

<p>本小段教程将介绍UITextView在Manual layout cell中计算高度， 原理是与第二小节里的原因，用sizeThatFits:的方法计算UITextView的长度与高度。然后加上padding就是Cell的高度。
按照前面介绍的，我们需要创建C4.xib, C4类, T4ViewController类,Main.storyboard中拖入UITableViewController，并分别建立关联。 为了简单，C4.xib中我就不加padding之类的了，如图<br></p>

<blockquote><p>计得关闭C4.xib的auto layout</p></blockquote>

<p><img src="http://ww3.sinaimg.cn/large/6bf526ffgw1eds3nkgxyyj20vn0g6dhh.jpg" alt="" /> <br></p>

<p>也直接上代码了，直观明了：<br></p>

<p>```
&ndash; (UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{</p>

<pre><code>C4 *cell = [self.tableView dequeueReusableCellWithIdentifier:@"C4"];
cell.t.text = [self.tableData objectAtIndex:indexPath.row];
[cell.t sizeToFit];
return cell;
</code></pre>

<p>}</p>

<ul>
<li>(CGFloat)tableView:(UITableView <em>)tableView heightForRowAtIndexPath:(NSIndexPath </em>)indexPath {
  C4 <em>cell = (C4 </em>)self.prototypeCell;
  NSString *str = [self.tableData objectAtIndex:indexPath.row];
  cell.t.text = str;
  CGSize s =  [cell.t sizeThatFits:CGSizeMake(cell.t.frame.size.width, FLT_MAX)];
  CGFloat defaultHeight = cell.contentView.frame.size.height;
  CGFloat height = s.height > defaultHeight ? s.height : defaultHeight;
  return 1  + height;
}
```</li>
</ul>


<p>运行效果：<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1eds3q86ryyj208y0ei0t5.jpg" alt="" /> <br></p>

<h3><a name="md-5" id="md-5">随UITextView高度动态改变Cell高度</a></h3>

<p>本小节要介绍的一个功能是，UITextView中UITableViewCell中，当输入UITextView中的字变多/变少时，高度变化，Cell高度与随之变化的功能。<br>
按照前面介绍的，我们需要创建C5.xib, C5类, T5ViewController类,Main.storyboard中拖入UITableViewController，并分别建立关联。 为了简单，C5.xib中我就不加padding之类的了，如图<br></p>

<blockquote><p>记得开启C5.xib的auto layout</p></blockquote>

<p><img src="http://ww3.sinaimg.cn/large/6bf526ffgw1eds3y3bt19j20vn0fq766.jpg" alt="" /> <br></p>

<p>先看代码：<br></p>

<p>```
&ndash; (UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{</p>

<pre><code>C5 *cell = [self.tableView dequeueReusableCellWithIdentifier:@"C5"];
cell.t.text = @"123";
cell.t.delegate = self;
return cell;
</code></pre>

<p>}</p>

<h1>pragma mark &ndash; UITableViewDelegate</h1>

<ul>
<li>(CGFloat)tableView:(UITableView <em>)tableView heightForRowAtIndexPath:(NSIndexPath </em>)indexPath {
  C5 <em>cell = (C5 </em>)self.prototypeCell;
  cell.t.text = self.updatedStr;
  CGSize s =  [cell.t sizeThatFits:CGSizeMake(cell.t.frame.size.width, FLT_MAX)];
  CGFloat defaultHeight = cell.contentView.frame.size.height;
  CGFloat height = s.height > defaultHeight ? s.height : defaultHeight;
  return 1  + height;
}</li>
</ul>


<h1>pragma mark &ndash; UITextViewDelegate</h1>

<ul>
<li><p>(BOOL)textView:(UITextView <em>)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString </em>)text {
  if ([text isEqualToString:@&ldquo;\n&rdquo;]) {
      NSLog(@&ldquo;h=%f&rdquo;, textView.contentSize.height);
  }
  return YES;
}</p></li>
<li><p>(void)textViewDidChange:(UITextView *)textView {
  self.updatedStr = textView.text;
  [self.tableView beginUpdates];
  [self.tableView endUpdates];
}</p></li>
</ul>


<p>```</p>

<p>原理就是UITextView内容改变的时候，计算自身高度，然后通知UITableView更新，这样就会触发UITableViewCell高度重新计算，以达到目的。 <br></p>

<hr />

<p>本文只是简单的介绍了一些原理与技巧，细节之处还请参看<a href="https://github.com/ondev/CellHeightDemo">源码</a> <br></p>

<blockquote><p>如果你有什么问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>参考：<br>
<a href="http://www.howlin-interactive.com/2013/01/creating-a-self-sizing-uitextview-within-a-uitableviewcell-in-ios-6/">http://www.howlin-interactive.com/2013/01/creating-a-self-sizing-uitextview-within-a-uitableviewcell-in-ios-6/</a>
<a href="http://johnszumski.com/blog/auto-layout-for-table-view-cells-with-dynamic-heights">http://johnszumski.com/blog/auto-layout-for-table-view-cells-with-dynamic-heights</a>
<a href="http://technet.weblineindia.com/mobile/add-auto-layout-support-for-uiscrollview-with-example-in-ios-app-development/">http://technet.weblineindia.com/mobile/add-auto-layout-support-for-uiscrollview-with-example-in-ios-app-development/</a>
<a href="http://useyourloaf.com/blog/2014/02/14/table-view-cells-with-varying-row-heights.html">http://useyourloaf.com/blog/2014/02/14/table-view-cells-with-varying-row-heights.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Http URL Cache清除]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/09/ios-http-url-cacheqing-chu/"/>
    <updated>2014-02-09T11:23:10+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/09/ios-http-url-cacheqing-chu</id>
    <content type="html"><![CDATA[<p>三行代码</p>

<p><code>
[[NSURLCache sharedURLCache] removeAllCachedResponses];
[[NSURLCache sharedURLCache] setDiskCapacity:0];
[[NSURLCache sharedURLCache] setMemoryCapacity:0];
</code></p>

<p>其实只需要第一行即可。</p>

<p>UIWebView中的cache也可以用此方法清除， 所有通过URL Loading System缓存的数据都可以清除。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LevelDB for iOS]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/09/leveldb-for-ios/"/>
    <updated>2014-02-09T11:20:55+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/09/leveldb-for-ios</id>
    <content type="html"><![CDATA[<p>最近NO SQL型数据库比较火，本人也想了解了解。于是找到了LevelDB这个数据库,它是一个KV型的数库据，还度那是杠杠的。于是试着用一下。</p>

<p>它是开源的，首先得编译它。网上已有很多人成功编译了它。<br>
首先就是下载源码</p>

<p><code>
clone levelDB repo https://code.google.com/p/leveldb/
</code>
这个工程里的mackfile就支持编译iOS平台，只不过很久有没有更新了，现在iOS7出来后，常用指令集分别是armv7,armv7s,arm64. 对于armv6我们可以放弃了，毕竟技术是在不断发展的，过时的就不要用了。
现在我们来修改Makefile, 主要就是去掉armv6, 然后增加armv7s与arm64.</p>

<p>定位到.cc.o的198行与.c.o的205行
修改为：</p>

<p>```
.cc.o:</p>

<pre><code>mkdir -p ios-x86/$(dir $@)
$(CXX) $(CXXFLAGS) -isysroot $(SIMULATORROOT)/SDKs/iPhoneSimulator$(IOSVERSION).sdk -arch i686 -c $&lt; -o ios-x86/$@
mkdir -p ios-arm/$(dir $@)
xcrun -sdk iphoneos $(CXX) $(CXXFLAGS) -isysroot $(DEVICEROOT)/SDKs/iPhoneOS$(IOSVERSION).sdk -arch armv7 -arch armv7s -arch arm64 -c $&lt; -o ios-arm/$@
lipo ios-x86/$@ ios-arm/$@ -create -output $@
</code></pre>

<p>.c.o:</p>

<pre><code>mkdir -p ios-x86/$(dir $@)
$(CC) $(CFLAGS) -isysroot $(SIMULATORROOT)/SDKs/iPhoneSimulator$(IOSVERSION).sdk -arch i686 -c $&lt; -o ios-x86/$@
mkdir -p ios-arm/$(dir $@)
xcrun -sdk iphoneos $(CC) $(CFLAGS) -isysroot $(DEVICEROOT)/SDKs/iPhoneOS$(IOSVERSION).sdk  -arch armv7 -arch armv7s -arch arm64 -c $&lt; -o ios-arm/$@
lipo ios-x86/$@ ios-arm/$@ -create -output $@
</code></pre>

<p>```
保存，</p>

<p>然后用命令进行编译
<code>
CXXFLAGS=-stdlib=libc++ make PLATFORM=IOS
</code>
或
<code>
CXXFLAGS=-stdlib=libstdc++ make PLATFORM=IOS
</code>
都可以，由于用到了c++标准库，这儿分别用了新旧不同的库而已。libc++是支持c++ 11标准的，这儿分别对应xcode中引用的两个库ibc++.dylib与libstdc++.dylib两个库。</p>

<p>编译成功后，在源码根目录就会有一个libleveldb.a的库文件与include的头文件目录。然后就可以试用了。这儿我引用<a href="http://www.tanhao.me/pieces/1397.html">老谭</a>哥写好的wrapper，并写了一个for iOS的测试工程。
创建一个iOS的新工程，将libleveldb.a与include copy到工程目录中，然后将libleveldb.a拖到工程中，接着配置header查找目录，在xcode setting中的Header Search path中加入一行${SRCROOT}，它后面选择recursive， 表示在工程源码目录中递归遍历查找头文件。
<img src="http://user-image.logdown.io/user/6397/blog/6392/post/177919/9MjT1fJxRXCdmUCZgmio_Screen%20Shot%202014-02-04%20at%201.52.41%20pm.png" alt="Screen Shot 2014-02-04 at 1.52.41 pm.png" /></p>

<p>接着在AppDelegate.m中引入老潭的wrapper头文件</p>

<p>```</p>

<h1>import &ldquo;THLevelDB.h&rdquo;</h1>

<p>```
接着在didFinishLaunchingWithOptions中写测试代码。</p>

<p>```</p>

<pre><code>NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
NSString *dbPath = [[paths objectAtIndex:0] stringByAppendingPathComponent:@"leveldb_demo.ldb"];
THLevelDB *db = [THLevelDB levelDBWithPath:dbPath];

//存储字符串
[db setString:@"成都" forKey:@"city"];

//存储基本类型
[db setInt:13579 forKey:@"count"];
[db setFloat:30.2 forKey:@"temperature"];

//存储Data数据
NSData *data = [@"天府之国" dataUsingEncoding:NSUTF8StringEncoding];
[db setData:data forKey:@"data"];

//存储任意对象(实现了NSCoding协议的对象)
[db setObject:[NSDate date] forKey:@"object"];


NSLog(@"城市:%@",[db stringForKey:@"city"]);
NSLog(@"数量:%d",[db intForKey:@"count"]);
NSLog(@"Data:%@",[db dataForKey:@"data"]);
NSLog(@"对象:%@",[db objectForKey:@"object"]);
</code></pre>

<p>```</p>

<p>测试工程<a href="https://github.com/ondev/LevelDBiOSDemo">传送门</a>。</p>

<p>参考：
<a href="http://blog.rpplusplus.me/blog/2014/01/20/build-leveldb/">http://blog.rpplusplus.me/blog/2014/01/20/build-leveldb/</a>
<a href="http://www.tanhao.me/pieces/1397.html">http://www.tanhao.me/pieces/1397.html</a>
<a href="http://herkuang.info/blog/2014/01/28/ios%E4%B8%8B%E7%BC%96%E8%AF%91leveldb%E7%9A%84%E6%80%BB%E7%BB%93/">http://herkuang.info/blog/2014/01/28/ios%E4%B8%8B%E7%BC%96%E8%AF%91leveldb%E7%9A%84%E6%80%BB%E7%BB%93/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS常用宏]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/08/ioschang-yong-hong/"/>
    <updated>2014-02-08T22:58:09+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/08/ioschang-yong-hong</id>
    <content type="html"><![CDATA[<p>最近整理了一下代码，发现iOS下开发用过不少宏。在此汇总一下，大部份来自网络，方便大家使用。</p>

<p><a href="https://gist.github.com/ondev/6714742#file-gistfile1-txt">传送门</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS获取ISO Country Code]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/08/ioshuo-qu-iso-country-code/"/>
    <updated>2014-02-08T22:54:47+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/08/ioshuo-qu-iso-country-code</id>
    <content type="html"><![CDATA[<p>通过SIM卡获取country code,下面是代码片段</p>

<p>```
NSString <em>(^CountryNameByISO)(NSString </em>) = ^(NSString *iso) {</p>

<pre><code>NSLocale *locale = [NSLocale currentLocale];
return [locale displayNameForKey:NSLocaleCountryCode value:iso];
</code></pre>

<p>};</p>

<p>NSString *(^ISOCountryCodeByCarrier)() = ^() {</p>

<pre><code>CTTelephonyNetworkInfo *networkInfo = [[CTTelephonyNetworkInfo alloc] init];
CTCarrier *carrier = [networkInfo subscriberCellularProvider];
return [carrier isoCountryCode];
</code></pre>

<p>};</p>

<h1>define SIMISO                  ISOCountryCodeByCarrier()</h1>

<h1>define CountryNameFromISO(iso) CountryNameByISO(iso)</h1>

<p>```</p>

<p>这样就可以通过两个宏进行调用了</p>

<p><code>
NSString *iso  ＝ ISOCountryCodeByCarrier();
NSString *name ＝ CountryNameFromISO(iso);
</code></p>

<p>还有一种，是获取Device本地设置的地区。</p>

<p>```</p>

<h1>define countryISO  [[NSLocale currentLocale] objectForKey: NSLocaleCountryCode]</h1>

<p>```</p>

<p>下面是获取本地设置的语言</p>

<p>```</p>

<h1>define languageISO [[NSLocale currentLocale] objectForKey: NSLocaleLanguageCode]</h1>

<p>```</p>
]]></content>
  </entry>
  
</feed>
