<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Haven's Blog]]></title>
  <link href="http://www.ifun.cc/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://www.ifun.cc/"/>
  <updated>2014-07-11T17:15:40+08:00</updated>
  <id>http://www.ifun.cc/</id>
  <author>
    <name><![CDATA[Haven]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS Jailbreak Dev准备工作]]></title>
    <link href="http://www.ifun.cc/blog/2014/07/11/ios-jailbreak-devzhun-bei-gong-zuo/"/>
    <updated>2014-07-11T16:58:09+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/07/11/ios-jailbreak-devzhun-bei-gong-zuo</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>安全越来越重要了，所以我也在开始着手研究iOS安全。iOS的安全很大一部份是在iOS越狱的基础上进行的，所以对基设备进行越狱，并准备向安全领域进军。</p>

<p>1.iOS越狱设备，这我就不多说了,(有风险，自行承担)
2.在iOS越狱设备上安装openssh, SBSettings, BigBoss Recommended tools, MobileTerminal,这些可以通过Cydia安装</p>

<p>下面安装clutch,class-dump-z</p>

<p><code>
ssh root@you ios device ip
apt-get upgrade
wget http://networkpx.googlecode.com/files/class-dump-z_0.2a.tar.gz
tar -xvzf class-dump-z_0.2a.tar.gz
cd iphone_armv6
cp class-dump-z /usr/bin
chmod 777 /usr/bin/class-dump-z
</code>
可以用sftp将clutch上传到iOS设备里。Clutch在<a href="https://github.com/KJCracks/Clutch">这儿</a>哦</p>

<p>从appstore上下载的app是加了密的，加了密的app，class-dump-z就无能为力了，所以需要clutch将基解密。</p>

<p>以2048为例</p>

<p><code>
clutch 2048
cd /User/Documents/Cracked
unzip /User/Documents/Cracked/2048.ipa -d 2048
class-dump-z 2048/Payload/2048.app/2048 &gt; class-info-2048
</code></p>

<p>3.在Mac上安装theOS,iOSOpenDev,Cycript</p>

<p>就这些了，以后再加用到的。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义iOS上双击Home键App切屏]]></title>
    <link href="http://www.ifun.cc/blog/2014/07/10/zi-ding-yi-iosshang-shuang-ji-homejian-appqie-ping/"/>
    <updated>2014-07-10T16:34:06+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/07/10/zi-ding-yi-iosshang-shuang-ji-homejian-appqie-ping</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>在iOS7上，如果双击Home，会来到iOS App的switcher页面，在这儿列出了当前系统挂起的App, 上面有每个App的切屏，相信大家都熟悉这个东东了。它其实是每个App在挂起前，对App截屏。</p>

<p>那么我们如何自定义它在App Switcher上的展示呢，明白了它其实是对App的截屏，那么在它快进入后台的时候，我们改变其外观，那么截下来的图片，不就改变了吗？</p>

<p>明白这个原理后，那我们就试一试。</p>

<p>新建一个工程，准备三张图片，Defautl.png, Defautl@2x.png, Default-568h@2x.png,  将其放进工程。</p>

<p>我们在AppDelegate.h中声明一个UIImageView变量</p>

<p>```
@interface AppDelegate : UIResponder <UIApplicationDelegate> {</p>

<pre><code>UIImageView *screenShotView;
</code></pre>

<p>}</p>

<p>@property (strong, nonatomic) UIWindow *window;</p>

<p>@end
```</p>

<p>接着在AppDelegate中加入以下代码:</p>

<p>```
&ndash; (void)applicationWillResignActive:(UIApplication *)application
{</p>

<pre><code>if (!screenShotView) {
    screenShotView = [[UIImageView alloc]initWithFrame:[self.window frame]];
    [screenShotView setImage:[UIImage imageNamed:@"Default-568h"]];
    [self.window addSubview:screenShotView];
}
screenShotView.alpha = 1;
</code></pre>

<p>}</p>

<ul>
<li>(void)applicationDidBecomeActive:(UIApplication *)application
{
  screenShotView.alpha = 0;
}
```</li>
</ul>


<p>先在模拟器上删除以app,然后再点xcode run.  双击Home, 这下你是不是在App Switcher中看到了你的Default的图片，将上面的代码中Default-568h改为其它图片, 这样达到了自定义目的, 是不是太简单了呀？</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个基于Nodejs的简单iOS MDM服务]]></title>
    <link href="http://www.ifun.cc/blog/2014/07/08/%5B%3F%5D-ge-ji-yu-nodejsde-jian-dan-ios-mdmfu-wu/"/>
    <updated>2014-07-08T18:57:37+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/07/08/[?]-ge-ji-yu-nodejsde-jian-dan-ios-mdmfu-wu</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>如果有效的管理自己的iOS移动设备，苹果为我们提供了MDM技术。最近小弟在研究它，有一点小经验，写了一个简单的iOS MDM服务, 服务器采用Nodejs＋Mongodb.</p>

<p>大家可以试用一下,请直接<a href="https://www.sohoin.com">猛击这儿</a>(记得用设备的safari打开)进入。</p>

<p>首先需要大家注册一个帐号，密码与帐号是管理你设备所需的。</p>

<p>登陆进系统后，会有两步需要你完成，一是点击安装mdm描述文件，安装成功后请进行第二步，安装udid获取描述文件，第二步会获取你设备UDID, 并加入到你的管理列表中，这样你以后就可以对其进行管理。</p>

<p>完成上面两步后就可以看到下面多了两列命令，一个是锁屏，一个是清除密码。目前只支持这两个命令，后续会慢慢加入。</p>

<p>界在很丑呀，有空美化一下，换衣大家提意见。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa触发方法调用的几种方法]]></title>
    <link href="http://www.ifun.cc/blog/2014/06/14/cocoahong-fa-fang-fa-diao-yong-de-ji-chong-fang-fa/"/>
    <updated>2014-06-14T09:38:40+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/06/14/cocoahong-fa-fang-fa-diao-yong-de-ji-chong-fang-fa</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>今天周未，有点空闲时间，小结一下Cocoa中触发方法调用的几种方法。</p>

<h3>1.SEL触发</h3>

<p>SEL就是selector的缩写，它表示Cocoa中的方法选择器，不明白？那请仔细了解Objective_C的运行时机制与Cocoa底层思想。 <br></p>

<p><code>
SEL theSelector = @selector(methodWithInt:andInt:);
</code>
看了上面代码这下你明白了什么是SEL了吧，平时我们开发当中经常用到的。<br>
有了SEL这样就可以触发方法调用了,<br></p>

<p><code>
[self performSelector:theSelector]
[self performSelector:@selector(methodWithInt:andInt:)];
</code>
上面两句代码是同一个道理。<br></p>

<h3>2. IMP触发</h3>

<p>IMP其实就是一个函数指针的概念，就可以这么简单理解。<br></p>

<p><code>
IMP theImplementation = [self methodForSelector:theSelector];
</code>
上面这句代码就是获取methodWithInt:andInt:这个方法的地址。<br>
有了这个函数指针后，我们就可以触发方法：</p>

<p><code>
theImplementation(self, theSelector, 30, 5);
</code>
第一个是对象，第二个SEL， 后面的传入的参数。</p>

<h3>3. objc_msgSend方法</h3>

<p>这是Objc运行时的一个C方法，我们先看一个示列:<br></p>

<p><code>
objc_msgSend(self, @selector(fly));
</code>
这行代码等价于<br></p>

<p>[self fly];</p>

<h3>4. NSInvocation</h3>

<p>NSInvocation相比上面几种方法，可以动态决定传入的参数个数。有了它，我们就可以实现&hellip;这样的变参API封装。<br>
说得有点抽像，看代码更清楚:<br></p>

<p>假如我们实现了一个两个数相加的方法，</p>

<p><code>
-(void)addNSNumber:(NSNumber *)first withNumber:(NSNumber *)second
</code>
我们可以用下面的方法来触发这个方法，并获取返回值。<BR></p>

<p>```
&ndash; (NSNumber *)testAdd {</p>

<pre><code>NSNumber *retval;

NSNumber *arg1 = [NSNumber numberWithDouble:15.0];
NSNumber *arg2 = [NSNumber numberWithDouble:13.0];

SEL selector = @selector(addNSNumber:withNumber:);

NSMethodSignature *sig = [self  methodSignatureForSelector:selector];
NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:sig];

[invocation setTarget:self];
[invocation setSelector:selector];
[invocation setArgument:(void *)&amp;arg1 atIndex:2];
[invocation setArgument:(void *)&amp;arg2 atIndex:3];
[invocation invoke];

if ([sig methodReturnLength]) {
    [invocation getReturnValue:&amp;retval];
    return retval;
}

return nil;
</code></pre>

<p>}
```
代码很容易理解，我也不多做解释，有不明白的请留言。<br></p>

<p>下面是变参封装, 写了两个NSObject的Extension（Category）:<br></p>

<p>```
+ (NSInvocation *)createInvocationOnTarget:(id)target selector:(SEL)selector {</p>

<pre><code>return [NSObject createInvocationOnTarget:target selector:selector withArguments:nil];
</code></pre>

<p>}</p>

<ul>
<li><p>(NSInvocation <em>)createInvocationOnTarget:(id)target selector:(SEL)selector withArguments:(id)arg1, &hellip; {
  NSMethodSignature </em>sig = [target methodSignatureForSelector:selector];
  NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:sig];</p>

<p>  [invocation setTarget:target];
  [invocation setSelector:selector];</p>

<p>  if(arg1) {
      va_list args;
      va_start(args, arg1);</p>

<pre><code>  [invocation setArgument:(void *)&amp;arg1 atIndex:2];

  id obj;
  int ct = 3;

  while( obj = va_arg(args, id) ) {
      NSLog(@"%@", obj);
      [invocation setArgument:(void *)&amp;obj atIndex:ct];

      ct++;
  }

  va_end(args);
</code></pre>

<p>  }</p>

<p>  return invocation;
}
```</p></li>
</ul>


<p>调用方法:</p>

<p>```
NSInvocation *invocation = [NSObject createInvocationOnTarget:mathInstance selector:selector withArguments: arg1, arg2, nil];</p>

<p>[invocation invoke];
[invocation getReturnValue:&amp;retval];</p>

<p>return retval;
```</p>

<p>目前只了解这些方法，如果你有更多的方法，还望提醒<br></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[结队开发之多storyboard]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/23/jie-dui-kai-fa-zhi-duo-storyboard/"/>
    <updated>2014-02-23T10:38:15+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/23/jie-dui-kai-fa-zhi-duo-storyboard</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>Storyboard的出现，让开发变得像讲故事一样，UI间的关系流程也一目了然。它其实是xib的升级版本，将多个xib统一管理了。任何事都有双面性，Storyboard也有它的缺点。笔者就说说自己的经验，版本管理中，多人修改很容易严生冲突。storyboard中UIViewController太多，找到想要的比较困难（特别是在MBA上）。 这些缺点在结队开发中就会遇见。 如果我们用xib文件，这样将UI最小化分隔开，将后用code将这些小单元连接起来，就可以解决这个问题。如果只用xib就展现不出storyboard的故事情节能力。</p>

<!-- more -->


<p>本人提供两种解决方案：<br>
1.<a href="#md-1">Xib link Xib</a><br>
2.<a href="#md-2">Storyboard link Storyboard</a></p>

<p>其实它们之间可以两两组合，这样就可以延伸出另外两种方法:
3.Xib link Storyboard <br>
4.Storyboard link Xib <br></p>

<h3><a id="md-1">Xib link Xib</a></h3>

<p>这种方法其实我以<a href="http://www.ifun.cc/blog/2014/02/22/ioskai-fa-zhi-xibji-qiao-jie-shao/">上一篇</a>文章已经介绍过了，大家自行阅读，在些也不多述。</p>

<h3><a id="md-2">Storyboard link Storyboard</a></h3>

<p>这种方法与上面方法原理是一样的，利用加载storyboard时，实例化对应自定义UIViewController类，然后手动addSubview到对link view上，以达到链接的目录。 用言语表达是有点抽象，还是用代码表达吧，容易理解。<br></p>

<p>在这儿用到了Github上一个人写的link代码:<a href="https://github.com/rob-brown/RBStoryboardLink">RBStoryboardLink</a>。它的用法也在README中说得很清楚了。</p>

<p>大家将源码下载下来，里面有一个sample:LinkedTabs. 由于原作者用到了cocoapods,所以需要到源码LinkedTabs目录下， 运行一个命令行:</p>

<p><code>
pod update
</code>
我还是简单说一下sample的结构。<br>
里面有三个storyboard,分别是MainStoryboard，FirstTabStoryboard， SecondTabStoryboard， 现在需要将MainStoryboard中的两个UIViewController分别与FirstTabStoryboard,SecondTabStoryboard建立连接，以达到程序运行后，这三个storyboard像是在一起的目的。<br></p>

<p>打开MainStoryboard，定位到Tab1的UIViewController<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edt58mgnxij20vp0g6mzp.jpg" alt="" /><br></p>

<p>注意图中两个箭头，上面一个一定要填这个自定义类RBStoryboardLink， 就是个类完成了连接的任务。<br>
下面一个箭头处，是传递的属性与对应的值，在实例化RBStoryboardLink的时候传送递给实例化对象。storyboardName这个属性表示要link到哪儿去，这儿我们要link到FirstTabStoryboard，所以值为FirstTabStoryboard。还有一个可选属性sceneIdentifier, 表示要link到Storyboard中的哪一个UIViewController. 如果不传这个属性，那就link到FirstTabStoryboard中的initial View Controller.<br></p>

<p>如果我们想link到FirstTabStoryboard中的第二个UIViewController那如何办呢，很简单:<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edt5kfj27gj20vp0haju2.jpg" alt="" /><br>
如上图，我们先找到这个被linke的View Controller，然后在Storyboard ID那输入该View Controller的标识，如在此输入:NavController.</p>

<p>接着在需要link的地方加入sceneIdentifier:NavController, 见下图箭头处。<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edt5nd36iwj20vl0fktb6.jpg" alt="" /><br></p>

<p>这样就link成功了。</p>

<p>方法3与方法4只是组合出来的方法，也不在此多述了。</p>

<hr />

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
</feed>
