<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Haven's' Blog]]></title>
  <link href="http://www.ifun.cc/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://www.ifun.cc/"/>
  <updated>2014-02-11T21:22:22+08:00</updated>
  <id>http://www.ifun.cc/</id>
  <author>
    <name><![CDATA[Haven]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS Http URL Cache清除]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/09/ios-http-url-cacheqing-chu/"/>
    <updated>2014-02-09T11:23:10+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/09/ios-http-url-cacheqing-chu</id>
    <content type="html"><![CDATA[<p>三行代码</p>

<p><code>
[[NSURLCache sharedURLCache] removeAllCachedResponses];
[[NSURLCache sharedURLCache] setDiskCapacity:0];
[[NSURLCache sharedURLCache] setMemoryCapacity:0];
</code></p>

<p>其实只需要第一行即可。</p>

<p>UIWebView中的cache也可以用此方法清除， 所有通过URL Loading System缓存的数据都可以清除。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LevelDB for iOS]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/09/leveldb-for-ios/"/>
    <updated>2014-02-09T11:20:55+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/09/leveldb-for-ios</id>
    <content type="html"><![CDATA[<p>最近NO SQL型数据库比较火，本人也想了解了解。于是找到了LevelDB这个数据库,它是一个KV型的数库据，还度那是杠杠的。于是试着用一下。</p>

<p>它是开源的，首先得编译它。网上已有很多人成功编译了它。<br>
首先就是下载源码</p>

<p><code>
clone levelDB repo https://code.google.com/p/leveldb/
</code>
这个工程里的mackfile就支持编译iOS平台，只不过很久有没有更新了，现在iOS7出来后，常用指令集分别是armv7,armv7s,arm64. 对于armv6我们可以放弃了，毕竟技术是在不断发展的，过时的就不要用了。
现在我们来修改Makefile, 主要就是去掉armv6, 然后增加armv7s与arm64.</p>

<p>定位到.cc.o的198行与.c.o的205行
修改为：</p>

<p>```
.cc.o:</p>

<pre><code>mkdir -p ios-x86/$(dir $@)
$(CXX) $(CXXFLAGS) -isysroot $(SIMULATORROOT)/SDKs/iPhoneSimulator$(IOSVERSION).sdk -arch i686 -c $&lt; -o ios-x86/$@
mkdir -p ios-arm/$(dir $@)
xcrun -sdk iphoneos $(CXX) $(CXXFLAGS) -isysroot $(DEVICEROOT)/SDKs/iPhoneOS$(IOSVERSION).sdk -arch armv7 -arch armv7s -arch arm64 -c $&lt; -o ios-arm/$@
lipo ios-x86/$@ ios-arm/$@ -create -output $@
</code></pre>

<p>.c.o:</p>

<pre><code>mkdir -p ios-x86/$(dir $@)
$(CC) $(CFLAGS) -isysroot $(SIMULATORROOT)/SDKs/iPhoneSimulator$(IOSVERSION).sdk -arch i686 -c $&lt; -o ios-x86/$@
mkdir -p ios-arm/$(dir $@)
xcrun -sdk iphoneos $(CC) $(CFLAGS) -isysroot $(DEVICEROOT)/SDKs/iPhoneOS$(IOSVERSION).sdk  -arch armv7 -arch armv7s -arch arm64 -c $&lt; -o ios-arm/$@
lipo ios-x86/$@ ios-arm/$@ -create -output $@
</code></pre>

<p>```
保存，</p>

<p>然后用命令进行编译
<code>
CXXFLAGS=-stdlib=libc++ make PLATFORM=IOS
</code>
或
<code>
CXXFLAGS=-stdlib=libstdc++ make PLATFORM=IOS
</code>
都可以，由于用到了c++标准库，这儿分别用了新旧不同的库而已。libc++是支持c++ 11标准的，这儿分别对应xcode中引用的两个库ibc++.dylib与libstdc++.dylib两个库。</p>

<p>编译成功后，在源码根目录就会有一个libleveldb.a的库文件与include的头文件目录。然后就可以试用了。这儿我引用<a href="http://www.tanhao.me/pieces/1397.html">老谭</a>哥写好的wrapper，并写了一个for iOS的测试工程。
创建一个iOS的新工程，将libleveldb.a与include copy到工程目录中，然后将libleveldb.a拖到工程中，接着配置header查找目录，在xcode setting中的Header Search path中加入一行${SRCROOT}，它后面选择recursive， 表示在工程源码目录中递归遍历查找头文件。
<img src="http://user-image.logdown.io/user/6397/blog/6392/post/177919/9MjT1fJxRXCdmUCZgmio_Screen%20Shot%202014-02-04%20at%201.52.41%20pm.png" alt="Screen Shot 2014-02-04 at 1.52.41 pm.png" /></p>

<p>接着在AppDelegate.m中引入老潭的wrapper头文件</p>

<p>```</p>

<h1>import &ldquo;THLevelDB.h&rdquo;</h1>

<p>```
接着在didFinishLaunchingWithOptions中写测试代码。</p>

<p>```</p>

<pre><code>NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
NSString *dbPath = [[paths objectAtIndex:0] stringByAppendingPathComponent:@"leveldb_demo.ldb"];
THLevelDB *db = [THLevelDB levelDBWithPath:dbPath];

//存储字符串
[db setString:@"成都" forKey:@"city"];

//存储基本类型
[db setInt:13579 forKey:@"count"];
[db setFloat:30.2 forKey:@"temperature"];

//存储Data数据
NSData *data = [@"天府之国" dataUsingEncoding:NSUTF8StringEncoding];
[db setData:data forKey:@"data"];

//存储任意对象(实现了NSCoding协议的对象)
[db setObject:[NSDate date] forKey:@"object"];


NSLog(@"城市:%@",[db stringForKey:@"city"]);
NSLog(@"数量:%d",[db intForKey:@"count"]);
NSLog(@"Data:%@",[db dataForKey:@"data"]);
NSLog(@"对象:%@",[db objectForKey:@"object"]);
</code></pre>

<p>```</p>

<p>测试工程<a href="https://github.com/ondev/LevelDBiOSDemo">传送门</a>。</p>

<p>参考：
<a href="http://blog.rpplusplus.me/blog/2014/01/20/build-leveldb/">http://blog.rpplusplus.me/blog/2014/01/20/build-leveldb/</a>
<a href="http://www.tanhao.me/pieces/1397.html">http://www.tanhao.me/pieces/1397.html</a>
<a href="http://herkuang.info/blog/2014/01/28/ios%E4%B8%8B%E7%BC%96%E8%AF%91leveldb%E7%9A%84%E6%80%BB%E7%BB%93/">http://herkuang.info/blog/2014/01/28/ios%E4%B8%8B%E7%BC%96%E8%AF%91leveldb%E7%9A%84%E6%80%BB%E7%BB%93/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS常用宏]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/08/ioschang-yong-hong/"/>
    <updated>2014-02-08T22:58:09+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/08/ioschang-yong-hong</id>
    <content type="html"><![CDATA[<p>最近整理了一下代码，发现iOS下开发用过不少宏。在此汇总一下，大部份来自网络，方便大家使用。</p>

<p><a href="https://gist.github.com/ondev/6714742#file-gistfile1-txt">传送门</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS获取ISO Country Code]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/08/ioshuo-qu-iso-country-code/"/>
    <updated>2014-02-08T22:54:47+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/08/ioshuo-qu-iso-country-code</id>
    <content type="html"><![CDATA[<p>通过SIM卡获取country code,下面是代码片段</p>

<p>```
NSString <em>(^CountryNameByISO)(NSString </em>) = ^(NSString *iso) {</p>

<pre><code>NSLocale *locale = [NSLocale currentLocale];
return [locale displayNameForKey:NSLocaleCountryCode value:iso];
</code></pre>

<p>};</p>

<p>NSString *(^ISOCountryCodeByCarrier)() = ^() {</p>

<pre><code>CTTelephonyNetworkInfo *networkInfo = [[CTTelephonyNetworkInfo alloc] init];
CTCarrier *carrier = [networkInfo subscriberCellularProvider];
return [carrier isoCountryCode];
</code></pre>

<p>};</p>

<h1>define SIMISO                  ISOCountryCodeByCarrier()</h1>

<h1>define CountryNameFromISO(iso) CountryNameByISO(iso)</h1>

<p>```</p>

<p>这样就可以通过两个宏进行调用了</p>

<p><code>
NSString *iso  ＝ ISOCountryCodeByCarrier();
NSString *name ＝ CountryNameFromISO(iso);
</code></p>

<p>还有一种，是获取Device本地设置的地区。</p>

<p>```</p>

<h1>define countryISO  [[NSLocale currentLocale] objectForKey: NSLocaleCountryCode]</h1>

<p>```</p>

<p>下面是获取本地设置的语言</p>

<p>```</p>

<h1>define languageISO [[NSLocale currentLocale] objectForKey: NSLocaleLanguageCode]</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parse Json to Objective_C Model]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/08/parse-json-to-objective-c-model/"/>
    <updated>2014-02-08T22:51:42+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/08/parse-json-to-objective-c-model</id>
    <content type="html"><![CDATA[<p>在开发server/client的移动应用程序时候，往往用json来转输数据。 最近用空闲时间写了一个根据json自动生成Objectiv_c的源码程序。原理是借鉴WSDL2Objc的源码，用到了STSTemplateEngine. 源码托管在Github:<a href="https://github.com/ondev/Json2Objc">Json2Objc</a></p>

<p>运行程序，然后有三个需要指定的东西：需要指定json文件，生成的文件的存放路径，生成文件的名字。</p>

<p>然后parse，如果没有错误发生，就会在Finder中打开生成的目录。</p>

<p>如何用生成的文件，可以参看参看TestCase。</p>

<p>有任何不明白的地方请留言。</p>
]]></content>
  </entry>
  
</feed>
