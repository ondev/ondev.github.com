<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Haven's Blog]]></title>
  <link href="http://www.ifun.cc/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://www.ifun.cc/"/>
  <updated>2015-11-04T15:57:38+08:00</updated>
  <id>http://www.ifun.cc/</id>
  <author>
    <name><![CDATA[Haven]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java解析Html]]></title>
    <link href="http://www.ifun.cc/blog/2015/03/29/javajie-xi-html/"/>
    <updated>2015-03-29T13:20:36+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/03/29/javajie-xi-html</id>
    <content type="html"><![CDATA[<p>最近用到了Java解析Html的一个库Jsoup, 这儿是<a href="http://jsoup.org/">官网</a>, 在此分享给大家，有这方面需要的朋友可以试一试。</p>

<p>有三个类需要我们了解，分别是Document，Elements，Element</p>

<p>大至用法有两步<br></p>

<h1>第一步:加载html,，这儿提供两种方式，一种是从本地加载，一种是从网上直接加载。</h1>

<h2>从本地加载:</h2>

<p><code>
String html = "YOU HTML STRING";
Document doc = Jsoup.parse(html);
</code>
也可以直接从文件加载</p>

<p><code>
File input = new File("/tmp/input.html");
Document doc = Jsoup.parse(input, "UTF-8", "http://example.com/");
</code></p>

<h2>通过url从网络加载</h2>

<p><code>
Document doc = Jsoup.connect("http://en.wikipedia.org/").get();
String title = doc.title();
</code>
上面是通过http的get方法，下可以通过post来获取</p>

<p><code>
Document doc = Jsoup.connect("http://example.com")
  .data("query", "Java")
  .userAgent("Safari")
  .cookie("auth", "token")
  .timeout(3000)
  .post();
</code></p>

<h1>第二步:定位元素</h1>

<h2>通过定义的api定位无素</h2>

<p>定位body</p>

<p><code>
String html = "&lt;div&gt;&lt;p&gt;Lorem ipsum.&lt;/p&gt;";
Document doc = Jsoup.parseBodyFragment(html);
Element body = doc.body();
</code></p>

<p>定位标签</p>

<p><code>
Element content = doc.getElementById("content");
Elements links = content.getElementsByTag("a");
for (Element link : links) {
  String linkHref = link.attr("href");
  String linkText = link.text();
}
</code>
常用的API有</p>

<p>查找API：</p>

<p><code>
getElementById(String id)
getElementsByTag(String tag)
getElementsByClass(String className)
getElementsByAttribute(String key) (and related methods)
兄弟关系的:siblingElements(), firstElementSibling(), lastElementSibling(); nextElementSibling(), previousElementSibling()
父子关系的: parent(), children(), child(int index)
</code>
值操作API:</p>

<p><code>
attr(String key) to get and attr(String key, String value) to set attributes
attributes() to get all attributes
id(), className() and classNames()
text() to get and text(String value) to set the text content
html() to get and html(String value) to set the inner HTML content
outerHtml() to get the outer HTML value
data() to get data content (e.g. of script and style tags)
tag() and tagName()
</code></p>

<p>修改API</p>

<p><code>
append(String html), prepend(String html)
appendText(String text), prependText(String text)
appendElement(String tagName), prependElement(String tagName)
html(String value)
</code></p>

<h2>通过select语法定位元素</h2>

<p>这个不好用文字表达，直接看<a href="http://jsoup.org/cookbook/extracting-data/selector-syntax">官网</a>文档吧.</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java开发记录]]></title>
    <link href="http://www.ifun.cc/blog/2015/03/06/javakai-fa-ji-lu/"/>
    <updated>2015-03-06T15:46:32+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/03/06/javakai-fa-ji-lu</id>
    <content type="html"><![CDATA[<p>最近在写一个小东东，想一次开发同时运行到多个平台上，由于有UI，所以我选择了JSE + SWT. <br></p>

<p>开发功能还好，没有遇到什么问题，Eclipse用一下就熟悉了.<br></p>

<h3>打包</h3>

<p>开发完后要打包，就遇到问题了，我想打成jar包，结果Eclipse自带的export不强，所以只能google打答案。<br>
得到答案是需要一份清单列表。而还需要手功创建，看到后就醉了，不就打个包吗，弄得这么麻烦。没法只有硬上了，手动创建一个名为MANIFEST.MF的文件.<br>
下面是我的清单列表， Class-Path是工程依赖的jar包，然后这些jar包都放到该工程目录下的libs目录下。<br>
Main-Class是你的程序入口文件，即包括Main的文件。 注意Class-Path中每一行前后都有一个空格，最后一行不需要。</p>

<p><code>
Manifest-Version: 1.0
Class-Path: libs/HttpClient/commons-codec-1.6.jar
 libs/HttpClient/commons-logging-1.1.3.jar
 libs/HttpClient/fluent-hc-4.3.6.jar
 libs/HttpClient/httpclient-4.3.6.jar
 libs/HttpClient/httpclient-cache-4.3.6.jar
 libs/HttpClient/httpcore-4.3.3.jar
 libs/HttpClient/httpmime-4.3.6.jar
 libs/gson-2.3.1.jar
 libs/jsoup-1.8.1-sources.jar
 libs/jsoup-1.8.1.jar
 libs/quartz-2.2.1/lib/quartz-2.2.1.jar
 libs/quartz-2.2.1/lib/quartz-jobs-2.2.1.jar
 libs/quartz-2.2.1/lib/slf4j-log4j12-1.6.6.jar
 libs/quartz-2.2.1/lib/slf4j-api-1.6.6.jar
 libs/quartz-2.2.1/lib/log4j-1.2.16.jar
 libs/quartz-2.2.1/lib/c3p0-0.9.1.1.jar
 libs/sqlite-jdbc-3.8.7.jar
 libs/httpcomponents-asyncclient-4.0.2/lib/httpasyncclient-4.0.2.jar
 libs/httpcomponents-asyncclient-4.0.2/lib/httpcore-nio-4.3.2.jar
 libs/os/com.ibm.icu_52.1.0.v201404241930.jar
 libs/os/org.eclipse.core.commands_3.6.100.v20140528-1422.jar
 libs/os/org.eclipse.core.runtime_3.10.0.v20140318-2214.jar
 libs/os/org.eclipse.equinox.common_3.6.200.v20130402-1505.jar
 libs/os/org.eclipse.equinox.registry_3.5.400.v20140428-1507.jar
 libs/os/org.eclipse.jface_3.10.1.v20140813-1009.jar
 libs/os/org.eclipse.jface.text_3.9.1.v20140827-1810.jar
 libs/os/org.eclipse.osgi_3.10.1.v20140909-1633.jar
 libs/os/org.eclipse.swt.cocoa.macosx.x86_64_3.103.1.v20140903-1947.jar
 libs/os/org.eclipse.text_3.5.300.v20130515-1451.jar
 libs/os/org.eclipse.ui.forms_3.6.100.v20140422-1825.jar
 libs/os/org.eclipse.ui.workbench_3.106.1.v20140827-1737.jar
Main-Class: iBot.Main
</code></p>

<p>有了这个列表，这下我们来开始打包，直接用命令行吧，一下就打好，包教包会:</p>

<p><code>
jar -cvfm yourjarname.jar MANIFEST.MF -C bin .
</code>
就这么一行命令打包，是不是很easy呀。首先你要cd到你的工程目录，因为我们要用到下面的bin目录，命令中-C后面有bin看到没？</p>

<p>经过上面一行命令的工作，如果一切顺利，在你工程目录下就多了一个yourjarname.jar文件。</p>

<p>这下就可以运行了，我是在Mac系统下运行，双击jar文件却不能运行，然后试着用用命令运行，</p>

<p><code>
java -jar yourjarname.jar
</code>
结果报错了，说要运行在主线程，没事，我们求万能的google, 最后解决方法是加一个参数:XstartOnFirstThread</p>

<p><code>
java -XstartOnFirstThread -jar ibot.jar
</code>
jar 包成功运行。</p>

<h3>封装Mac下可运行的app</h3>

<p>参考<a href="https://www.eclipse.org/swt/macosx/">https://www.eclipse.org/swt/macosx/</a> <BR>
做了一点修改，将可运行脚本改为了</p>

<p>```</p>

<h1>!/bin/sh</h1>

<p>BASEDIR=<code>dirname $0</code>
exec java \</p>

<pre><code>    -XstartOnFirstThread \
    -jar $BASEDIR/ibot.jar
</code></pre>

<p>```</p>

<p>记录一下创建dmg的命令:</p>

<p><code>
hdiutil create -srcfolder SWTHello SWTHello.dmg
hdiutil internet-enable -yes SWTHello.dmg
</code></p>

<h3>加载资源</h3>

<p>程序是由代码加资源文件组成的，比如要读取icon,声间文件。由于我是新手，所以加载资源也把我难住了，幸好万能的Google我还能打开，窃喜！！！</p>

<p>将所有的资源放到src/res目录下，这样方便打包。因为放到src目录下，打包的时候会自动将res目录copy到bin目录下去。bin是编译后的生成文件目录，打包的时候-C后面的bin就是指这个目录。这下你明白没？<br></p>

<p>接着我们在程序中加载资源吧: <br>
<code>
String filePath = getClass().getResource("/res/" + "icon.png").getFile();
File icon = new File(filePath);
</code>
这样就可以了，不过如果打包成jar后，这种方式不能成功获取资源，我们得使用另一个方法，用Stream的方式来获取。</p>

<p><code>
InputStream is = this.getClass().getResourceAsStream("/res/" + "icon.png");
</code></p>

<p>SWT中加载图片，还可以用JFace中的类:</p>

<p><code>
ImageDescriptor.createFromFile(Main.class, "/res/login.png")；
</code>
返回的ImageDescriptor正是Action中要用到的。</p>

<h2>参考资料</h2>

<p><a href="http://www.eclipse.org/swt/">http://www.eclipse.org/swt/</a></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
</feed>
