<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Haven's Blog]]></title>
  <link href="http://www.ifun.cc/atom.xml" rel="self"/>
  <link href="http://www.ifun.cc/"/>
  <updated>2014-04-14T16:15:27+08:00</updated>
  <id>http://www.ifun.cc/</id>
  <author>
    <name><![CDATA[Haven]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[让Appstore开启Degub菜单]]></title>
    <link href="http://www.ifun.cc/blog/2014/04/14/rang-appstorekai-qi-degubcai-dan/"/>
    <updated>2014-04-14T12:42:37+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/04/14/rang-appstorekai-qi-degubcai-dan</id>
    <content type="html"><![CDATA[<p>有时候在Mac App Store下载或更新应用的，会出现一些错误，造成这原因可能是由于cookie造成的。所以我们可以重设appstore的cookie。方法如下：<br>
1.打开Terminal, 运行:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defaults write com.apple.appstore ShowDebugMenu -bool true</span></code></pre></td></tr></table></div></figure>


<p>2.重启Mac App Store， 大家就可以发现菜单栏多了一个Debug菜单。<br>
快选择清除cookie试试。</p>

<p><img src="http://iosman.qiniudn.com/2014-04-14PM.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[结队开发之多storyboard]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/23/jie-dui-kai-fa-zhi-duo-storyboard/"/>
    <updated>2014-02-23T10:38:15+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/23/jie-dui-kai-fa-zhi-duo-storyboard</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>Storyboard的出现，让开发变得像讲故事一样，UI间的关系流程也一目了然。它其实是xib的升级版本，将多个xib统一管理了。任何事都有双面性，Storyboard也有它的缺点。笔者就说说自己的经验，版本管理中，多人修改很容易严生冲突。storyboard中UIViewController太多，找到想要的比较困难（特别是在MBA上）。 这些缺点在结队开发中就会遇见。 如果我们用xib文件，这样将UI最小化分隔开，将后用code将这些小单元连接起来，就可以解决这个问题。如果只用xib就展现不出storyboard的故事情节能力。</p>

<!-- more -->


<p>本人提供两种解决方案：<br>
1.<a href="#md-1">Xib link Xib</a><br>
2.<a href="#md-2">Storyboard link Storyboard</a></p>

<p>其实它们之间可以两两组合，这样就可以延伸出另外两种方法:
3.Xib link Storyboard <br>
4.Storyboard link Xib <br></p>

<h3><a id="md-1">Xib link Xib</a></h3>

<p>这种方法其实我以<a href="http://www.ifun.cc/blog/2014/02/22/ioskai-fa-zhi-xibji-qiao-jie-shao/">上一篇</a>文章已经介绍过了，大家自行阅读，在些也不多述。</p>

<h3><a id="md-2">Storyboard link Storyboard</a></h3>

<p>这种方法与上面方法原理是一样的，利用加载storyboard时，实例化对应自定义UIViewController类，然后手动addSubview到对link view上，以达到链接的目录。 用言语表达是有点抽象，还是用代码表达吧，容易理解。<br></p>

<p>在这儿用到了Github上一个人写的link代码:<a href="https://github.com/rob-brown/RBStoryboardLink">RBStoryboardLink</a>。它的用法也在README中说得很清楚了。</p>

<p>大家将源码下载下来，里面有一个sample:LinkedTabs. 由于原作者用到了cocoapods,所以需要到源码LinkedTabs目录下， 运行一个命令行:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod update</span></code></pre></td></tr></table></div></figure>


<p>我还是简单说一下sample的结构。<br>
里面有三个storyboard,分别是MainStoryboard，FirstTabStoryboard， SecondTabStoryboard， 现在需要将MainStoryboard中的两个UIViewController分别与FirstTabStoryboard,SecondTabStoryboard建立连接，以达到程序运行后，这三个storyboard像是在一起的目的。<br></p>

<p>打开MainStoryboard，定位到Tab1的UIViewController<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edt58mgnxij20vp0g6mzp.jpg" alt="" /><br></p>

<p>注意图中两个箭头，上面一个一定要填这个自定义类RBStoryboardLink， 就是个类完成了连接的任务。<br>
下面一个箭头处，是传递的属性与对应的值，在实例化RBStoryboardLink的时候传送递给实例化对象。storyboardName这个属性表示要link到哪儿去，这儿我们要link到FirstTabStoryboard，所以值为FirstTabStoryboard。还有一个可选属性sceneIdentifier, 表示要link到Storyboard中的哪一个UIViewController. 如果不传这个属性，那就link到FirstTabStoryboard中的initial View Controller.<br></p>

<p>如果我们想link到FirstTabStoryboard中的第二个UIViewController那如何办呢，很简单:<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edt5kfj27gj20vp0haju2.jpg" alt="" /><br>
如上图，我们先找到这个被linke的View Controller，然后在Storyboard ID那输入该View Controller的标识，如在此输入:NavController.</p>

<p>接着在需要link的地方加入sceneIdentifier:NavController, 见下图箭头处。<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edt5nd36iwj20vl0fktb6.jpg" alt="" /><br></p>

<p>这样就link成功了。</p>

<p>方法3与方法4只是组合出来的方法，也不在此多述了。</p>

<hr />

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发之xib技巧介绍]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/22/ioskai-fa-zhi-xibji-qiao-jie-shao/"/>
    <updated>2014-02-22T16:16:29+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/22/ioskai-fa-zhi-xibji-qiao-jie-shao</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>iOS开发的这些年里，我遇到过这样的一群人，他们认为用代码写UI的人就要NB一点，用xib就是要低一个级别。更有一个高级工程师Level的朋友，聊天当中还特意强调自己全用代码写UI。对此我只能在心里暗笑两下。到底是用xib还是代码来创建UI,这个问题以前也有过很多争论，我只想说一点，各有各的优点。如果能够将两者融合贯通，那将是更有优势。笔者开发过程中，UI能用xib就尽量用xib（能用storyboard就用storyboard, 一个storyboard里最好别装太多的UIViewController，这在结队开发中将不利，我在下一篇教程中介绍如何使用多个storyboard来解决这个问题）.本文主要介绍使用xib的一些技术，即在xib中布局UI,然后xib与code相结合，快速UI开发介绍。本文主要讲解的也就是加载xib的技术。<br></p>

<!-- more -->


<p>还是老方法，用代码说话，首先创建一个Single Page工程，命名为:LoadNibViewDemo.<br></p>

<h3>1.直接加载xib中的UIView</h3>

<p>创建一个View1.xib, 随便设一个背景色，加一个标识UILabel, 这样好知道是这个view是哪一个view. 你可以在这个view上加作意的subview，我只是说明原理，所以这儿并没有加作何subview. 最终我的View1如下图：<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edsa871blkj20vk0ekdhe.jpg" alt="" /><br>
由于View1会放到其它View上作为subview，所以这儿size是Freeform, Status Bar是:None。<br><br></p>

<p>将下面代码放到viewDidLoad中:<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//1
</span><span class='line'>NSArray *views = [[NSBundle mainBundle] loadNibNamed:@"View1" owner:nil options:nil]; //&1
</span><span class='line'>UIView *v = [views lastObject];
</span><span class='line'>CGRect r = v.frame;
</span><span class='line'>r.origin.y += 80;
</span><span class='line'>v.frame = r;
</span><span class='line'>[self.view addSubview:v];</span></code></pre></td></tr></table></div></figure>


<p>&amp;1这行代码就是加载View1.xib， 然后将xib中的UIView实保存到views中， 由于xib中我们只拖入了一个view, 所以这儿lastObject就返回这个view的实例，这样便加载了xib中的UIView. 接着将这个UIView addSubview到其它view上，运行效果如图：<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edsai5knbvj208v0fsjre.jpg" alt="" /><br></p>

<h3>2.通过Owner建立变量关联<br></h3>

<p>首先我们为ViewController创建一个IBOutlet属性:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, weak) IBOutlet UIView *referencedView;</span></code></pre></td></tr></table></div></figure>


<p>接着同上面介绍的一样创建一个View2.xib, 如下图：<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1edsap4cbeoj20vp0ebwfj.jpg" alt="" /><br><br></p>

<p>File&rsquo;s Owner中，我们设为ViewController, 这样我们就可以与实例变量_referencedView建立关联了,如图<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edsaret2huj20kg0aogm7.jpg" alt="" /> <br></p>

<p>接着在viewDidLoad中，在刚才加入的代码下面添加如下代码：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 2
</span><span class='line'>[[NSBundle mainBundle] loadNibNamed:@"View2" owner:self options:nil];
</span><span class='line'>r = _referencedView.frame;
</span><span class='line'>r.origin.y = v.frame.size.height + v.frame.origin.y;
</span><span class='line'>_referencedView.frame = r;
</span><span class='line'>[self.view addSubview:_referencedView];</span></code></pre></td></tr></table></div></figure>


<p>与//1中的代码有点类似，只不过owner属性为self了。这样一来，loadNibNamed后，就会实例化与之关联的变量_referencedView, 运行程序你将会看到效果：<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edsay5nckmj208w0fst8r.jpg" alt="" /><br></p>

<h3>3.Class Owner建立变量关联<br></h3>

<p>其实这个原理与上面2说的一样的，只不过这儿我们特别定义一个class来作为xib的Owner， 要所有需要关系的view都可以声明在这个Owner中，这样方便代码管理与维护。<br>
这儿我们声明一个NSObject的子类FileOwner, 然后再在FileOnwer中声明IBOutLet的关联变量：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, weak) IBOutlet UIView *view;</span></code></pre></td></tr></table></div></figure>


<p>同理创建一个View3.xib, File&rsquo;s Owner设为FileOwner, 并建立view关联：<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edsb5soi16j20ql0c4t9r.jpg" alt="" /><br><br></p>

<p>接着在viewDidLoad结尾处添加以下代码:<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 3
</span><span class='line'>FileOwner *owner = [FileOwner new];
</span><span class='line'>[[NSBundle mainBundle] loadNibNamed:@"View3" owner:owner options:nil];
</span><span class='line'>r = owner.view.frame;
</span><span class='line'>r.origin.y = _referencedView.frame.origin.y + _referencedView.frame.size.height;
</span><span class='line'>owner.view.frame = r;
</span><span class='line'>[self.view addSubview:owner.view];</span></code></pre></td></tr></table></div></figure>


<p>运行效果：<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edsb8f38gxj208x0fsglp.jpg" alt="" /><br><br></p>

<h3>4.引入UIView Category<br></h3>

<p>为了代码简单，我们增加一个UIView Category方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+(id)loadFromNibNamed:(NSString*) nibName {
</span><span class='line'>    return [FileOwner viewFromNibNamed:nibName];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>其中FileOwner的class 方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+(id)viewFromNibNamed:(NSString*) nibName {
</span><span class='line'>    FileOwner *owner = [self new];
</span><span class='line'>    [[NSBundle mainBundle] loadNibNamed:nibName owner:owner options:nil];
</span><span class='line'>    return owner.view;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这样加载xib的代码就会变得更简单。<br>
同理，我们创建一个View4.xib, File&rsquo;s Owner设为FileOwner, 并建立view关联：<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edsbhtxokzj20vn0dut9n.jpg" alt="" /><br></p>

<p>接着在viewDidLoad尾添加代码:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 4
</span><span class='line'>UIView *v4 = [UIView loadFromNibNamed:@"View4"];
</span><span class='line'>r = v4.frame;
</span><span class='line'>r.origin.y = owner.view.frame.origin.y + owner.view.frame.size.height;
</span><span class='line'>v4.frame = r;
</span><span class='line'>[self.view addSubview:v4];</span></code></pre></td></tr></table></div></figure>


<p>运行效果:<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edsehvv6clj208w0frq2z.jpg" alt="" /> <br></p>

<h3>5.自定义UIView类<br></h3>

<p>在4Category的基础上，我们再引入自定义UIView类，并在xib中与之关联。首先我们创建一个UIView字类UIView5.<br>
接着，我们创建一个View5.xib, File&rsquo;s Owner设为FileOwner, 并建立view关联：<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edsen8i9nvj20vq0ed0u2.jpg" alt="" /><br></p>

<p>接着增加一个UIView的Category方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+(id)loadFromNib {
</span><span class='line'>    return [self loadFromNibNamed:NSStringFromClass(self)];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在viewDidLoad尾加入代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 5
</span><span class='line'>View5 *v5 = [View5 loadFromNib];
</span><span class='line'>r = v5.frame;
</span><span class='line'>r.origin.y = v4.frame.origin.y + v4.frame.size.height;
</span><span class='line'>v5.frame = r;
</span><span class='line'>[self.view addSubview:v5];</span></code></pre></td></tr></table></div></figure>


<p>动行效果：<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edserc400wj208x0fuglv.jpg" alt="" /><br></p>

<h3>6.设置Onwer为UIViewController</h3>

<p>首先，我们创建一个View6.xib, File&rsquo;s Owner设为UIViewController. 这样UIViewController的view属性关联我们xib中的UIView <br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edsezb1w85j20vv0dtgn1.jpg" alt="" /><br></p>

<p>接着在viewDidLoad中添加代码:<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 6
</span><span class='line'>UIView *v6 = [[UIViewController alloc] initWithNibName:@"View6" bundle:nil].view;
</span><span class='line'>r = v6.frame;
</span><span class='line'>r.origin.y = v5.frame.origin.y + v5.frame.size.height;
</span><span class='line'>v6.frame = r;
</span><span class='line'>[self.view addSubview:v6];</span></code></pre></td></tr></table></div></figure>


<p>动行效果:<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edsf1mhayzj208w0ft74f.jpg" alt="" /><br></p>

<p>说了这么多，是时候做一下总结了，其实其本是两个方法，一个是没有File&rsquo;s Onwer直接加载xib中的UIView，二是通过File&rsquo;s Onwer关联变量加载xib中的UIView。 然后就是一些Category提供简单接口而已。大家可以再细细品味一下上面所介绍的内容。<br></p>

<p>大家可以看我源码中UIView+Ext的Category方法中还提供了一个方法：+ (id)loadFromNibNoOwner;它应是方法5与方法1的组合，在此我就不细说了。 都是由上面两个基本方法演变出来的。<br></p>

<h3>7.xib link xib</h3>

<p>大家有没有想过在xib中link其它xib？ 很可惜苹果不支持这个功能。但是我们可以通过一点技巧实现这个功能。下而我就简单介绍一下<br>
先说一下原理，加载xib的UIView，如果这个UIView是自定义的UIView（即xib中关联了UIView的子类），如下图：<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1edsfenvw77j20vo0g40ux.jpg" alt="" /><br></p>

<p>那么在加载显示这个view的时候会触发一些方法，如:<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (id)initWithCoder:(NSCoder *)aDecoder
</span><span class='line'>- (id)awakeAfterUsingCoder:(NSCoder*)aDecoder</span></code></pre></td></tr></table></div></figure>


<p>我们就在这儿作些文章，在这儿用前面介绍的方法加载想要的的xib中UI实例替换掉原来返回的实例。</p>

<p>首先我写了一个UIView的了类SubView，代码很容易理解:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "SubView.h"
</span><span class='line'>#include "UIView+Ext.h"
</span><span class='line'>
</span><span class='line'>@implementation SubView
</span><span class='line'>
</span><span class='line'>- (id)initWithFrame:(CGRect)frame
</span><span class='line'>{
</span><span class='line'>    self = [super initWithFrame:frame];
</span><span class='line'>    if (self) {
</span><span class='line'>        // Initialization code
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>- (id) awakeAfterUsingCoder:(NSCoder*)aDecoder {
</span><span class='line'>    BOOL theThingThatGotLoadedWasJustAPlaceholder = ([[self subviews] count] == 0);
</span><span class='line'>    if (theThingThatGotLoadedWasJustAPlaceholder) {
</span><span class='line'>        SubView* theRealThing = [[self class] loadFromNibNoOwner];
</span><span class='line'>      
</span><span class='line'>        // pass properties through
</span><span class='line'>        [self copyUIPropertiesTo:theRealThing];
</span><span class='line'>        
</span><span class='line'>        //auto layout
</span><span class='line'>        self.translatesAutoresizingMaskIntoConstraints = NO;
</span><span class='line'>        theRealThing.translatesAutoresizingMaskIntoConstraints = NO;
</span><span class='line'>      
</span><span class='line'>        return theRealThing;
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>-(void) copyUIPropertiesTo:(UIView *)view
</span><span class='line'>{
</span><span class='line'>    // reflection did not work to get those lists, so I hardcoded them
</span><span class='line'>    // any suggestions are welcome here
</span><span class='line'>    
</span><span class='line'>    NSArray *properties =
</span><span class='line'>    [NSArray arrayWithObjects: @"frame",@"bounds", @"center", @"transform", @"contentScaleFactor", @"multipleTouchEnabled", @"exclusiveTouch", @"autoresizesSubviews", @"autoresizingMask", @"clipsToBounds", @"backgroundColor", @"alpha", @"opaque", @"clearsContextBeforeDrawing", @"hidden", @"contentMode", @"contentStretch", nil];
</span><span class='line'>    
</span><span class='line'>    // some getters have 'is' prefix
</span><span class='line'>    NSArray *getters =
</span><span class='line'>    [NSArray arrayWithObjects: @"frame", @"bounds", @"center", @"transform", @"contentScaleFactor", @"isMultipleTouchEnabled", @"isExclusiveTouch", @"autoresizesSubviews", @"autoresizingMask", @"clipsToBounds", @"backgroundColor", @"alpha", @"isOpaque", @"clearsContextBeforeDrawing", @"isHidden", @"contentMode", @"contentStretch", nil];
</span><span class='line'>    
</span><span class='line'>    for (int i=0; i&lt;[properties count]; i++)
</span><span class='line'>    {
</span><span class='line'>        NSString * propertyName = [properties objectAtIndex:i];
</span><span class='line'>        NSString * getter = [getters objectAtIndex:i];
</span><span class='line'>        
</span><span class='line'>        SEL getPropertySelector = NSSelectorFromString(getter);
</span><span class='line'>        
</span><span class='line'>        NSString *setterSelectorName =
</span><span class='line'>        [propertyName stringByReplacingCharactersInRange:NSMakeRange(0,1) withString:[[propertyName substringToIndex:1] capitalizedString]];
</span><span class='line'>        
</span><span class='line'>        setterSelectorName = [NSString stringWithFormat:@"set%@:", setterSelectorName];
</span><span class='line'>        
</span><span class='line'>        SEL setPropertySelector = NSSelectorFromString(setterSelectorName);
</span><span class='line'>        
</span><span class='line'>        if ([self respondsToSelector:getPropertySelector] && [view respondsToSelector:setPropertySelector])
</span><span class='line'>        {
</span><span class='line'>            NSObject * propertyValue = [self valueForKey:propertyName];
</span><span class='line'>            
</span><span class='line'>            [view setValue:propertyValue forKey:propertyName];
</span><span class='line'>        }
</span><span class='line'>    }    
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<p>创建一个EmbeddedView.xib，我们想在其它xib中直接link这个EmbeddedView.xib, 还需要创建一个SubView的了类EmbeddedView.<br>
我的xib信息是这样的:<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1edsfrbnwxnj212u0ge771.jpg" alt="" /><br></p>

<p>一切就绪后，运行:<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edsfsk2afbj208v0ft0ss.jpg" alt="" /><br></p>

<p>xib可以快速布署UI, 可以提高开发速度哦。
随便在此预告一下下一篇教程的内容:多Storyboard协作开发。</p>

<p>终于这个教程写完了，完整的Demo可以在此下载:<a href="https://github.com/ondev/LoadNibViewDemo">LoadNibViewDemo</a>.
写个教程我容易吗？ 还希望大家多多支持，你们的支持将是我源源不断的动力。</p>

<hr />

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS App重新签名方法介绍]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/22/ios-appzhong-xin-qian-ming-fang-fa-jie-shao/"/>
    <updated>2014-02-22T14:38:26+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/22/ios-appzhong-xin-qian-ming-fang-fa-jie-shao</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>今天要给大家介绍两种app重新签名的方法, 做一下记录方便需要的朋友。<br>
1. <a href="#md-1">通过Xcode重答名</a> <br>
2. <a href="#md-2">直接修改已签名的iPA文件</a></p>

<!-- more -->


<h3>1.<a name="md-1" id="md-1">通过Xcode重答名</a></h3>

<p>用Xcode打过包的朋友都知道，只需要在Xcode中点两下，就可以签名了，这种方法比较简单直观。今天要介绍的是打包后，不同Mac上重新签名的方法，即传播Xcode Archive.<br></p>

<p>在Xcode中archive成功后，点击Distribute后,我们选择第三个选项：Export as Xcode Archive:<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1eds5kjya4pj20o30h4767.jpg" alt="" /><br></p>

<p>然后我们就会得到一个后缀为xcarchive的文件，用于Mac间传递。现在我们就可以将这个.xcarchive文件发给其它同事，同事收到后双击，就可以在Xcode中打开，接着它就可以Submit to the iOS App Store或Save for Enterprise or Ad Hoc Deployment. 这样就可以达到重签名的目的 <br></p>

<h3>2.<a name="md-2" id="md-2">直接修改已签名的iPA文件</a></h3>

<p>其实iPA文件就是zip文件，只是后缀不同而已。要重签名，我们需要准备证书与provision profile， 证书直接在Keychian里管理，provision profile与证书是对应关系。 真机调试或提交过App到App Store的朋友都应不会陌生。<br></p>

<p>下面直接说步骤：<br>
a.解压iPA文件<br>
b.删掉旧的签名文件<br>
c.拷贝新的provision profile替换旧的embedded.mobileprovision<br>
d.用codesign命令重签名<br>
f.重新zip为iPA文件<br></p>

<p>下面有一个脚本，它完成了上面5步骤：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>if ! ([ -f "$1" ]); then
</span><span class='line'>echo \"${1}\"文件不存在
</span><span class='line'>exit
</span><span class='line'>fi
</span><span class='line'>ipaName=${1%.ipa}
</span><span class='line'>if [ "$ipaName" = "$1" ]; then
</span><span class='line'>echo \"${1}\"不是ipa文件
</span><span class='line'>exit
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>## step 1, unzip ipa file
</span><span class='line'>unzip ${ipaName}.ipa
</span><span class='line'>
</span><span class='line'>## step 2, remove old codesign
</span><span class='line'>rm -rf Payload/*.app/_CodeSignature/
</span><span class='line'>
</span><span class='line'>## step 3, copy new provision profile
</span><span class='line'>cp 123.mobileprovision Payload/*.app/embedded.mobileprovision
</span><span class='line'>
</span><span class='line'>## step 4, codesign with new certificate and provision
</span><span class='line'>(/usr/bin/codesign -f -s "iPhone Developer: XXXXX (XXX)" --resource-rules Payload/*.app/ResourceRules.plist Payload/*.app/) || {
</span><span class='line'>## if code sign error, will to here
</span><span class='line'>echo failed
</span><span class='line'>rm -rf Payload/
</span><span class='line'>exit
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>## step 5, zip it
</span><span class='line'>zip -r ${ipaName}abc.ipa Payload/
</span><span class='line'>rm -rf Payload/
</span></code></pre></td></tr></table></div></figure>


<p>需要注意脚本中有两处需要你们手动修改，第一处是123.mobileprovision，这个文件需要与脚本放同一目录，第二处是XXXXX (XXX), 这儿XXX改为你keychian里有的证书，只需要改XXX, 括号保留。<br></p>

<h3>用法</h3>

<p>保存并修改上面的脚本为resign.sh，再将需要重签名的xxx.ipa与123.mobileprovision文件置于同一目录。然后运行命令：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod 777 resign.sh
</span><span class='line'>./resign.sh xxx.ipa</span></code></pre></td></tr></table></div></figure>


<p>成功后，在目录里会多一个重签名的abc.ipa<br></p>

<hr />

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[动态计算UITableViewCell高度详解]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/21/dong-tai-ji-suan-uitableviewcellgao-du-xiang-jie/"/>
    <updated>2014-02-21T21:49:56+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/21/dong-tai-ji-suan-uitableviewcellgao-du-xiang-jie</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>不知道大家有没有发现，在iOS APP开发过程中，UITableView是我们显示内容常见的控件，本人觉得它是UIKit中最复杂的一个控件。今天要向大家介绍的就是如何动态计算UITableViewCell高度的一经验与技巧，在此做一些总结方便朋友们查阅。<br></p>

<blockquote><p>同时也欢迎广大iOS技术人员加入技术开发群：&lt;疯狂IT人>93916004，众人拾柴火焰高，大家一起讨论研究。<br></p></blockquote>

<p>为了不让讲解空洞抽象，我还是用代码实例的方式进行讲解，这样更容易接收与学习。<br>
本文将介绍四种情况下UITableViewCell的计算方式，分别是：<br></p>

<ol>
<li><a href="#md-1">Auto Layout with UILabel in UITableViewCell</a></li>
<li><a href="#md-2">Auto Layout with UITextView in UITableViewCell</a></li>
<li><a href="#md-3">Manual Layout with UILabel in UITableViewCell</a></li>
<li><a href="#md-4">Manual Layout with UITextView in UITableViewCell</a></li>
<li><a href="#md-5">随UITextView高度动态改变Cell高度</a></li>
</ol>


<blockquote><p>由于只是一个demo，所以命名这些都是随意从简。</p></blockquote>

<!-- more -->


<p>首先创建一个Single Page的工程，我命名为CellHeightDemo</p>

<h3><a name="md-1" id="md-1">1. Auto Layout with UILabel in UITableViewCell</a></h3>

<p>创建一个空的xib,命名为C1.xib, 然后拖入一个UITableViewCell控件。接着创建一个UITableViewCell的子类，命名为C1类。然后在C1.xib中，将与C1类进行关联。别给我说你不会关联，如果不会那看下图你就明白了。<sup>V</sup>^<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edryoxqtp4j207806v0sx.jpg" alt="" /><br>
只需要在Class那里写入关联的类名C1即可。<br><br></p>

<p>还有由于UITableViewCell需要重用功能，所以我们还需要设置一个重用标识<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edrysb61mgj207906vdg8.jpg" alt="" /><br>
在Identifier那里写入重用标识C1,当然你也可以用任意字符。不过后面代码里需要这个字符。<br><br></p>

<p>接着我们来布局。用到了auto layout, 在此我不想介绍auto layout, 以后有时间再专门介绍，下图就是我布局<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edrywtqnijj20vk0dv416.jpg" alt="" /><br>
这儿有两点需要说明：1. UILabel的属性Lines这儿设为了0表示显示多行。2. Auto Layout一定要建立完完整。<br><br></p>

<p>接着我们在UITableView中来使用我们自定义的UITableViewCell C1.<br>
首先我们创建一个UITableViewController的子类T1ViewController, 接着在Main.storyboard中拖入一个UITableViewController，并关联T1ViewController.<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edrzk4ttqrj20kj0i7dhk.jpg" alt="" /><br><br></p>

<p>一切都准备好了，那我们现在来写点代码，给UITableView加点料。<br>
我们想要我们的UITableView使用C1.xib中自定义的Cell,那么我们需要向UITableView进行注册。<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UINib *cellNib = [UINib nibWithNibName:@"C1" bundle:nil];
</span><span class='line'>[self.tableView registerNib:cellNib forCellReuseIdentifier:@"C1"];</span></code></pre></td></tr></table></div></figure>


<p>这样就进行注册了，接着我们还需要每行显示的数据，为了简单一点，我就声明了一个NSArray变量来存放数据。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.tableData = @[@"1\n2\n3\n4\n5\n6", @"123456789012345678901234567890", @"1\n2", @"1\n2\n3", @"1"];</span></code></pre></td></tr></table></div></figure>


<p>现在实现UITableViewDataSource的protocol:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
</span><span class='line'>{
</span><span class='line'>    // Return the number of rows in the section.
</span><span class='line'>    return self.tableData.count;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    C1 *cell = [self.tableView dequeueReusableCellWithIdentifier:@"C1"];
</span><span class='line'>    cell.t.text = [self.tableData objectAtIndex:indexPath.row];
</span><span class='line'>    return cell;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>从self.tableData中的数据我们可以看到，每一个Cell显示的数据高度是不一样的，那么我们需要动态计算Cell的高度。由于是auto layout，所以我们需要用到一个新的API systemLayoutSizeFittingSize:来计算UITableViewCell所占空间高度。Cell的高度是在- (CGFloat)tableView:(UITableView <em>)tableView heightForRowAtIndexPath:(NSIndexPath </em>)indexPath这个UITableViewDelegate的方法里面传给UITableView的。<br></p>

<blockquote><p>这里有一个需要特别注意的问题，也是效率问题。UITableView是一次性计算完所有Cell的高度，如果有1W个Cell，那么- (CGFloat)tableView:(UITableView <em>)tableView heightForRowAtIndexPath:(NSIndexPath </em>)indexPath就会触发1W次，然后才显示内容。不过在iOS7以后，提供了一个新方法可以避免这1W次调用，它就是- (CGFloat)tableView:(UITableView <em>)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath </em>)indexPath。要求返回一个Cell的估计值，实现了这个方法，那只有显示的Cell才会触发计算高度的protocol. 由于systemLayoutSizeFittingSize需要cell的一个实例才能计算，所以这儿用一个成员变量存一个Cell的实列，这样就不需要每次计算Cell高度的时候去动态生成一个Cell实例，这样即方便也高效也少用内存，可谓一举三得。</p></blockquote>

<p>我们声明一个存计算Cell高度的实例变量：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, strong) UITableViewCell *prototypeCell;</span></code></pre></td></tr></table></div></figure>


<p>然后初始化它：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.prototypeCell  = [self.tableView dequeueReusableCellWithIdentifier:@"C1"];</span></code></pre></td></tr></table></div></figure>


<p>下面是计算Cell高度的实现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
</span><span class='line'>    C1 *cell = (C1 *)self.prototypeCell;
</span><span class='line'>    cell.t.text = [self.tableData objectAtIndex:indexPath.row];
</span><span class='line'>    CGSize size = [cell.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize];
</span><span class='line'>    NSLog(@"h=%f", size.height + 1);
</span><span class='line'>    return 1  + size.height;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>看了代码，可能你有点疑问，为何这儿要加1呢？笔者告诉你，如果不加1，结果就是错误的，Cell中UILabel将显示不正确。原因就是因为这行代码CGSize size = [cell.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize];由于是在cell.contentView上调用这个方法，那么返回的值将是contentView的高度，UITableViewCell的高度要比它的contentView要高1,也就是它的分隔线的高度。如果你不相信，那请看C1.xib的属性，比较下面两张图。<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1eds2g75es4j20vi0bd3zx.jpg" alt="" />
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1eds2gqoui2j20vl0eegni.jpg" alt="" />
发现没Cell的高度是127, 面contentView的高度是126, 这下明白了吧。</p>

<p>为了让读者看清楚，我将Cell中UILabel的背景色充为了light gray.下面是运行效果：<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1eds2k4ighsj208y0ejdgc.jpg" alt="" /></p>

<h3><a name="md-2" id="md-2">2. Auto Layout with UITextView in UITableViewCell</a></h3>

<p>本小段教程将介绍UITextView在cell中计算高度需要注意的地方。同样参考上面我们创建一个C2.xib, UITableViewCell的子类C2,并关联C2.xib与C2类。并在C2.xib中对其布局，同样使用了auto layout. 布局如下图：<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1eds2o28t18j20vp0ej41f.jpg" alt="" /></p>

<p>创始UITableViewController的了类T2ViewController，在Main.storyboard中拖入UITableViewController,并关联他们。接着代码中注册C2.xib到UITableView.</p>

<p>下面计是计算高度的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
</span><span class='line'>    C2 *cell = (C2 *)self.prototypeCell;
</span><span class='line'>    cell.t.text = [self.tableData objectAtIndex:indexPath.row];
</span><span class='line'>    CGSize size = [cell.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize];
</span><span class='line'>    CGSize textViewSize = [cell.t sizeThatFits:CGSizeMake(cell.t.frame.size.width, FLT_MAX)];
</span><span class='line'>    CGFloat h = size.height + textViewSize.height;
</span><span class='line'>    h = h &gt; 89 ? h : 89;  //89是图片显示的最低高度， 见xib
</span><span class='line'>    NSLog(@"h=%f", h);
</span><span class='line'>    return 1 + h;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在这儿我们是通过sizeThatFits:计算的UITextView的高度(这是计算UITextView内容全部显示时的方法，在第四小段中我们还会用到它)，然后加上systemLayoutSizeFittingSize:返回的高度。为什么要这样呢？ 因为UITextView内容的高度不会影响systemLayoutSizeFittingSize计算。这句话什么意思呢？我真不知道如何用言语表达了。还是先上一张图吧：<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1eds2zaziwfj20bf05udg4.jpg" alt="" /><br>
此图中距顶的约束是10, 距底的约束8, 距左边约束是87,距右边的约束是13, 那么systemLayoutSizeFittingSize:返回的CGSize为height等于19, size等于100. 它UITextView的frame是不影响systemLayoutSizeFittingSize:的计算。不知道这样说大家明白没。<br>
所以，我们需要加上textViewSize.height. <br></p>

<p>下面是运行效果：<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1eds36rqilej208w0cpt94.jpg" alt="" /></p>

<h3><a name="md-3" id="md-3">3. Manual Layout with UILabel in UITableViewCell</a></h3>

<p>本小段教程将介绍UILabel在Manual layout cell中计算高度， 原理是根据字体与字符串长度来计算长度与宽度。
按照前面介绍的，我们需要创建C3.xib, C3类, T3ViewController类,Main.storyboard中拖入UITableViewController，并分别建立关联。 为了简单，C3.xib中我就不加padding之类的了，如图<br></p>

<blockquote><p>记得关闭C3.xib的auto layout</p></blockquote>

<p><img src="http://ww1.sinaimg.cn/large/6bf526ffgw1eds3ek4ejjj20vq0dr0ue.jpg" alt="" /><br></p>

<p>直接上代码了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    C3 *cell = [self.tableView dequeueReusableCellWithIdentifier:@"C3"];
</span><span class='line'>    cell.t.text = [self.tableData objectAtIndex:indexPath.row];
</span><span class='line'>    [cell.t sizeToFit];
</span><span class='line'>    return cell;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
</span><span class='line'>    C3 *cell = (C3 *)self.prototypeCell;
</span><span class='line'>    NSString *str = [self.tableData objectAtIndex:indexPath.row];
</span><span class='line'>    cell.t.text = str;
</span><span class='line'>    CGSize s = [str calculateSize:CGSizeMake(cell.t.frame.size.width, FLT_MAX) font:cell.t.font];
</span><span class='line'>    CGFloat defaultHeight = cell.contentView.frame.size.height;
</span><span class='line'>    CGFloat height = s.height &gt; defaultHeight ? s.height : defaultHeight;
</span><span class='line'>    NSLog(@"h=%f", height);
</span><span class='line'>    return 1  + height;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这儿用到了一个NSString的Cagetory方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (CGSize)calculateSize:(CGSize)size font:(UIFont *)font {
</span><span class='line'>    CGSize expectedLabelSize = CGSizeZero;
</span><span class='line'>    
</span><span class='line'>    if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7) {
</span><span class='line'>        NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];
</span><span class='line'>        paragraphStyle.lineBreakMode = NSLineBreakByWordWrapping;
</span><span class='line'>        NSDictionary *attributes = @{NSFontAttributeName:font, NSParagraphStyleAttributeName:paragraphStyle.copy};
</span><span class='line'>        
</span><span class='line'>        expectedLabelSize = [self boundingRectWithSize:size options:NSStringDrawingUsesLineFragmentOrigin attributes:attributes context:nil].size;
</span><span class='line'>    }
</span><span class='line'>    else {
</span><span class='line'>        expectedLabelSize = [self sizeWithFont:font
</span><span class='line'>                                       constrainedToSize:size
</span><span class='line'>                                           lineBreakMode:NSLineBreakByWordWrapping];
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    return CGSizeMake(ceil(expectedLabelSize.width), ceil(expectedLabelSize.height));
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>原理上面我已说了，这儿没有什么好说明的，代码一目了然。</p>

<p>运行效果如图：<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1eds3jmducyj208u0ekjrq.jpg" alt="" /></p>

<h3><a name="md-4" id="md-4">4. Manual Layout with UITextView in UITableViewCell</a></h3>

<p>本小段教程将介绍UITextView在Manual layout cell中计算高度， 原理是与第二小节里的相同，用sizeThatFits:的方法计算UITextView的长度与高度。然后加上padding就是Cell的高度。
按照前面介绍的，我们需要创建C4.xib, C4类, T4ViewController类,Main.storyboard中拖入UITableViewController，并分别建立关联。 为了简单，C4.xib中我就不加padding之类的了，如图<br></p>

<blockquote><p>计得关闭C4.xib的auto layout</p></blockquote>

<p><img src="http://ww3.sinaimg.cn/large/6bf526ffgw1eds3nkgxyyj20vn0g6dhh.jpg" alt="" /> <br></p>

<p>也直接上代码了，直观明了：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    C4 *cell = [self.tableView dequeueReusableCellWithIdentifier:@"C4"];
</span><span class='line'>    cell.t.text = [self.tableData objectAtIndex:indexPath.row];
</span><span class='line'>    [cell.t sizeToFit];
</span><span class='line'>    return cell;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
</span><span class='line'>    C4 *cell = (C4 *)self.prototypeCell;
</span><span class='line'>    NSString *str = [self.tableData objectAtIndex:indexPath.row];
</span><span class='line'>    cell.t.text = str;
</span><span class='line'>    CGSize s =  [cell.t sizeThatFits:CGSizeMake(cell.t.frame.size.width, FLT_MAX)];
</span><span class='line'>    CGFloat defaultHeight = cell.contentView.frame.size.height;
</span><span class='line'>    CGFloat height = s.height &gt; defaultHeight ? s.height : defaultHeight;
</span><span class='line'>    return 1  + height;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>运行效果：<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1eds3q86ryyj208y0ei0t5.jpg" alt="" /> <br></p>

<h3><a name="md-5" id="md-5">5.随UITextView高度动态改变Cell高度</a></h3>

<p>本小节要介绍的一个功能是，UITextView中UITableViewCell中，当输入UITextView中的字变多/变少时，高度变化，Cell高度与随之变化的功能。<br>
按照前面介绍的，我们需要创建C5.xib, C5类, T5ViewController类,Main.storyboard中拖入UITableViewController，并分别建立关联。 为了简单，C5.xib中我就不加padding之类的了，如图<br></p>

<blockquote><p>记得开启C5.xib的auto layout</p></blockquote>

<p><img src="http://ww3.sinaimg.cn/large/6bf526ffgw1eds3y3bt19j20vn0fq766.jpg" alt="" /> <br></p>

<p>先看代码：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    C5 *cell = [self.tableView dequeueReusableCellWithIdentifier:@"C5"];
</span><span class='line'>    cell.t.text = @"123";
</span><span class='line'>    cell.t.delegate = self;
</span><span class='line'>    return cell;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#pragma mark - UITableViewDelegate
</span><span class='line'>- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
</span><span class='line'>    C5 *cell = (C5 *)self.prototypeCell;
</span><span class='line'>    cell.t.text = self.updatedStr;
</span><span class='line'>    CGSize s =  [cell.t sizeThatFits:CGSizeMake(cell.t.frame.size.width, FLT_MAX)];
</span><span class='line'>    CGFloat defaultHeight = cell.contentView.frame.size.height;
</span><span class='line'>    CGFloat height = s.height &gt; defaultHeight ? s.height : defaultHeight;
</span><span class='line'>    return 1  + height;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#pragma mark - UITextViewDelegate
</span><span class='line'>- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text {
</span><span class='line'>    if ([text isEqualToString:@"\n"]) {
</span><span class='line'>        NSLog(@"h=%f", textView.contentSize.height);
</span><span class='line'>    }
</span><span class='line'>    return YES;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)textViewDidChange:(UITextView *)textView {
</span><span class='line'>    self.updatedStr = textView.text;
</span><span class='line'>    [self.tableView beginUpdates];
</span><span class='line'>    [self.tableView endUpdates];
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>原理就是UITextView内容改变的时候，计算自身高度，然后通知UITableView更新，这样就会触发UITableViewCell高度重新计算，以达到目的。 <br></p>

<hr />

<p>本文只是简单的介绍了一些原理与技巧，细节之处还请参看<a href="https://github.com/ondev/CellHeightDemo">源码</a> <br></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>参考：<br>
<a href="http://www.howlin-interactive.com/2013/01/creating-a-self-sizing-uitextview-within-a-uitableviewcell-in-ios-6/">http://www.howlin-interactive.com/2013/01/creating-a-self-sizing-uitextview-within-a-uitableviewcell-in-ios-6/</a>
<a href="http://johnszumski.com/blog/auto-layout-for-table-view-cells-with-dynamic-heights">http://johnszumski.com/blog/auto-layout-for-table-view-cells-with-dynamic-heights</a>
<a href="http://technet.weblineindia.com/mobile/add-auto-layout-support-for-uiscrollview-with-example-in-ios-app-development/">http://technet.weblineindia.com/mobile/add-auto-layout-support-for-uiscrollview-with-example-in-ios-app-development/</a>
<a href="http://useyourloaf.com/blog/2014/02/14/table-view-cells-with-varying-row-heights.html">http://useyourloaf.com/blog/2014/02/14/table-view-cells-with-varying-row-heights.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7计算字符串所占空间大小]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/17/ios7ji-suan-zi-fu-chuan-suo-zhan-kong-jian-da-xiao/"/>
    <updated>2014-02-17T21:42:20+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/17/ios7ji-suan-zi-fu-chuan-suo-zhan-kong-jian-da-xiao</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>iOS7以前计算NSString所占size的API是NSString的成员方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (CGSize)sizeWithFont:(UIFont *)font constrainedToSize:(CGSize)size lineBreakMode:(NSLineBreakMode)lineBreakMode</span></code></pre></td></tr></table></div></figure>


<p>现在iOS7中如果用这个方法计算，计算出来的值要比实际值小，所以可能出现显示不完全的效果。这是因为在iOS7中，上面这个方法已被新的API替代了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (CGRect)boundingRectWithSize:(CGSize)size options:(NSStringDrawingOptions)options attributes:(NSDictionary *)attributes context:(NSStringDrawingContext *)context</span></code></pre></td></tr></table></div></figure>


<p>下面的代码是一个示例，大家可以做为参考：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CGSize expectedLabelSize = CGSizeZero;
</span><span class='line'>    
</span><span class='line'>    if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7) {
</span><span class='line'>        NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];
</span><span class='line'>        paragraphStyle.lineBreakMode = NSLineBreakByWordWrapping;
</span><span class='line'>        NSDictionary *attributes = @{NSFontAttributeName:sideLabel.font, NSParagraphStyleAttributeName:paragraphStyle.copy};
</span><span class='line'>        
</span><span class='line'>        expectedLabelSize = [sideLabel.text boundingRectWithSize:CGSizeMake(260, 999) options:NSStringDrawingUsesLineFragmentOrigin attributes:attributes context:nil].size;
</span><span class='line'>    }
</span><span class='line'>    else {
</span><span class='line'>        expectedLabelSize = [sideLabel.text sizeWithFont:sideLabel.font
</span><span class='line'>                                       constrainedToSize:CGSizeMake(260, 999)
</span><span class='line'>                                           lineBreakMode:sideLabel.lineBreakMode];
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>这样就正确了。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FFmpeg for iOS7]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/12/ffmpeg-for-iOS7/"/>
    <updated>2014-02-12T11:24:19+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/12/ffmpeg-for-iOS7</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>最近花了点时间来学习ffmpeg for iOS.
首先是编译，在<a href="https://github.com/kewlbear/FFmpeg-iOS-build-script">github</a>上已有人写了编译脚本，我试了，能成功编译。</p>

<p>接着是使用ffmpeg, 在<a href="https://github.com/kolyvan/kxmovie">github</a>上找到一个工程，不过没有更新了（需要ruby环境），它的rake在xcode5环境下是编译不过的。不过我已修改了它的编译脚本，并支持xcode5+iOS7，rake可以直接使用, 大家可以在我的<a href="https://github.com/ondev/kxmovie">github</a>上下载， 我已向原作者提交了pull request。库没有加x86_64，需要的参考arm64自己加吧，这样也明白脚本编译的原理。 <br>
这个工程比较不错用opengles+coreaudio的方式播放视频，值得大家研究研究。</p>

<p>ffmpeg编译通过了，接下来就是ffmpeg的世界。</p>

<p>大家有问题可以给我留言交流也可以加我的qq群交流(疯狂IT人):93916004</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下配置Mantis]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/11/mac-xia-pei-zi-mantis/"/>
    <updated>2014-02-11T11:24:19+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/11/mac-xia-pei-zi-mantis</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>安装我就不介绍了，与传统的php应用安装一样，放到对应的site目录下，然后在浏览器方问进行安装。
安装成功后会有红色的warning,</p>

<h3>去掉Warning</h3>

<p>然后修改phi.ini</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo vim /etc/php.ini</span></code></pre></td></tr></table></div></figure>


<p>中的值</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>date.timezone = Asia/Shanghai</span></code></pre></td></tr></table></div></figure>


<p>然后重启apache</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apachectl restart</span></code></pre></td></tr></table></div></figure>


<h3>中文支持</h3>

<p>修改config_defaults_inc.php</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$g_default_language      = 'chinese_simplified';</span></code></pre></td></tr></table></div></figure>


<p>如果想方便，你可以下载一键安装包
<a href="https://bitnami.com/stack/mantis/installer">https://bitnami.com/stack/mantis/installer</a></p>

<p>与svn的整合，我没有配置成功，还是介绍一下我所做的：
用到了mantis的<a href="https://github.com/mantisbt-plugins/source-integration">插件</a>
Mac自带的svn server，见参考。</p>

<p>有成功配置的朋友，希望能分享一下。<br></p>

<p>参考：
<a href="http://xiayong.blog.51cto.com/6292420/1088790">Mac下配置svn server</a>
<a href="https://github.com/mantisbt-plugins/source-integration">VCS plugs</a></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcconfig文件的用法]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/09/xcconfigwen-jian-de-yong-fa/"/>
    <updated>2014-02-09T11:24:19+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/09/xcconfigwen-jian-de-yong-fa</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>xcconfig文件正如其名字一样，就是xcode里的config文件。 我们在开发过程中，需要配置一些参数，这些都可以在xcode工程的setting对项目进行配置，xcconfig就是将这些配置项以文件的形式独立出来，方便共享与配置。比如两个项目用到相同的配置，那么只需要在xcode中选择对应的xcconfig文件即可，方便与灵活共享，所以今天需要向大家简单介绍一下。</p>

<p><img src="http://ww4.sinaimg.cn/large/6bf526ffgw1ed8jeos42pj20vg0brjts.jpg" alt="" /><br>
图所示的是我创建的一个工程，我们看iOS Deployment Target这一行下面的Debug与Release， 后面是空白的，即没有设置是哪一个iOS version.<br>
当然我们可以在xcode中进行设置，在这儿我要介绍通过xcconfig的方法设置。</p>

<p>首先我们创建一个Debug.xcconfig文件，名字随便起，只要你自己能区分就行了。方法与创建一个新文件类似<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1ed8jj9yo2sj20nw0f0mz7.jpg" alt="" /></p>

<p>接下来我们对Debug.xcconfig文件进行配置，如何进行配置呢，有个简单的方法，就是在xcode中将要配置的文件copy过来。
首先在xcode中选中要进行配置的一行，如图<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1ed8jntemnwj20tf03pwf3.jpg" alt="" />
然后command+c进行复制，接着到Debug.xcconfig中command+v粘贴。
粘贴的内容类似：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//:configuration = Debug
</span><span class='line'>IPHONEOS_DEPLOYMENT_TARGET = 6.0
</span><span class='line'>
</span><span class='line'>//:completeSettings = none</span></code></pre></td></tr></table></div></figure>


<p>在这儿我们想配置我们的项目支持iOS6的系统。</p>

<p>按照这个方法配置所有你想要配置的。</p>

<p>配置好Debug.xcconfig后，接下来我们使xcode加载它。直接上图，大家就明白了。<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1ed8jstod1aj20vj0avgn3.jpg" alt="" />
注意图中选中项。</p>

<p>现在再到Target的Build setting中看iOS Deployment Target去看看，就多了一列了，Debug那一行设置就是6.0.<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1ed8jz5qtswj20vo0bmacj.jpg" alt="" /></p>

<p>网上有人已奖基本的配置文件做出来了，你也就不需要一个一个去copy, parse了。<br>
可以参看github上的<a href="https://github.com/jspahrsummers/xcconfigs">xcconfigs</a></p>

<p>参考：
<a href="http://b2cloud.com.au/how-to-guides/using-a-xcconfig-file">http://b2cloud.com.au/how-to-guides/using-a-xcconfig-file</a></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Http URL Cache清除]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/09/ios-http-url-cacheqing-chu/"/>
    <updated>2014-02-09T11:23:10+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/09/ios-http-url-cacheqing-chu</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>三行代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[NSURLCache sharedURLCache] removeAllCachedResponses];
</span><span class='line'>[[NSURLCache sharedURLCache] setDiskCapacity:0];
</span><span class='line'>[[NSURLCache sharedURLCache] setMemoryCapacity:0];</span></code></pre></td></tr></table></div></figure>


<p>其实只需要第一行即可。</p>

<p>UIWebView中的cache也可以用此方法清除， 所有通过URL Loading System缓存的数据都可以清除。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LevelDB for iOS]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/09/leveldb-for-ios/"/>
    <updated>2014-02-09T11:20:55+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/09/leveldb-for-ios</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>最近NO SQL型数据库比较火，本人也想了解了解。于是找到了LevelDB这个数据库,它是一个KV型的数库据，还度那是杠杠的。于是试着用一下。</p>

<p>它是开源的，首先得编译它。网上已有很多人成功编译了它。<br>
首先就是下载源码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>clone levelDB repo https://code.google.com/p/leveldb/</span></code></pre></td></tr></table></div></figure>


<p>这个工程里的mackfile就支持编译iOS平台，只不过很久有没有更新了，现在iOS7出来后，常用指令集分别是armv7,armv7s,arm64. 对于armv6我们可以放弃了，毕竟技术是在不断发展的，过时的就不要用了。
现在我们来修改Makefile, 主要就是去掉armv6, 然后增加armv7s与arm64.</p>

<p>定位到.cc.o的198行与.c.o的205行
修改为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.cc.o:
</span><span class='line'>  mkdir -p ios-x86/$(dir $@)
</span><span class='line'>  $(CXX) $(CXXFLAGS) -isysroot $(SIMULATORROOT)/SDKs/iPhoneSimulator$(IOSVERSION).sdk -arch i686 -c $&lt; -o ios-x86/$@
</span><span class='line'>  mkdir -p ios-arm/$(dir $@)
</span><span class='line'>  xcrun -sdk iphoneos $(CXX) $(CXXFLAGS) -isysroot $(DEVICEROOT)/SDKs/iPhoneOS$(IOSVERSION).sdk -arch armv7 -arch armv7s -arch arm64 -c $&lt; -o ios-arm/$@
</span><span class='line'>  lipo ios-x86/$@ ios-arm/$@ -create -output $@
</span><span class='line'>
</span><span class='line'>.c.o:
</span><span class='line'>  mkdir -p ios-x86/$(dir $@)
</span><span class='line'>  $(CC) $(CFLAGS) -isysroot $(SIMULATORROOT)/SDKs/iPhoneSimulator$(IOSVERSION).sdk -arch i686 -c $&lt; -o ios-x86/$@
</span><span class='line'>  mkdir -p ios-arm/$(dir $@)
</span><span class='line'>  xcrun -sdk iphoneos $(CC) $(CFLAGS) -isysroot $(DEVICEROOT)/SDKs/iPhoneOS$(IOSVERSION).sdk  -arch armv7 -arch armv7s -arch arm64 -c $&lt; -o ios-arm/$@
</span><span class='line'>  lipo ios-x86/$@ ios-arm/$@ -create -output $@</span></code></pre></td></tr></table></div></figure>


<p>保存，</p>

<p>然后用命令进行编译</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CXXFLAGS=-stdlib=libc++ make PLATFORM=IOS</span></code></pre></td></tr></table></div></figure>


<p>或</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CXXFLAGS=-stdlib=libstdc++ make PLATFORM=IOS</span></code></pre></td></tr></table></div></figure>


<p>都可以，由于用到了c++标准库，这儿分别用了新旧不同的库而已。libc++是支持c++ 11标准的，这儿分别对应xcode中引用的两个库ibc++.dylib与libstdc++.dylib两个库。</p>

<p>编译成功后，在源码根目录就会有一个libleveldb.a的库文件与include的头文件目录。然后就可以试用了。这儿我引用<a href="http://www.tanhao.me/pieces/1397.html">老谭</a>哥写好的wrapper，并写了一个for iOS的测试工程。
创建一个iOS的新工程，将libleveldb.a与include copy到工程目录中，然后将libleveldb.a拖到工程中，接着配置header查找目录，在xcode setting中的Header Search path中加入一行${SRCROOT}，它后面选择recursive， 表示在工程源码目录中递归遍历查找头文件。
<img src="http://user-image.logdown.io/user/6397/blog/6392/post/177919/9MjT1fJxRXCdmUCZgmio_Screen%20Shot%202014-02-04%20at%201.52.41%20pm.png" alt="Screen Shot 2014-02-04 at 1.52.41 pm.png" /></p>

<p>接着在AppDelegate.m中引入老潭的wrapper头文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "THLevelDB.h"</span></code></pre></td></tr></table></div></figure>


<p>接着在didFinishLaunchingWithOptions中写测试代码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
</span><span class='line'>NSString *dbPath = [[paths objectAtIndex:0] stringByAppendingPathComponent:@"leveldb_demo.ldb"];
</span><span class='line'>THLevelDB *db = [THLevelDB levelDBWithPath:dbPath];
</span><span class='line'>
</span><span class='line'>//存储字符串
</span><span class='line'>[db setString:@"成都" forKey:@"city"];
</span><span class='line'>
</span><span class='line'>//存储基本类型
</span><span class='line'>[db setInt:13579 forKey:@"count"];
</span><span class='line'>[db setFloat:30.2 forKey:@"temperature"];
</span><span class='line'>
</span><span class='line'>//存储Data数据
</span><span class='line'>NSData *data = [@"天府之国" dataUsingEncoding:NSUTF8StringEncoding];
</span><span class='line'>[db setData:data forKey:@"data"];
</span><span class='line'>
</span><span class='line'>//存储任意对象(实现了NSCoding协议的对象)
</span><span class='line'>[db setObject:[NSDate date] forKey:@"object"];
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>NSLog(@"城市:%@",[db stringForKey:@"city"]);
</span><span class='line'>NSLog(@"数量:%d",[db intForKey:@"count"]);
</span><span class='line'>NSLog(@"Data:%@",[db dataForKey:@"data"]);
</span><span class='line'>NSLog(@"对象:%@",[db objectForKey:@"object"]);</span></code></pre></td></tr></table></div></figure>


<p>测试工程<a href="https://github.com/ondev/LevelDBiOSDemo">传送门</a>。</p>

<p>参考：<br>
<a href="http://blog.rpplusplus.me/blog/2014/01/20/build-leveldb/">http://blog.rpplusplus.me/blog/2014/01/20/build-leveldb/</a>
<a href="http://www.tanhao.me/pieces/1397.html">http://www.tanhao.me/pieces/1397.html</a>
<a href="http://herkuang.info/blog/2014/01/28/ios%E4%B8%8B%E7%BC%96%E8%AF%91leveldb%E7%9A%84%E6%80%BB%E7%BB%93/">http://herkuang.info/blog/2014/01/28/ios%E4%B8%8B%E7%BC%96%E8%AF%91leveldb%E7%9A%84%E6%80%BB%E7%BB%93/</a></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PhpStorm调试xiuno BBS]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/09/phpstormdiao-shi-xiuno-bbs/"/>
    <updated>2014-02-09T11:13:37+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/09/phpstormdiao-shi-xiuno-bbs</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>上一篇文章里介绍了PhpStorm的开发环境配置，并能对单页面进行调试。今天我们介绍如何调试一个web application, 就拿一个开源的php源码来做试验：xiuno bbs.</p>

<p>首先当然是到下载入口下载xiuno bbs的源码。然后安装吧， Mac系统自带了Apache， 所以放到站点目录下，然后浏览器访问，就可以了。在安装的时候，数据库请选择pdo_mysql, 因为如果选择mysql用的比较老的mysql操作库，在调试的时候会提示出错。</p>

<p>这儿我以Mac系统为例，我假设你已安装apache默认站点根目录 /Library/WebServer/Documents/</p>

<p>安装好了，那我们就开始用PhpStorm创建工程，选择Create New Project from Existing Files <br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1edcyawfkcmj20m00gfdh1.jpg" alt="" /></p>

<p>选择xiuno源文件的目录。然后选择Project Root, 然后下一步变化可点击。<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edcybhsqt7j20ob0hrjtm.jpg" alt="" /></p>

<p>接下来设置local http server. <br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1edcybzki5cj20od0hy3zw.jpg" alt="" /></p>

<p>接下来设置http server的path<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edcyck053nj20oi0htta2.jpg" alt="" /></p>

<p>接下来设置运行环境<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edcyd25tprj20tf0dl0u8.jpg" alt="" /></p>

<p>点击加号，然后选择Php Web Application, 因为xiuo bbs是一个web application. <br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edcydh8g8rj20te0io0u6.jpg" alt="" /> <br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edcye01oj7j20t80do3zi.jpg" alt="" /></p>

<p>名字任意，但是目前server后面是红色的，点击它后面的button进行设置 <br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edcyelh5jaj20l20ett9l.jpg" alt="" /></p>

<p>点击Validate remote environment,然后选择刚才配置的Server, 然后点击下面的Validate, 如图 <br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edcyf2vhrsj20f109gt9o.jpg" alt="" /></p>

<p>接着是http目录设置，如图 <br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edcyfkbk74j20tg0igdha.jpg" alt="" /></p>

<p>这样你就可以通过PhoStorm运行或调试源码了。 <br>
xiuno的调试宏记得打开哟。 <br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edcygccolzj21250d541f.jpg" alt="" /></p>

<p>我也开始学习PHP写程序了. ^v^</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AMR for iOS7]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/09/amr-for-ios7/"/>
    <updated>2014-02-09T11:12:12+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/09/amr-for-ios7</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>前不久重新编译了opencore amr. 环境是Xcode4.6.3+iOS6+opencore amr 0.1.3。</p>

<p>Xcode5+iOS7已出来有一段时间了</p>

<p>今天就来用iOS7＋Xcode5编译 opencore amr 0.1.3</p>

<p>还是以前的shell, 支持arm64平台。</p>

<p>我编译了一份库，<a href="https://github.com/ondev/AMR-for-iOS7">传送门</a>。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下配置神器PhpStrom开发环境]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/09/macxia-pei-zhi-shen-qi-phpstromkai-fa-huan-jing/"/>
    <updated>2014-02-09T11:00:05+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/09/macxia-pei-zhi-shen-qi-phpstromkai-fa-huan-jing</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>php这么流行，不能不研究一下。首先得找到好用的工具，见网上大神们都推荐神器phpStorm，那我也追追风，下载了一个phpStorm 7.1。平时工作都是在mac系统，所以这儿只介绍mac系统神器的配置。</p>

<p>安装我就不用多说了嘛。<br>
安装成功后，接下来就运行。<br>
运行后当然是创建一个了新工程，简单一点，我们创建一个空工程。 刚才都说了，是空工程，那接着我们给它加点料，新建一个php文件，暂且命名为index.</p>

<p>接着我们给它点点内容，那是那样吧，最简单的，用helloworld.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>    &lt;title&gt;PHP 测试&lt;/title&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>&lt;?php echo '&lt;p&gt;Hello World&lt;/p&gt;'; ?&gt;
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>接着我们点击运行
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1edcxz9otroj20qf0ji413.jpg" alt="" /></p>

<p>会出现一个对话框
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edcy003c4xj20iw0ikwgi.jpg" alt="" /></p>

<p>下面有一个error,是说没有找到php解释器。点击后面的Fix，会出现如下对话框：
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edcy0tu5m7j20dk0i1dgj.jpg" alt="" /></p>

<p>看到了吧，解释器设置。 mac系统是默认安装了php的，目录是在/usr/bin,那么我们点击后面的button,然后指定php解释器目录。<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edcy1eg18oj20mx0ir3zn.jpg" alt="" /></p>

<p>配置好后点击ok。</p>

<p>配置好后，就有解释器了。<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edcy2630cbj20d80htjrz.jpg" alt="" /></p>

<p>理论上这样配置就已完成了，可是如果你点击下图右边中的chrome图标<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1edcy319hyfj20ws0jcgns.jpg" alt="" /></p>

<p>你将会看502错误，<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edcy3qaz2mj20qu07r0sv.jpg" alt="" /></p>

<p>回到PhpStorm后，你会看到有一相警告，是说php-cgi没有找到<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1edcy4ae661j20lc07wdga.jpg" alt="" /></p>

<p>解决方法就是自己安装php，不用mac安装，这样就有php开发环境了。 安装很简单，直接运行一个命令, 需要几分钟，请慢慢等待。<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -s http://php-osx.liip.ch/install.sh | bash -s 5.5</span></code></pre></td></tr></table></div></figure>


<p>新安装的php目录是/usr/local/php5/bin，接下来在PhpStorm中设置新安装的php解释器： PhpStorm->Preferences->PHP 会来到解释器设置页<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edcy5cwpgaj20y40mvtbk.jpg" alt="" /></p>

<p>设置我们安装的php解释器：/usr/local/php5/bin<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edcy5zj6k8j20mx0iqgmv.jpg" alt="" /></p>

<p>这下配置完成，把鼠标放到PhpStorm右边区域，然后点击你电脑上安装了的浏览器，就会打开浏览器显示index.php的内容<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1edcy6kpunej206r04imwy.jpg" alt="" /></p>

<p>如果想从网页中触发进行调试，需要安装插件。我用的是chrome, 需要安装<a href="https://chrome.google.com/webstore/detail/xdebug-helper/eadndfjplgieldjbigjakmdgkmoaaaoc">Xdebug helper</a></p>

<p>到此，神器PhpStorm for Mac已配置完成，可以开始你的php之旅了。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装xiuno论坛]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/09/an-zhuang-xiunolun-tan/"/>
    <updated>2014-02-09T10:33:51+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/09/an-zhuang-xiunolun-tan</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>最近想开一个论坛，于是找了一些常用bbs开源框架，比较成熟的有Discuz, phpWind… 无意间看到有人推荐xiuno, 特点是小巧，速度快。由于我不想建一个大型的论坛，所以选择了速度与小巧的xiuno.</p>

<p>首先是下载<a href="http://bbs.xiuno.com/thread-index-fid-2-tid-4159.htm">程序</a>. 解压放到你的站点目录。 然后在浏览器里定位到你的bbs目录，就会提示你进行安装，如果没有出现，则是因为你的文件目录没有写权限 修改权限命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod -R 777 ./xiuno </span></code></pre></td></tr></table></div></figure>


<p>安装成功后，进入后台，看到有一个警告。php.ini 中未设置 upload_tmp_dir，可能会导致上传失败。</p>

<p>我的vps是unbuntu的系统，所以到/etc/php5/apache2目录下修入php.ini, 将upload_tmp_dir前面的;号去掉，;号表示注释。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> sudo vim php.ini 
</span><span class='line'> ``` 
</span><span class='line'>如果是Mac系统，php.ini的目录是/etc, 下面有一个php.ini.default文件 
</span></code></pre></td></tr></table></div></figure>


<p>
cp php.ini.default php.ini sudo vim php.ini
&#8220;`</p>

<p>一个vps如果要想建多个站，那么需要设置virtual host. 请先配置好virtual host，然后再进行站点安装，否则会出错，大家一定注意。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7新知识汇总]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/09/ios7xin-zhi-shi-hui-zong/"/>
    <updated>2014-02-09T10:24:48+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/09/ios7xin-zhi-shi-hui-zong</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>iOS7给我们带来了好多东西，表示我们将有新东西要学习了，在此记录一些网上的教程，方便自己与大家学习。</p>

<p>iOS7 CoreBluetooth</p>

<p><a href="http://www.doubleencore.com/2013/09/whats-new-in-bluetooth-le-ios-7/">http://www.doubleencore.com/2013/09/whats-new-in-bluetooth-le-ios-7/</a><br>
<a href="https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/AboutCoreBluetooth/Introduction.html">CoreBluetooth</a></p>

<p>iOS7 Feature</p>

<p><a href="http://blog.bignerdranch.com/3899-uikit-dynamics-and-ios-7-building-uikit-pong/">iOS7 UIKit Dynamics 1</a> <br>
<a href="http://www.raywenderlich.com/50197/uikit-dynamics-tutorial">iOS7 UIKit Dynamics 2</a><br>
<a href="http://www.raywenderlich.com/42699/spritekit-tutorial-for-beginners">iOS7 Sprint Kit</a> <br>
<a href="http://blog.bignerdranch.com/3784-javascriptcore-and-ios-7/">iOS7 JavascriptCore</a><br>
<a href="http://www.raywenderlich.com/51127/nsurlsession-tutorial">iOS7 NSURLSession</a><br>
<a href="http://www.raywenderlich.com/50151/text-kit-tutorial">iOS7 Text Kit</a></p>

<p>iBeacon</p>

<p><a href="http://redbearlab.com/ibeacon/">http://redbearlab.com/ibeacon/</a> <br>
<a href="http://www.devfright.com/ibeacons-tutorial-ios-7-clbeaconregion-clbeacon/">http://www.devfright.com/ibeacons-tutorial-ios-7-clbeaconregion-clbeacon/</a> <br>
<a href="http://maniacdev.com/2013/10/example-an-app-using-the-new-ios-7-ibeacon-api">http://maniacdev.com/2013/10/example-an-app-using-the-new-ios-7-ibeacon-api</a></p>

<p>iOS7 Multipeer Connectivity</p>

<p><a href="http://techmaster.vn/2013/09/multipeer-connectivity-quick-tutorial/">http://techmaster.vn/2013/09/multipeer-connectivity-quick-tutorial/</a></p>

<p>Other iOS7 Tutorial</p>

<p><a href="http://www.shinobicontrols.com/blog/posts/2013/09/19/introducing-ios7-day-by-day/">http://www.shinobicontrols.com/blog/posts/2013/09/19/introducing-ios7-day-by-day/</a><br>
<a href="https://github.com/shu223/iOS7-Sampler">https://github.com/shu223/iOS7-Sampler</a><br>
<a href="http://www.doubleencore.com/2013/09/essential-ios-7-developers-guide/">http://www.doubleencore.com/2013/09/essential-ios-7-developers-guide/</a><br>
<a href="http://www.objc.io/issue-5/">http://www.objc.io/issue-5/</a><br>
<a href="http://www.captechconsulting.com/blog-tags/ios">iOS7 Tutorial Series</a></p>

<p>如果你有更好的教程请补充。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DeckView在iOS7中的bug]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/09/deckviewzai-ios7zhong-de-bug/"/>
    <updated>2014-02-09T00:52:32+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/09/deckviewzai-ios7zhong-de-bug</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>前面有两篇文件介绍了适配iOS7的工作，也总结了其最主要的改变就是view全屏模式的布局方式。
我iOS开发的朋友可能用过<a href="https://github.com/Inferis/ViewDeck">ViewDeck</a>这个库，它可以做出类似facebook那样的左右滑动的效果。当你升级到iOS7后，将会有一些问题。这篇文章将介绍我遇到的问题及解决方法。</p>

<p>首先，我说说我用viewdeck的ui布局， window的rooterViewController是一个UITabBarViewController, 然后IIViewDeckController是UITabBarViewController的子view. 然后每一个IIViewDeckController的left,center是UINavigationController. 还有一点需要说明， UITabBar的background Image是自定义的一张图片。</p>

<p>这样的布局在iOS6上显示正常的，在iOS7 3.5 retina的Simulator上显示也是正常的，但是在iPhone4s上显示不正确了，IIViewDeckController的left与center的view高度刚好少44。也就是说这个问题只会在设备上出现。我debug了一下，发现造成这个问题的原因是UITabBar自定义了背景图片，如果不自定义则ok.但是我们的程序是需要自定义UITabBar的背景的。由于我看到刚好少了44px,所以我就试着在IIViewDeckController的viewDidLoad中加了一句代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7) {
</span><span class='line'>        self.extendedLayoutIncludesOpaqueBars = YES;
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>这样就可以成功运行了。 这句话的意思就是，是否延升到Tabbar区域。默认是NO的，由于Tabbar是44px,这样修改刚好可以fix这个问 但是最让我费解的就是在Simulator上没有这个问题，在Device上有问题，不过问题总算解决了。</p>

<p>我也把我做的测试工程放到了<a href="https://github.com/ondev/TestViewDeck">GitHub</a>, 大家可以下载分别运行到Simulator与Device, 然后把上面代码注释掉再运行做比较。 我的开发环境是:Version 5.0 (5A1413) + iOS7</p>

<p>如果你的测试结果与我不一样，请告诉我</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7隐藏status Bar]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/09/ios7yin-cang-status-bar/"/>
    <updated>2014-02-09T00:49:11+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/09/ios7yin-cang-status-bar</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>iOS7中，状态栏变化比较大，hide/show状态的方法也不一样了。 在iOS7以前的版本，hide是通过以下代码实现</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[[UIApplication sharedApplication] setStatusBarHidden:YES withAnimation:UIStatusBarAnimationSlide];
</span></code></pre></td></tr></table></div></figure>


<p>在iOS7中默认情况下，这个方法不成功了。到setStatusBarHidden:withAnimation:声明的头文件去看看，多了一句注释： // Setting statusBarHidden does nothing if your application is using the default UIViewController-based status bar system. 现在在iOS7中，status bar的外观默认依赖UIViewController, 也就是说status bar随UIViewController的不同而不同。在这种默认的方式下，用全局的方法setStatusBarHidden:withAnimation:是行不通的。</p>

<p>解决方法是在infor.plist中加入key:UIViewControllerBasedStatusBarAppearance 并设置其值为NO，这样就告诉系统，status bar不依赖于UIViewController. 这样就可以通过上面的方法来hiden status bar.</p>

<p>如果是在默认情况下，如果我们要hiden如何办呢。</p>

<p>只需要实现两个新方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UIStatusBarStyle)preferredStatusBarStyle
</span><span class='line'>{
</span><span class='line'>    return UIStatusBarStyleLightContent;
</span><span class='line'>    //UIStatusBarStyleDefault = 0 黑色文字，浅色背景时使用
</span><span class='line'>  //UIStatusBarStyleLightContent = 1 白色文字，深色背景时使用
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (BOOL)prefersStatusBarHidden
</span><span class='line'>{
</span><span class='line'>    return NO; //返回NO表示要显示，返回YES将hiden
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>上面一个回调方法返回status bar显示时候的样式，下面一个回调控制是否显示status bar.</p>

<p>调用下面的一行代码将会触发上面的回调</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[self setNeedsStatusBarAppearanceUpdate];</span></code></pre></td></tr></table></div></figure>


<p>如果想在hiden/show之间有点动画效果，用下面的代码即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[UIView animateWithDuration:0.5 animations:^{
</span><span class='line'>        [self setNeedsStatusBarAppearanceUpdate];
</span><span class='line'>    }];</span></code></pre></td></tr></table></div></figure>


<p>现在介绍完毕在iOS7下操作status bar.如有问题，欢迎大家指正。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[适配iOS7开发2]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/09/gua-pei-ios7kai-fa-2/"/>
    <updated>2014-02-09T00:34:13+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/09/gua-pei-ios7kai-fa-2</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>在前一篇文章中介绍了非autolayout模式下iOS7的适配工作。 今天来介绍一下autolayout下的适配工作。<br></p>

<p>首先，我们用xcode4.6.3创建一个simgle view application. 选中Use storyboard.<br>
拖一个UIButton到view中。 由于开启了autoLayout， 在xcode4.6.3中，自动会有两个auto layout约束，分别是水平与垂直的约束：
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edcfz58ucgj20o00a40u0.jpg" alt="" /></p>

<p>运行程序效果：
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1edcfzva8w4j20hs0vkjrm.jpg" alt="" /></p>

<p>可以看到是垂直方向上距status bar底部是45px，距右边是186px.<br>
现在我们用xcode5打开这个工程。会提示Upgrade storyboard，我们点击Upgrade. Upgrade后，你会发现，垂直方向上有变化了，约束是从顶部开始，不是从status bar底部开始计算。这也我们想要的结果不一样，我们还是希望约束是从status bar底部开始计算。<br>
仔细看看storyboard中的View Controller， 你会发现，这儿多了两个东东，分别是Top Layout Guide，Bottom Layout Guide. <br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edcg16hbatj20ny0adaal.jpg" alt="" /></p>

<p>选在我们的button,按住control键，然后拖到Top Layout Guide上，在弹出的对话框选择Vertical spacing
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edcg1x4fjij204n03bmx3.jpg" alt="" /></p>

<p>这样又建立了一个垂直约束，你会发现这个约束是从Status bar底部开始计算的。这个约束有点像是我们需要的，
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edcg2i341lj20mt0a7wf4.jpg" alt="" /></p>

<p>但是这个约束距status bar是25px,我们想要的是45px. 那只需要修改一下，将25px改为45px
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1edcg36ji0xj20vk09fmy3.jpg" alt="" /></p>

<p>你会发现有storyboard中有红色提示，这说明约束条件发生了冲突，因为垂直约束的值都为45，显示冲突了。由于我们只需要status bar底部开始计算的那个约束，所以我们将旧的那个删掉即可。
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edcg3vzbylj20nj0akt97.jpg" alt="" /></p>

<p>现在分别选择iOS6/iOS7来运行。都是距status bar下面45px显示button. 适配工程完成。<br>
顺便介绍一下xcode5中，用xib或storyboard布局的时候，preview iOS7与iOS7以前版本的效果。 快捷键：option+command+enter 打开Assistant editor,然后选择右边的automatic->preview->xxxxx(preview)
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1edcg4xvwgnj20fi0fcabq.jpg" alt="" /></p>

<p>然后在出现的画面下面有一个切换iOS7与以前版本的切换开关
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edcg5lktzgj20ca0l6t9c.jpg" alt="" /></p>

<p>这样可以方例你实时的查看布局效果以适配不同版本的iOS.<br>
最后： auto layout是好东西，虽然只有>iOS6的版本才支持，但是我还是建意大家用auto layout,因为以后苹果也可能出现多种屏幕，到时候代码修改量将会减少。</p>

<p>参考：<a href="https://developer.apple.com/library/ios/qa/qa1797/_index.html">https://developer.apple.com/library/ios/qa/qa1797/_index.html</a></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[适配iOS7开发1]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/08/gua-pei-ios7kai-fa-1/"/>
    <updated>2014-02-08T23:02:24+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/08/gua-pei-ios7kai-fa-1</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>iOS7可以说是苹果一次革命性的变化，这样做为一个开发者需要做的事也不少。首先苹果的view布局有所变化，现在view默认是全屏模式，而所有的bar(navigation bar, tool bar, search bars 与scope bars都是半透明)，status bar则是全透明。有了这样的改变，写代码的时候就有我们折腾的了。 本文所说的适配是指：用xcode5+iOS7sdk编译的程序能正常的运行在iOS6及以下的设备上。</p>

<p>首先看一个例子，用xcode5创建一个Empty Application的工程， 然后新建一个继承UIViewController的类，并将这个类的一个实例做为window的rootViewController. 现在运行程序，将会看到一个空白页。 现在我们向里面加点东西。 在viewDidLoad中加入以下代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.view.backgroundColor = [UIColor grayColor];
</span><span class='line'>UIButton *btn = [UIButton buttonWithType:UIButtonTypeRoundedRect];
</span><span class='line'>btn.frame = CGRectMake(0, 0, 100, 44);
</span><span class='line'>btn.layer.cornerRadius = 0;
</span><span class='line'>btn.layer.borderColor = [UIColor blackColor].CGColor;
</span><span class='line'>btn.layer.borderWidth = 1;
</span><span class='line'>[btn setTitle:@"Test" forState:UIControlStateNormal];
</span><span class='line'>[self.view addSubview:btn];</span></code></pre></td></tr></table></div></figure>


<p>现在运行，你将会看到在屏幕最顶处有一个黑色边框的button.
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edcdvo2yn4j20hs0vkgls.jpg" alt="" /></p>

<p>注意没，是与statusBar重叠了。
下面我们做一些修改，修改AppDelegate中的window的rootViewController值：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ViewController *vc = [[ViewController alloc] init];
</span><span class='line'>UINavigationController *nav = [[UINavigationController alloc] initWithRootViewController:vc];
</span><span class='line'>self.window.rootViewController = nav;</span></code></pre></td></tr></table></div></figure>


<p>再运行，程序，你将看到
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edcdwv6tt7j20hs0vkq34.jpg" alt="" /></p>

<p>我们的button到哪儿去了，其实它是被Navigation Bar档住了。细心的读者可能会问，你刚才不是说了Navigation Bar是半透明的吗？即然是半透明的为何我看不到button呢？ 的确Navigation Bar是半透明的，不过透明度不高，然后看不清后成的button.如果你不相信，你可以再一个黑色的view看看效果。将下面代码放入viewDidLoad</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIView *v = [[UIView alloc] initWithFrame:CGRectMake(100, 0, 100, 70)];
</span><span class='line'>v.backgroundColor = [UIColor blackColor];
</span><span class='line'>[self.view addSubview:v];</span></code></pre></td></tr></table></div></figure>


<p>然后运行，看看效果：
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edcdyrmfs4j20hs0vkdg1.jpg" alt="" /></p>

<p>现在可以清楚的看到Navigation Bar后面的view， 可以看到，UIViewController的view是全屏的坐标系了。<br>
这样与我们iOS6与以前的坐标不一样了，以前是从Navigation Bar底部开始计算y值的，现在却是从Status Bar开始计算y值。<br>
不要着急，苹果公司有解决方案：将下面代码放在viewDidLoad中</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.edgesForExtendedLayout = UIRectEdgeNone;</span></code></pre></td></tr></table></div></figure>


<p>再运行，看看效果：
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edcebwcwusj20hs0vkmxe.jpg" alt="" /></p>

<p>现在坐标就是开始从Navigation Bar开始计算了。然而这种情况只适合在Navigation Bar的情况，如果没有Navigation Bar, 坐标仍然是从Status Bar顶部开始计算的。<br>
如果底部有Tab Bar的情况呢，如果要兼容以前的frame设置，那么就需要设置UIViewController的edgesForExtendedLayout为UIRectEdgeNone。<br></p>

<h3>代码如何适配iOS7</h3>

<p>如果我们的代码没有用storyboard, 没有用xib,纯代码的情况，如果要适配iOS7，那么上面只是介绍了有Navigation Bar, Tool Bar的情况，如果只是单纯的View,那么我们的代码运行在iOS7上，会有向上20px偏移，这需要手动修改：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7) {
</span><span class='line'>        self.view.bounds = CGRectMake(0, -20, self.view.frame.size.width, self.view.frame.size.height );
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>这种方法需要对所有的UIViewController进行设置，比较麻烦，还有一种较为简单的方法，就是设置window，这样可以影响所有的subview, 参考自<a href="http://stackoverflow.com/questions/18294872/ios-7-status-bar-back-to-ios-6-style/18855464#18855464">stackoverflow</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7) {
</span><span class='line'>        [application setStatusBarStyle:UIStatusBarStyleLightContent];
</span><span class='line'>        self.window.clipsToBounds =YES;
</span><span class='line'>        self.window.frame =  CGRectMake(0,20,self.window.frame.size.width,self.window.frame.size.height-20);
</span><span class='line'>        
</span><span class='line'>        //Added on 19th Sep 2013
</span><span class='line'>        self.window.bounds = CGRectMake(0, 20, self.window.frame.size.width, self.window.frame.size.height);
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>下面是第二方法的运行效果：
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edceixx3bmj20hs0vkaab.jpg" alt="" /></p>

<p>不过第二种方法有问题，当你Rotate Simulator的时候你将会看到问题，Status Bar位置将不动。所以我不推荐用第二种方法，可以写一个UIViewController的category方法，然后调用方法一中的代码。这样对全工程进行修改以适配iOS7.</p>

<h3>下面介绍一下xib的方法</h3>

<p>新建一个UIViewController的子类，叫TestViewController，选中创建xib文件 然后，在在AppDelegate中将window的rootViewController换成我们新建的TestViewController实例，代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TestViewController *vc2 = [[TestViewController alloc] init];
</span><span class='line'>self.window.rootViewController = vc2;</span></code></pre></td></tr></table></div></figure>


<p>用xcode4.6.3+ios6运行程序，
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edceozre4oj20hs0vkjrg.jpg" alt="" /></p>

<p>现在我们在xib中拖入一个button，frame为(177, 0, 73, 44)
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edces84tk0j20ny0bhwg9.jpg" alt="" />
由于iOS7中扁平化设计了，button没有了边框，等一下我们会用xcode5+ios7来运行本程序，为了更清楚的看清frame，在此我将button的边框显示出来，前面代码生成的button也是显示了边框的，我们关系一个UIButton的变量textBtn到代码中,并用代码再生成一个button</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>_testBtn.layer.borderWidth = 1;
</span><span class='line'>UIButton *btn = [UIButton buttonWithType:UIButtonTypeRoundedRect];
</span><span class='line'>btn.frame = CGRectMake(0, 0, 100, 44);
</span><span class='line'>btn.layer.cornerRadius = 0;
</span><span class='line'>btn.layer.borderColor = [UIColor blackColor].CGColor;
</span><span class='line'>btn.layer.borderWidth = 1;
</span><span class='line'>[btn setTitle:@"Test" forState:UIControlStateNormal];
</span><span class='line'>[self.view addSubview:btn];</span></code></pre></td></tr></table></div></figure>


<p>运行程序，效果如下：
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edcf3ld7s9j20hs0vkjrp.jpg" alt="" /></p>

<p>关闭xocde4.5与Simulator,然后用xcode5打开用iOS7的效果：
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edcf5nev3lj20hs0vk74i.jpg" alt="" /></p>

<p>对比可以看出，iOS7是全屏的模式。 这样一来，从iOS6中升级过来的程序，布局就不正确了，有20px的偏移，上面介绍了用代码解决的方法，在这儿我们先用代码的方法来试试，在viewWillAppear中加入以下代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7) {
</span><span class='line'>        self.view.bounds = CGRectMake(0, -20, self.view.frame.size.width, self.view.frame.size.height );
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>再运行程序，效果如下：
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edcf8ajwtmj20hs0vkglu.jpg" alt="" /></p>

<p>其中代码加入的button，下移了20px, 可是xib中拖入的button还是以status bar顶为y＝0开始计算frame.这可能是由于我们用到了auto layout, 所以xib有自己的frame计算方式. 代码生成的没有用auto layout约束，则受到了上面代码的影响。 我们在xocde5中选择xib，如果是xcode4.6创建的xib, xcode5会提示你升级，我们选择升级，如果你选择了忽略也没关系，可以在右边的open in下拉列表中选择xcode5. xcode5对xib做了很多优化，相比以前的xib，xcode5的xib文件不但小，而且功能更强大。 我们禁用xib的autolayout试试，再运行：
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edcf93kryej20hs0vkdg2.jpg" alt="" /></p>

<p>这下由于没有auto layout的作用，都开始从status bar下面开始计算frame了。</p>

<p>如果你的程序view全是xib，没有用代码生成，那么这儿还有一种解决方法，原因是xib中没有开启autolayout)不用代码控制self.view.bounds,所以我们先将viewWillAppear中的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7) {
</span><span class='line'>        self.view.bounds = CGRectMake(0, -20, self.view.frame.size.width, self.view.frame.size.height );
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>删掉。</p>

<p>然后在在xcode5中选择我们的xib，并选择view中拖入的button，选择它的Size inspector,如图：
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edcffnqm5uj20vo0cygmt.jpg" alt="" /></p>

<p>细心的你可能发现了，右边较之前的版本多一些内容。多了一个ios6/ios7 Deltas.它就是用来做iOS6的xib适配到iOS7用的东西。 由于iOS7中，全屏的模式，所以我们需要设置我们的＋20,这样才从status bar底部开始显示。现在我们将我们的button的y值设为20.如图：<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edcfgu9hj7j208909tq3e.jpg" alt="" /></p>

<p>xcode5+ios7运行效果：
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edcfj5xunjj20hs0vkgls.jpg" alt="" /></p>

<p>由于它的frame是从20开始的，细心的读者可能会有疑问了，如果我们运行在iOS7以前的设备上，由于frame是从20开始的，不是我们想要的效果。的确是这样的，下面是iOS6上运行的效果：
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edcfll9kvjj20hs0vk74d.jpg" alt="" /></p>

<p>是从status bar下面20px.
也就是说适配工作不成功。 等等，刚才我们说的ios6/ios7 Deltas,现在是时候出场了。 现在我们在将Deltas中y值设为-20.<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edcfmtk3swj20780a3jrv.jpg" alt="" /></p>

<p>再运行到iOS6的设备上，效果如下：
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edcfnfg3qmj20hs0vkaaa.jpg" alt="" /></p>

<p>小结： 从iOS7以前的工程适配到iOS7，且没有用autolayout,<br>
1.在viewDidLoad中加入以下代码完成短配工作</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7) {
</span><span class='line'>        self.view.bounds = CGRectMake(0, -20, self.view.frame.size.width, self.view.frame.size.height );
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>2.xib中用调整frame的y值+20，并设置Delats中y为-20. 如果是代码生成的view,则需要手动处理subview的frame的y值，所以都在原来基础上+20</p>

<p>最后我们要记住一点：iOS7默认是全屏的。 所以得有两套值。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
</feed>
