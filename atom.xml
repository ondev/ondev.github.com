<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Haven's Blog]]></title>
  <link href="http://www.ifun.cc/atom.xml" rel="self"/>
  <link href="http://www.ifun.cc/"/>
  <updated>2015-04-01T09:09:23+08:00</updated>
  <id>http://www.ifun.cc/</id>
  <author>
    <name><![CDATA[Haven]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS自动化测试]]></title>
    <link href="http://www.ifun.cc/blog/2015/03/30/ioszi-dong-hua-ce-shi/"/>
    <updated>2015-03-30T09:21:53+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/03/30/ioszi-dong-hua-ce-shi</id>
    <content type="html"><![CDATA[<p>给一些关键字，有时间再详细补上</p>

<p>MonkeyTalk</p>

<p>FruitStrap</p>

<p>ynma3k</p>

<p>Athrun</p>

<p>tuneup</p>

<p>InstrumentsDriver</p>

<p>ULAutomation</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NodeJS版本管理]]></title>
    <link href="http://www.ifun.cc/blog/2015/03/29/nodejsban-ben-guan-li/"/>
    <updated>2015-03-29T20:28:04+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/03/29/nodejsban-ben-guan-li</id>
    <content type="html"><![CDATA[<p>在Mac上可以通过brew来更新nodejs</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo brew upgrade node</span></code></pre></td></tr></table></div></figure>


<p>还有一种方法是用n, n也是nodejs的项目，首先安装它:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo npm install -g n</span></code></pre></td></tr></table></div></figure>


<p>下面命令升级nodejs</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo n 0.10.33
</span><span class='line'>sudo n stable
</span><span class='line'>sudo n latest</span></code></pre></td></tr></table></div></figure>


<p>更详细的命令请查看使用帮助:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>n --help</span></code></pre></td></tr></table></div></figure>


<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java解析Html]]></title>
    <link href="http://www.ifun.cc/blog/2015/03/29/javajie-xi-html/"/>
    <updated>2015-03-29T13:20:36+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/03/29/javajie-xi-html</id>
    <content type="html"><![CDATA[<p>最近用到了Java解析Html的一个库Jsoup, 这儿是<a href="http://jsoup.org/">官网</a>, 在此分享给大家，有这方面需要的朋友可以试一试。</p>

<p>有三个类需要我们了解，分别是Document，Elements，Element</p>

<p>大至用法有两步<br></p>

<h1>第一步:加载html,，这儿提供两种方式，一种是从本地加载，一种是从网上直接加载。</h1>

<h2>从本地加载:</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>String html = "YOU HTML STRING";
</span><span class='line'>Document doc = Jsoup.parse(html);</span></code></pre></td></tr></table></div></figure>


<p>也可以直接从文件加载</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>File input = new File("/tmp/input.html");
</span><span class='line'>Document doc = Jsoup.parse(input, "UTF-8", "http://example.com/");</span></code></pre></td></tr></table></div></figure>


<h2>通过url从网络加载</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Document doc = Jsoup.connect("http://en.wikipedia.org/").get();
</span><span class='line'>String title = doc.title();</span></code></pre></td></tr></table></div></figure>


<p>上面是通过http的get方法，下可以通过post来获取</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Document doc = Jsoup.connect("http://example.com")
</span><span class='line'>  .data("query", "Java")
</span><span class='line'>  .userAgent("Safari")
</span><span class='line'>  .cookie("auth", "token")
</span><span class='line'>  .timeout(3000)
</span><span class='line'>  .post();</span></code></pre></td></tr></table></div></figure>


<h1>第二步:定位元素</h1>

<h2>通过定义的api定位无素</h2>

<p>定位body</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>String html = "&lt;div&gt;&lt;p&gt;Lorem ipsum.&lt;/p&gt;";
</span><span class='line'>Document doc = Jsoup.parseBodyFragment(html);
</span><span class='line'>Element body = doc.body();</span></code></pre></td></tr></table></div></figure>


<p>定位标签</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Element content = doc.getElementById("content");
</span><span class='line'>Elements links = content.getElementsByTag("a");
</span><span class='line'>for (Element link : links) {
</span><span class='line'>  String linkHref = link.attr("href");
</span><span class='line'>  String linkText = link.text();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>常用的API有</p>

<p>查找API：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>getElementById(String id)
</span><span class='line'>getElementsByTag(String tag)
</span><span class='line'>getElementsByClass(String className)
</span><span class='line'>getElementsByAttribute(String key) (and related methods)
</span><span class='line'>兄弟关系的:siblingElements(), firstElementSibling(), lastElementSibling(); nextElementSibling(), previousElementSibling()
</span><span class='line'>父子关系的: parent(), children(), child(int index)</span></code></pre></td></tr></table></div></figure>


<p>值操作API:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>attr(String key) to get and attr(String key, String value) to set attributes
</span><span class='line'>attributes() to get all attributes
</span><span class='line'>id(), className() and classNames()
</span><span class='line'>text() to get and text(String value) to set the text content
</span><span class='line'>html() to get and html(String value) to set the inner HTML content
</span><span class='line'>outerHtml() to get the outer HTML value
</span><span class='line'>data() to get data content (e.g. of script and style tags)
</span><span class='line'>tag() and tagName()</span></code></pre></td></tr></table></div></figure>


<p>修改API</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>append(String html), prepend(String html)
</span><span class='line'>appendText(String text), prependText(String text)
</span><span class='line'>appendElement(String tagName), prependElement(String tagName)
</span><span class='line'>html(String value)</span></code></pre></td></tr></table></div></figure>


<h2>通过select语法定位元素</h2>

<p>这个不好用文字表达，直接看<a href="http://jsoup.org/cookbook/extracting-data/selector-syntax">官网</a>文档吧.</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ionic简明教程一]]></title>
    <link href="http://www.ifun.cc/blog/2015/03/29/ionicjian-ming-jiao-cheng/"/>
    <updated>2015-03-29T11:17:10+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/03/29/ionicjian-ming-jiao-cheng</id>
    <content type="html"><![CDATA[<p>ionic是一个Hybrid框架，关于它的介绍可以看它的<a href="http://www.ionic.io">官网</a><br></p>

<p>要使用这个框架，得配置环境。<br>
需要安装nodejs,自行google。<br></p>

<p>安装cordova, ionic，cordova是什么？你应听说过PhoneGap吧，就是它，同一个东西。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo npm install -g cordova ionic</span></code></pre></td></tr></table></div></figure>


<p>在Mac上开发测试iOS需要模拟器，还需要安装ios-sim</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo npm -g install ios-sim</span></code></pre></td></tr></table></div></figure>


<p>而Android则需要Ant, 在<a href="http://ant.apache.org/bindownload.cgi">这儿</a>下载并解压放到本地目录,然后配置环境变量</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export ANT_HOME=/usr/local/apache-ant-1.9.4
</span><span class='line'>export PATH=${PATH}:${ANT_HOME}/bin</span></code></pre></td></tr></table></div></figure>


<p>查看ant版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ant -version</span></code></pre></td></tr></table></div></figure>


<p>下面就可以通过ionic的CLI来创建工程:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ionic start myApp tabs</span></code></pre></td></tr></table></div></figure>


<p>其中myApp是工程名字，tabs是内置模板中的一种，与xcode创建iOS工程的一样，有模板选择。inoic内置模板包括:blank,tabs,sidemenu</p>

<p>下面编译并运行项目:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd myApp
</span><span class='line'>$ ionic platform add ios
</span><span class='line'>$ ionic build ios
</span><span class='line'>$ ionic emulate ios</span></code></pre></td></tr></table></div></figure>


<p>发果一切顺利，就会启动iOS的模拟器运行工程。</p>

<p>同时也可以使用浏览器来测试:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ionic serve
</span><span class='line'>ionic serve --lab</span></code></pre></td></tr></table></div></figure>


<p>编译与运行一步到位</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ionic run ios </span></code></pre></td></tr></table></div></figure>


<p>更新cordova与ionic</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm update -g cordova ionic</span></code></pre></td></tr></table></div></figure>


<p>更新项目中使用的js库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ionic lib update </span></code></pre></td></tr></table></div></figure>


<p>查看ionic版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ionic -v </span></code></pre></td></tr></table></div></figure>


<p>ionic run android如果出现Failure [INSTALL_FAILED_OLDER_SDK],表示你用高版本的sdk编译，安装到低版本的android系统上，所以需要重新配置模拟器的target api level; 如果出现HAX is not installed on this machine (/dev/HAX is missing).表示没有安装Inter X86 Emulator Accelerator(HAXM installer),在Android SDK Manager下的Extras里。 这儿ADT里显示是installed，其实是没有安装的，需要到android sdk目录下的extras/intel/Hardware_Accelerated_Execution_Manager 中手动安装。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[拯救越狱白苹果]]></title>
    <link href="http://www.ifun.cc/blog/2015/03/28/zheng-jiu-yue-yu-bai-ping-guo/"/>
    <updated>2015-03-28T10:39:06+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/03/28/zheng-jiu-yue-yu-bai-ping-guo</id>
    <content type="html"><![CDATA[<p>今天要一大早，太操蛋了，好久没玩越狱了，用了一个重启命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>killall -HUP SpringBoard</span></code></pre></td></tr></table></div></figure>


<p>结果成了白苹果了。</p>

<p>然后我在ssh中用reboot重启，还是白苹果，最后用Home+开机键关机后重启还是不能解决。</p>

<h2>重刷系统</h2>

<p>首先强制关机Home+Power键
然后按一直按住Power键，直到屏上出现白苹果时(不要松开Power键)再按住Home键，当屏幕黑屏后松开Power键(Home键不要松)，直到电脑ITunes上有反应时才松开。</p>

<p>如果不成功多次几次，顺序是Power->Power+Home->Home，先按先放，后按后放的原则，理一下过程就清楚了。<br></p>

<p>当ITunes检测到Recovery Mode，Mac系统上按住Option键(Windows上按Shift键)并点击Restore，在弹出的对话框中选你下载的iOS固件(ipsw文件)，然后就是等待了。</p>

<h2>安全模式</h2>

<p>1、如果遭遇循环重启或白苹果，同时按住电源键和 Home 键<br>
2、当苹果 Logo 出现又消失后松开两个键<br>
3、同时按住电源键和音量增加键开机<br>
4、当苹果 Logo 出现时，松开电源键，但一直按住音量增加键直至启动完成<br>
5、前往 Cydia 卸载所有你认为和循环重启有关的插件<br>
6、如果问题未能解决重复以上五步<br>
7、问题解决</p>

<p>我只知道这两种解决白苹果，如果你有更好的方法还望告之。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenGL ES简明教程之1]]></title>
    <link href="http://www.ifun.cc/blog/2015/03/13/opengl-esjian-ming-jiao-cheng-zhi-1/"/>
    <updated>2015-03-13T12:48:55+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/03/13/opengl-esjian-ming-jiao-cheng-zhi-1</id>
    <content type="html"><![CDATA[<p>最近在弄一点3D相关的东西，大概有四年没有做3D相关的东西了，也忘得差不多了。我就把最近学到的东西总结一下，记录一下，方便查询。</p>

<p>在iOS上开发3D的东西，有三个选择:OpenGLES,GLKit,Metal. <br></p>

<p>我选择了直接用OpenGLES，因为这样更了解底层。 GLKit也是封装了OpenGLES, Metal则是新出来的苹果3D技术，也学微软了出自己DirectX标准. <br></p>

<p>iOS7就支持OpenGLES 1.0, 2.0，3.0。<br></p>

<p>本系列教程先介绍并学习OpenGLES 1.0，OpenGLES 1.0学完以后，再过渡到2.0, 最后再上3.0.因为学东西要先学基础，再深入，这样更容易。<br></p>

<p>在学习的过程中会用到PowerVR SDK, 大家可以去<a href="http://community.imgtec.com/developers/powervr/installers/">这儿</a>下载并安装。<br></p>

<p>还会用到3D建模工具Blender,也请自行下载。<br></p>

<p>还会用到Blender导出格式为pod的插件与导出格式为collada格式的插件。<br></p>

<p>安装插件的方式，就是将下载好的插件文件复制到以下目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/Applications/Blender/blender.app/Contents/Resources/2.73/scripts/addons/</span></code></pre></td></tr></table></div></figure>


<p>collada格式的插件在<a href="http://sourceforge.net/projects/colladablender/">这儿</a>下载.<br></p>

<p>PowerVR Gen Pod的插件是在以下目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/Applications/Imagination/PowerVR_Graphics/PowerVR_Tools/PVRGeoPOD/Plugins/Blender/OSX_x86/</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意是复制目录下的文件</p></blockquote>

<p>要导出pod，还需要进Blender配置一下。打开blender, 左下角的列表中选择User Preference，在打开的界面中选择Addon，在Import－Export栏中找到Import－Export：PVRGeoPOD，并将其右侧的checkbox选中，保存用户设置。</p>

<p>还不明白的可以看<a href="http://blog.csdn.net/cj_gameboy/article/details/41171171">这儿</a>，有图有真相。</p>

<p>先准备好这些，下一节开始OpenGLES实战。</p>

<p>搞3D,给大家推荐两本书:<br></p>

<p>《iPhone 3D Programming》<br>
《Learning OpenGL ES for iOS》</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java开发记录]]></title>
    <link href="http://www.ifun.cc/blog/2015/03/06/javakai-fa-ji-lu/"/>
    <updated>2015-03-06T15:46:32+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/03/06/javakai-fa-ji-lu</id>
    <content type="html"><![CDATA[<p>最近在写一个小东东，想一次开发同时运行到多个平台上，由于有UI，所以我选择了JSE + SWT. <br></p>

<p>开发功能还好，没有遇到什么问题，Eclipse用一下就熟悉了.<br></p>

<h3>打包</h3>

<p>开发完后要打包，就遇到问题了，我想打成jar包，结果Eclipse自带的export不强，所以只能google打答案。<br>
得到答案是需要一份清单列表。而还需要手功创建，看到后就醉了，不就打个包吗，弄得这么麻烦。没法只有硬上了，手动创建一个名为MANIFEST.MF的文件.<br>
下面是我的清单列表， Class-Path是工程依赖的jar包，然后这些jar包都放到该工程目录下的libs目录下。<br>
Main-Class是你的程序入口文件，即包括Main的文件。 注意Class-Path中每一行前后都有一个空格，最后一行不需要。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Manifest-Version: 1.0
</span><span class='line'>Class-Path: libs/HttpClient/commons-codec-1.6.jar 
</span><span class='line'> libs/HttpClient/commons-logging-1.1.3.jar 
</span><span class='line'> libs/HttpClient/fluent-hc-4.3.6.jar 
</span><span class='line'> libs/HttpClient/httpclient-4.3.6.jar 
</span><span class='line'> libs/HttpClient/httpclient-cache-4.3.6.jar 
</span><span class='line'> libs/HttpClient/httpcore-4.3.3.jar 
</span><span class='line'> libs/HttpClient/httpmime-4.3.6.jar 
</span><span class='line'> libs/gson-2.3.1.jar 
</span><span class='line'> libs/jsoup-1.8.1-sources.jar 
</span><span class='line'> libs/jsoup-1.8.1.jar 
</span><span class='line'> libs/quartz-2.2.1/lib/quartz-2.2.1.jar 
</span><span class='line'> libs/quartz-2.2.1/lib/quartz-jobs-2.2.1.jar 
</span><span class='line'> libs/quartz-2.2.1/lib/slf4j-log4j12-1.6.6.jar 
</span><span class='line'> libs/quartz-2.2.1/lib/slf4j-api-1.6.6.jar 
</span><span class='line'> libs/quartz-2.2.1/lib/log4j-1.2.16.jar 
</span><span class='line'> libs/quartz-2.2.1/lib/c3p0-0.9.1.1.jar 
</span><span class='line'> libs/sqlite-jdbc-3.8.7.jar 
</span><span class='line'> libs/httpcomponents-asyncclient-4.0.2/lib/httpasyncclient-4.0.2.jar 
</span><span class='line'> libs/httpcomponents-asyncclient-4.0.2/lib/httpcore-nio-4.3.2.jar 
</span><span class='line'> libs/os/com.ibm.icu_52.1.0.v201404241930.jar 
</span><span class='line'> libs/os/org.eclipse.core.commands_3.6.100.v20140528-1422.jar 
</span><span class='line'> libs/os/org.eclipse.core.runtime_3.10.0.v20140318-2214.jar 
</span><span class='line'> libs/os/org.eclipse.equinox.common_3.6.200.v20130402-1505.jar 
</span><span class='line'> libs/os/org.eclipse.equinox.registry_3.5.400.v20140428-1507.jar 
</span><span class='line'> libs/os/org.eclipse.jface_3.10.1.v20140813-1009.jar 
</span><span class='line'> libs/os/org.eclipse.jface.text_3.9.1.v20140827-1810.jar 
</span><span class='line'> libs/os/org.eclipse.osgi_3.10.1.v20140909-1633.jar 
</span><span class='line'> libs/os/org.eclipse.swt.cocoa.macosx.x86_64_3.103.1.v20140903-1947.jar 
</span><span class='line'> libs/os/org.eclipse.text_3.5.300.v20130515-1451.jar 
</span><span class='line'> libs/os/org.eclipse.ui.forms_3.6.100.v20140422-1825.jar 
</span><span class='line'> libs/os/org.eclipse.ui.workbench_3.106.1.v20140827-1737.jar
</span><span class='line'>Main-Class: iBot.Main</span></code></pre></td></tr></table></div></figure>


<p>有了这个列表，这下我们来开始打包，直接用命令行吧，一下就打好，包教包会:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jar -cvfm yourjarname.jar MANIFEST.MF -C bin .</span></code></pre></td></tr></table></div></figure>


<p>就这么一行命令打包，是不是很easy呀。首先你要cd到你的工程目录，因为我们要用到下面的bin目录，命令中-C后面有bin看到没？</p>

<p>经过上面一行命令的工作，如果一切顺利，在你工程目录下就多了一个yourjarname.jar文件。</p>

<p>这下就可以运行了，我是在Mac系统下运行，双击jar文件却不能运行，然后试着用用命令运行，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -jar yourjarname.jar</span></code></pre></td></tr></table></div></figure>


<p>结果报错了，说要运行在主线程，没事，我们求万能的google, 最后解决方法是加一个参数:XstartOnFirstThread</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -XstartOnFirstThread -jar ibot.jar</span></code></pre></td></tr></table></div></figure>


<p>jar 包成功运行。</p>

<h3>封装Mac下可运行的app</h3>

<p>参考<a href="https://www.eclipse.org/swt/macosx/">https://www.eclipse.org/swt/macosx/</a> <BR>
做了一点修改，将可运行脚本改为了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>BASEDIR=`dirname $0`
</span><span class='line'>exec java \
</span><span class='line'>        -XstartOnFirstThread \
</span><span class='line'>        -jar $BASEDIR/ibot.jar</span></code></pre></td></tr></table></div></figure>


<p>记录一下创建dmg的命令:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hdiutil create -srcfolder SWTHello SWTHello.dmg
</span><span class='line'>hdiutil internet-enable -yes SWTHello.dmg</span></code></pre></td></tr></table></div></figure>


<h3>加载资源</h3>

<p>程序是由代码加资源文件组成的，比如要读取icon,声间文件。由于我是新手，所以加载资源也把我难住了，幸好万能的Google我还能打开，窃喜！！！</p>

<p>将所有的资源放到src/res目录下，这样方便打包。因为放到src目录下，打包的时候会自动将res目录copy到bin目录下去。bin是编译后的生成文件目录，打包的时候-C后面的bin就是指这个目录。这下你明白没？<br></p>

<p>接着我们在程序中加载资源吧: <br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>String filePath = getClass().getResource("/res/" + "icon.png").getFile();
</span><span class='line'>File icon = new File(filePath);</span></code></pre></td></tr></table></div></figure>


<p>这样就可以了，不过如果打包成jar后，这种方式不能成功获取资源，我们得使用另一个方法，用Stream的方式来获取。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>InputStream is = this.getClass().getResourceAsStream("/res/" + "icon.png"); </span></code></pre></td></tr></table></div></figure>


<p>SWT中加载图片，还可以用JFace中的类:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ImageDescriptor.createFromFile(Main.class, "/res/login.png")；</span></code></pre></td></tr></table></div></figure>


<p>返回的ImageDescriptor正是Action中要用到的。</p>

<h2>参考资料</h2>

<p><a href="http://www.eclipse.org/swt/">http://www.eclipse.org/swt/</a></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[V2EX for iOS源码]]></title>
    <link href="http://www.ifun.cc/blog/2015/02/11/v2ex-for-iosyuan-ma/"/>
    <updated>2015-02-11T17:01:26+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/02/11/v2ex-for-iosyuan-ma</id>
    <content type="html"><![CDATA[<p>业余时间开发的app, V2EX网站iOS原生态App. 感兴趣的可以下来玩玩<br>
<a href="https://itunes.apple.com/cn/app/v2ex-club/id883141469?l=en&amp;mt=8">Appstore</a><br>
<a href="https://github.com/ondev/iV2EX">源码</a></p>

<p>单枪匹马干了这么几年，希望结识各路高手。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress中的rake Generate问题]]></title>
    <link href="http://www.ifun.cc/blog/2015/02/11/octopresszhong-de-rake-generatewen-ti/"/>
    <updated>2015-02-11T14:14:53+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/02/11/octopresszhong-de-rake-generatewen-ti</id>
    <content type="html"><![CDATA[<p>好久没有写博客了，今天想写突然发现rake generate出问题了，可能是系统升级造成的。在此记录一下。</p>

<p>随便我就重新装了一下octopress环境。
以前的环境我是用的rvm安装的ruby，这种方式安装不了最新的ruby,所以我将rvm删了,命令是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm implode</span></code></pre></td></tr></table></div></figure>


<p>接着用brew来安装了最新的ruby</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo brew install ruby</span></code></pre></td></tr></table></div></figure>


<p>然后到Octopress中安装bundler</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem install bundler</span></code></pre></td></tr></table></div></figure>


<p>由于以前我使用的rake 版本是0.9.6,  现在我Mac上的rake版本却是10.4.2, 所以到Gemfile中修改rake版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'rake', '~&gt; 10.4.2'</span></code></pre></td></tr></table></div></figure>


<p>rake版本可以通过下面命令查看</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake -V</span></code></pre></td></tr></table></div></figure>


<p>下面总结一下Octopress 2.0的rake命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["XXX"]  //新建博文
</span><span class='line'>rake new_page["xxx"]  //新建页面
</span><span class='line'>rake install ["theme name"]   //.theme目录下的主题
</span><span class='line'>rake generate   //生成静态html文件
</span><span class='line'>rake preview    //本地浏览 http://127.0.0.1:4000
</span><span class='line'>rake watch    //没用过，不太清楚作用
</span><span class='line'>rake deploy   //发布</span></code></pre></td></tr></table></div></figure>


<p>Octopress 3.0将要发布了，到时候就不用rake命公了，<a href="http://octopress.org/">这儿</a>抢先了解。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下安装GDB]]></title>
    <link href="http://www.ifun.cc/blog/2015/02/10/macxia-an-zhuang-gdb/"/>
    <updated>2015-02-10T16:04:35+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/02/10/macxia-an-zhuang-gdb</id>
    <content type="html"><![CDATA[<ol>
<li>安装<a href="http://brew.sh/">brew</a></li>
<li>安装gdb</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew tap homebrew/dupes
</span><span class='line'>brew install gdb</span></code></pre></td></tr></table></div></figure>


<p>将被安装到/usr/local/bin/gdb
3. 由于Mac不允许随意进入进程空间，要经过许可才可以。如果要用gdb依附进程，那就要对gdb授权才可以。所以需要创建自签证书。下面命令进行授权</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>codesign -s gdb-cert $(which gdb)</span></code></pre></td></tr></table></div></figure>


<p>这下就可以使用GDB了</p>

<p>参考:<a href="http://ntraft.com/installing-gdb-on-os-x-mavericks/">http://ntraft.com/installing-gdb-on-os-x-mavericks/</a></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Objective-C 2.0学习笔记]]></title>
    <link href="http://www.ifun.cc/blog/2015/01/22/effective-objective-c-2-dot-0xue-xi-bi-ji/"/>
    <updated>2015-01-22T10:50:41+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/01/22/effective-objective-c-2-dot-0xue-xi-bi-ji</id>
    <content type="html"><![CDATA[<h3>Item 1</h3>

<p>熟悉C/C++会提高你ObjC的能力 <br></p>

<h3>Item 2</h3>

<p>包括头文件要注意，尽量写到.m中，.h中尽量用预声明 <br></p>

<h3>Item 3</h3>

<p>尽量用ObjC的精简语法来创建NSFoundation</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSNumber *intNumber = @1;
</span><span class='line'>NSNumber *floatNumber = @2.f;
</span><span class='line'>NSNumber *doubleNumber = @3.14;
</span><span class='line'>NSNumber *boolNumber = @YES;
</span><span class='line'>NSNumber *charNumber = @'a'
</span><span class='line'>NSArray *animals = @[@"cat", @"dog", @"mouse", @"badger"];
</span><span class='line'>NSString *dog = animals[1];
</span><span class='line'>NSDictionary *personData = @{@"firstName": @"Matt", @"lastName": @"Galloway", @"age": @28};
</span><span class='line'>NSString *lastName = personData[@"lastName"];</span></code></pre></td></tr></table></div></figure>


<h3>Item 4 尽量用常量代替宏</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static const NSTimeInterval kAnimationDuration = 0.3;</span></code></pre></td></tr></table></div></figure>


<p>//代替</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define ANIMATION_DURATION 0.3</span></code></pre></td></tr></table></div></figure>


<p>static 是为了防止重名重定义，即本文件可见，其它文件不可见，const是为了防止改变其值</p>

<p>.h中extern 定义全局变量，.m中赋值，这样引用.h后就对其变量可见，达到全局变量的效果</p>

<h3>Item 5</h3>

<p>正确使用枚举</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef enum ETest: NSInteger {
</span><span class='line'>  ETest1,
</span><span class='line'>  ETest2
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>等同</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef NS_ENUM(NSInteger, ETest) {
</span><span class='line'>    ETest1,
</span><span class='line'>    ETest2
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>可以使用or运算的optional</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef NS_OPTIONS(NSInteger, ETest) {
</span><span class='line'>    ETest1 = 1 &lt;&lt; 0,
</span><span class='line'>    ETest2 = 1 &lt;&lt; 1
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Item 6</h3>

<p>理解属性
@public</p>

<p>@private</p>

<p>@property声明数据封装</p>

<p>@synthesize 自动生成操作成员变量的方法</p>

<p>@dynamic 手动生成操作成员变量的方法</p>

<p>类属性的一些属性</p>

<p>nonatomic, readwrite, readonly, assign, strong, weak, unsafe_unretained, copy, getter, setter</p>

<h3>Item 7</h3>

<p>类内部实现中最好直接操作类变量，不要用property的方法。</p>

<p>@dynamic自己实现数据封装，能够实现延迟加载</p>

<h3>Item 8 理解对象相等</h3>

<p>比较相等要实现isEqual:与hash方法</p>

<p>两个对象相等那么他们的hash返回的值一定相等，hash返回的值相等，两个对象不一定相等</p>

<p>比较两个对象是否相等，根据需要来比较，并不一定要比较所有的属性</p>

<p>自定义hash方法，一定要快速高效的方法</p>

<h3>Item 9 用类簇隐藏子类的执行细节</h3>

<p>类簇可以隐藏开放接口后的实现细节</p>

<p>类簇常用在系统框架中</p>

<h3>Item 10 给存在的实例依附数据</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void objc_setAssociatedObject(id object, void *key, id value, objc_AssociationPolicy policy);
</span><span class='line'>id objc_getAssociatedObject(id object, void *key);
</span><span class='line'>void objc_removeAssociatedObjects(id object);</span></code></pre></td></tr></table></div></figure>


<p>该方法将两个实例关联起来</p>

<p>内存管理一定要注意</p>

<p>不到万不得已的时候不要用，因为出了问题很难找到原因</p>

<h3>Item 11 理解objc_msgSend</h3>

<p>Objc中方法调用叫发消息，消息是由消息接收者，selector(路由)与参数组成。发送一个消息给接收者同步对应调用一个方法。</p>

<p>调用就是消息查询路由，然后找到执行入口，最好执行。</p>

<h3>Item 12 理解消息走向</h3>

<p>在Item 11中解释了正确情况下的消息走向，接着讲在非正常情况下(即selector不存在的情况下)消息的走向。</p>

<p>如果发送的消息，实例没有对应的selector，那么就会crash并报unrecognized selector send to的错误。</p>

<p>iOS XMPP Framework就运用了这个技巧实现了多代理类</p>

<h3>Item 13 用方法移置来调试,达到hook效果</h3>

<p>Method class_getInstanceMethod(Class aClass, SEL aSelector) 获取方法的method
void method_exchangeImplementations(Method m1, Method m2) 交换两个方法的IMP</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Method originalMethod = class_getInstanceMethod([NSString class],
</span><span class='line'>@selector(lowercaseString));
</span><span class='line'>Method swappedMethod = class_getInstanceMethod([NSString class],
</span><span class='line'>@selector(uppercaseString)); method_exchangeImplementations(originalMethod, swappedMethod);
</span><span class='line'>NSString *string = @"ThIs iS tHe StRiNg";
</span><span class='line'>NSString *lowercaseString = [string lowercaseString]; NSLog(@"lowercaseString = %@", lowercaseString);
</span><span class='line'>// Output: lowercaseString = THIS IS THE STRING
</span><span class='line'>NSString *uppercaseString = [string uppercaseString]; NSLog(@"uppercaseString = %@", uppercaseString);
</span><span class='line'>// Output: uppercaseString = this is the string</span></code></pre></td></tr></table></div></figure>


<p>hook系统方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface NSString (EOCMyAdditions) 
</span><span class='line'>- (NSString*)eoc_myLowercaseString; 
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation NSString (EOCMyAdditions)
</span><span class='line'>- (NSString*)eoc_myLowercaseString {
</span><span class='line'>NSString *lowercase = [self eoc_myLowercaseString]; 
</span><span class='line'>NSLog(@"%@ =&gt; %@", self, lowercase);
</span><span class='line'>return lowercase;
</span><span class='line'>} 
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>Method originalMethod = class_getInstanceMethod([NSString class], @selector(lowercaseString));
</span><span class='line'>Method swappedMethod = class_getInstanceMethod([NSString class], @selector(eoc_myLowercaseString)); 
</span><span class='line'>method_exchangeImplementations(originalMethod, swappedMethod);
</span><span class='line'>
</span><span class='line'>NSString *string = @"ThIs iS tHe StRiNg";
</span><span class='line'>NSString *lowercaseString = [string lowercaseString]; 
</span><span class='line'>// Output: ThIs iS tHe StRiNg =&gt; this is the string</span></code></pre></td></tr></table></div></figure>


<p>路由后的执行入口可以被添加，与可以被改变</p>

<p>Swizzling可以用来丰富原来接口的内容</p>

<p>尽量少用，用来调试不错。</p>

<h3>Item 14 理解类对象</h3>

<p>略</p>

<h3>Item 15 类名前缀，防止重复定义</h3>

<p>略</p>

<h3>Item 16 初始化方法设计</h3>

<p>根据需要设计实现初始化方法</p>

<p>子类中根据需要重写super初始化方法</p>

<p>子类中不需要的父类的初始化方法重写，并在实现中抛出异常</p>

<h3>Item 17 重写description方法</h3>

<p>debugDescription或description</p>

<p>NSLog出来更有可读性，用NSDictionary来format</p>

<h3>Item 18 少用可变类型的属性</h3>

<p>属性对外只读，对内可读写，实现方式是在.h中readonly, 在.m中用readwrite重新声明一下属性</p>

<p>提供方法来操作可变容器，不要直接声明为属性</p>

<h3>Item 19 命名意图清晰</h3>

<p>命名要更像objc</p>

<p>命名要简明，优雅得像一句陈诉句</p>

<p>命名避免缩写</p>

<p>命名风格要一致</p>

<h3>Item 20 私有方法用前缀表明</h3>

<p>前缀私有方法用于区别公有方法</p>

<p>不要用_来做私有方法前缀，因为苹果用了这规则</p>

<h3>Item 21 理解Objc Error Model</h3>

<p>异常是用来处理fatal error的</p>

<p>非fatal error,要用代理或参数方式来自行处理</p>

<h3>Item 22 理解NSCopying协议</h3>

<p>如果想copy，那就一定要执行NSCopying协议</p>

<p>如果有mutable的变量，那么还需要执行NSMutableCopying</p>

<p>区分Shallow copy与Deep copy</p>

<p>建意使用deep copy, 如果需要的话</p>

<h3>Item 23 内部通信使用代理协议与数据协议</h3>

<p>delegate在开发中运用得非常多，这儿不再多说</p>

<h3>Item 24 用Category来拆分类，使其更容易维护</h3>

<p>很容易明白，也不说了</p>

<h3>Item 25 Category中要加前缀，防止出现bug,容易调试</h3>

<p>Category中的类要加前缀</p>

<p>category中方法名要加前缀</p>

<h3>Item 26 Category中避免声明属性</h3>

<p>属性是数据的封装，不能在category中声明属性，编译器会找不到的。</p>

<p>有两种方法可以，一种是在Item 10中介绍的，一种是可以声明readonly的属性，然后手动实现其get方法。</p>

<h3>Item 27 用class-continuation的Category隐藏类的执行(类似private方法)</h3>

<p>class-continuation category与一般的category差不多，只是括号时用写名字。</p>

<p>class-continuation category可以在里面声明属性与方法，也可以遵循protocol，其中的方法相当于私有方法。</p>

<p>可以改变类属性的一些类型，如只读变成可读写</p>

<h3>Item 28 用protocol提供匿名对象</h3>

<p>id加protocol提供匿名类型</p>

<p>如果想隐藏类则可以使用匿名对象</p>

<p>只关心实现了方法，不关心实现细节的时候可以用匿名对象</p>

<h2>5 内存管理</h2>

<h3>Item 29 理解引用计数</h3>

<p>每个对象使用的时候会对其引用次数进行计数。</p>

<p>new出来的对象retainCount为1.</p>

<p>retain对象retainCount加1.</p>

<p>release对象retainCount减1.</p>

<p>autorelease对象retainCount减1.</p>

<p>当retainCount为0的时候，内存被回收。</p>

<p>对象加到容器(如NSArray)中，会对其retain一次，及引用计数加1,记得要平衡retainCount.</p>

<p>避免循环引用</p>

<h3>Item 30 使用ARC管理引用计数</h3>

<p>ARC中将不再手动调用retain,release,autorelease，dealloc等方法了。编译器会自动将这些加入到我们的程序当中。</p>

<p>ARC解放了开发人员对内存的管理，还少写代码。</p>

<p>ARC只能管理ObjC的对象，CoreFoundation object还是得用CFRetain/CFRelease来管理内存</p>

<h3>Item 31 清理与删观察者只放在dealloc中执行</h3>

<p>有dealloc中释放CoreFoundation并去掉观察者</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)dealloc {
</span><span class='line'>    CFRelease(coreFoundationObject);
</span><span class='line'>    [[NSNotificationCenter defaultCenter] removeObserver:self];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如果是MRC, 调用[super dealloc];应放到最后</p>

<p>如果有文件操作，一定要记得close</p>

<h3>Item 32 内存相关记得异常处理</h3>

<p>MRC一定要处理异常处理，方式要正确，@try中需要将释放的工作放到@finally中</p>

<p>ARC要使用-fobjc-arc-exceptions来开启异常处理，不过使用异常处理会降低运行效率</p>

<p>如果有很多异常处理，建意使用NSError的方式来处理</p>

<h3>Item 33 使用弱引用避免循环引用</h3>

<p>循环引用就是A对象拥有B对象，B对象拥有A对象，当A想释放的时候，等待B释放，这时B却又要等待A释放完才释放完才释放，这样两个对象相互等待，却一直释放不了。</p>

<p>用weak或unsafe_unretained声明属性就可以了。</p>

<p>weak比unsafe_unretained更安全</p>

<h3>Item 34 使用Autorelease Pool来管理地高内存分配</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSArray *databaseRecords = /* ... */;
</span><span class='line'>NSMutableArray *people = [NSMutableArray new]; for (NSDictionary *record in databaseRecords) {
</span><span class='line'>@autoreleasepool { 
</span><span class='line'>EOCPerson *person =
</span><span class='line'>[[EOCPerson alloc] initWithRecord:record];
</span><span class='line'>[people addObject:person];
</span><span class='line'>} 
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如上面的代码，如果NSArray有10000个对象，那么就可以加一个autoreleasepool，这样可以实时的进行内存回收。</p>

<h3>Item 35 使用Zombies来调试内存问题</h3>

<p>内存分配给对象，然后对象被释放。如果该对象内存没有被重写，那么再次向该对象发送消息，也是可以成功执行的。如果被重写了，那么就会崩溃。</p>

<p>所以会出现有时候crash,有时候正常运行，给程序调试与bug排除带来不便。所以我们可以开启Zombies（僵尸对象）。</p>

<p>它将所有释放了的对象放到放到一个Zombies区，内存也不释放也不被重写，这样标记它是一个僵尸对象。如果程序再次向僵尸对象发送消息，那么就会在控制台打出消息提供开发人员，方向开发人员定位排除bug.</p>

<h3>Item 36 避免使用retainCount</h3>

<p>如果用MRC,开发过程中，中心有retainCount的概念平衡retainCount就可以。代码中一定不要用retainCount来做判断，因为是根据runtime autorelease等决定的。所以release一个对象retainCount不是马上改变。如下面的代码就是错误的，是一个死循环。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>while([obj retainCount]) {
</span><span class='line'>    [obj release];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>6 块与GCD</h2>

<h3>Item 37 理解块代码</h3>

<p>匿名block</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>^{
</span><span class='line'>    //Block代码
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>声明block</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void (^someBlock)() = ^ {
</span><span class='line'>    //Block代码
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Block声明后，作用域以外的地方是不可见的。如以下代码:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void (^block)();
</span><span class='line'>if (/*condition*/) {
</span><span class='line'>    block = ^{
</span><span class='line'>        NSLog("Test block A");
</span><span class='line'>    }
</span><span class='line'>} else {
</span><span class='line'>    block = ^{
</span><span class='line'>        NSLog("Test block B");
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>block();</span></code></pre></td></tr></table></div></figure>


<p>以上代码是有问题的，因为是block的内存是在栈上分配的，出了作用域编译器就会重写栈，所有可能会crash.解决方法是加一个copy， 将内存放到堆上去。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void (^block)();
</span><span class='line'>if (/*condition*/) {
</span><span class='line'>    block = [^{
</span><span class='line'>        NSLog("Test block A");
</span><span class='line'>    } copy]
</span><span class='line'>} else {
</span><span class='line'>    block = [^{
</span><span class='line'>    NSLog("Test block B");
</span><span class='line'>    } copy]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>block();</span></code></pre></td></tr></table></div></figure>


<p>Block内存管理与一般对象一样的。</p>

<h3>Item 38 用typedef定义Block类型</h3>

<p>声明block的格式如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type (^blockName)(parameters);</span></code></pre></td></tr></table></div></figure>


<p>使用typedef可以让Block与一般类型一样，使用非常方便。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef void(^EOCCompletionHandler)(NSData *data, NSError *error);
</span><span class='line'>
</span><span class='line'>- (void)startWithCompletionHandler:(EOCCompletionHandler)completion;</span></code></pre></td></tr></table></div></figure>


<p>可见使用typedef让block的使用更加简单</p>

<h3>Item 39 使用Block可以减少代码分很开的弊端</h3>

<p>回调方法以前都用Delegate, 可以试试用Block的方式。 用过的人都知道。</p>

<h3>Item 40 使用Block的时候注意循环引用</h3>

<p>特别注意Block引用self, 可能会循环引用</p>

<h3>Item 41 Dispatch Queues异步锁</h3>

<p>有三种方式使共享资源多线程安全:<br></p>

<h4>使用 @synchronized</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)synchronizedMethod { 
</span><span class='line'>  @synchronized(self) {       // Safe } }</span></code></pre></td></tr></table></div></figure>


<h4>使用 NSLock</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>_lock = [[NSLock alloc] init];
</span><span class='line'>- (void)synchronizedMethod { 
</span><span class='line'>  [_lock lock];   // Safe [_lock unlock]; }</span></code></pre></td></tr></table></div></figure>


<h4>使用 Dispatch Queues</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>_syncQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);- (NSString*)someString { __block NSString *localSomeString; dispatch_sync(_syncQueue, ^{ localSomeString = _someString; });  return localSomeString; 
</span><span class='line'>}
</span><span class='line'>- (void)setSomeString:(NSString*)someString {     dispatch_barrier_async(_syncQueue, ^{   _someString = someString; });￼}</span></code></pre></td></tr></table></div></figure>


<h3>42 GCD方式的performSelector</h3>

<p>延迟执行一般方式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[self performSelector:@selector(doSomething) withObject:nilafterDelay:5.0];</span></code></pre></td></tr></table></div></figure>


<p>GCD方式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dispatch_time_t time = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5.0 * NSEC_PER_SEC));dispatch_after(time, dispatch_get_main_queue(), ^(void){  [self doSomething];});</span></code></pre></td></tr></table></div></figure>


<p>主线程执行一般方式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[self performSelectorOnMainThread:@selector(doSomething) withObject:nil waitUntilDone:NO];</span></code></pre></td></tr></table></div></figure>


<p>GCD方式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dispatch_async(dispatch_get_main_queue(), ^{ [self doSomething]; 
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>ARC方式下的performSelector非常危险，因为是运行时决定的，所以ARC不能在编译的时候对内存进行管理。返回值与参数都有局限。</p>

<h3>43 什么时候用GCD，什么时候用Operation Queues</h3>

<p>GCD是纯C的API, Operation Queues是Objective C. Operation Queues也有像GCD方式的调用，如NSBlockOperation或NSOperationQueue的addOperationWithBlock， Operation Queues还有以下优点：</p>

<h4>取消队列</h4>

<p>NSOperation的cancel方法可以设置一个取消标志，告诉NSOperation不再运行。而GCD一但运行，就没法取消。</p>

<h4>队列依赖</h4>

<p>一个消息队列可以依赖其它消息队列，比如下载服务器文件与处理文件两个队列，处理队列依赖下载队列，因为只有下载完后，才能处理文件。</p>

<h4>队列的属性可以使用KVO</h4>

<p>可以用KVO的方式检测队列的状态</p>

<h4>队列优先级</h4>

<p>可以用Queues中的每一个NSOperation设置一个优先级，GCD只能对整个队列设置优先级，不但单独对每一个block设置优先级。Operations也可以设置在线程上运行的优先级，同时GCD也可以。</p>

<h4>队列重用</h4>

<p>Operation的类可以直接重用</p>

<p>GCD并不是唯一的多线程与任务管理方案。Operation提供灵活的方式来实现与GCD相关的功能。</p>

<h3>44</h3>

<p>待续</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoapods国内速度问题]]></title>
    <link href="http://www.ifun.cc/blog/2014/12/03/cocoapodsguo-nei-su-du-wen-ti/"/>
    <updated>2014-12-03T12:48:56+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/12/03/cocoapodsguo-nei-su-du-wen-ti</id>
    <content type="html"><![CDATA[<p>1.使用淘宝的gem镜像</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem sources --remove https://rubygems.org/
</span><span class='line'>gem sources -a http://ruby.taobao.org/</span></code></pre></td></tr></table></div></figure>


<p>2.使用国内的Cocoapods镜像</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod repo remove master
</span><span class='line'>pod repo add master https://gitcafe.com/lloydsheng/Specs.git
</span><span class='line'>pod repo update</span></code></pre></td></tr></table></div></figure>


<p>3.不用每次install/update更新Cocoapods Specs</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod install --verbose --no-repo-update
</span><span class='line'>pod update --verbose --no-repo-update</span></code></pre></td></tr></table></div></figure>


<p>如果想自己搞一个镜像，<a href="http://lloydsheng.com/post/setup-cocoapods-mirror">这儿</a>有方法可以参考</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSOpenDev配置]]></title>
    <link href="http://www.ifun.cc/blog/2014/09/22/iosopendevpei-zhi/"/>
    <updated>2014-09-22T16:43:25+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/09/22/iosopendevpei-zhi</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<h3>配置</h3>

<p>首先我们安装iOSOpenDev, 直接下载最新的进行安装，如果有错，可以参看<a href="https://github.com/kokoabim/iOSOpenDev/wiki/Troubleshoot">这儿</a>。</p>

<p>越狱开发需要TheOS环境，而iOSOpenDev也是建立在TheOS的基础上的，只不过用iOSOpenDev我们就可以使用我们熟悉的Xcode进行开发了。所以我们还需要安装TheOS.打开命令行，直接运行下面命令进行安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export THEOS=/opt/theos
</span><span class='line'>git clone git://github.com/DHowett/theos.git $THEOS</span></code></pre></td></tr></table></div></figure>


<p>利用iOSOpenDev, 我们只需要简单command+shift+i就可以将程序布置到设备上了。这个过程需要ssh连接，所以我们还需要配置ssh钥匙对。只需要一条命令即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iosod sshkey -h 192.168.1.1</span></code></pre></td></tr></table></div></figure>


<p>192.168.1.1是你设备的地址，记住，你设备上一定要开启ssh哦。</p>

<p>iOSOpenDev的官方文档都在<a href="https://github.com/kokoabim/iOSOpenDev/wiki/_pages">这儿</a>，你可以再研究研究。</p>

<p>接下来，我们需要dump出来的iOS header, 比如我们要hook SpringBoard. 大家可以自行dump出header，也可以到网上下载已经dump好了的。我就是直接<a href="https://github.com/MP0w/iOS-Headers">这儿</a>下载的。将下载好的头文件放到/opt/theos/include目录下。</p>

<h3>Hello Word</h3>

<p>现在一切都准备好了，那我们来进行我们的Hello Word.
创建一个logos Tweak工程。接着在Build Settings中iOSOpenDevDevice设置为自己设备的IP地址，设备与你的Mac要在一个局域网内。</p>

<p>由于我们需要引用头文件，所以还需要在Build Settings中将Header Search Paths中加一行/opt/theos/include</p>

<p>下面我们实现hook SpringBoard，当SPringBoard启动的时候，我们就弹出一个Alert.</p>

<p>在.xm中加以下代码.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;SpringBoard/SpringBoard.h&gt;
</span><span class='line'>
</span><span class='line'>%hook SpringBoard
</span><span class='line'>
</span><span class='line'>- (void)applicationDidFinishLaunching:(id)application {
</span><span class='line'>    %orig;
</span><span class='line'>    
</span><span class='line'>    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Welcome"
</span><span class='line'>                                                    message:@"Welcome to your iPhone!"
</span><span class='line'>                                                   delegate:nil
</span><span class='line'>                                          cancelButtonTitle:@"Thanks" 
</span><span class='line'>                                          otherButtonTitles:nil];
</span><span class='line'>    [alert show];
</span><span class='line'>    [alert release];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>%end</span></code></pre></td></tr></table></div></figure>


<p>由于用到了UIAlertView属于UIKit的东西，所以我们要链接UIKit.framework, 还有hook的库文件libsubstrate.dylib(在opt/iOSOpenDev/lib目录下面)。</p>

<p>中以command+B进行编译，一定会报错，下面列出我遇到的错。</p>

<p>1.找不到NSObject.h <br>
将#import &ldquo;NSObject.h&rdquo; 改为#import &lt;NSFoundation/NSObject.h>
2.一些不能识别的数据类型，我将期改为id类型。</p>

<p>进行一些修改，直到编译不报错为止。</p>

<p>Command+Shift+i  将程序布署到设备上，SpringBoard会重启，重启后是不是看到Alert？ 没看到？ 那你一定哪儿错了，重新再来一遍吧，如果还不行，那我也帮不了你，只有去求神了。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Auto Layout的坑]]></title>
    <link href="http://www.ifun.cc/blog/2014/07/23/shi-yong-auto-layoutde-keng/"/>
    <updated>2014-07-23T17:40:05+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/07/23/shi-yong-auto-layoutde-keng</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>最近在研究iOS8, 用beta版的xcode创建了一个swift项目，由于iOS8加入了size classes的概念，所以当然要用这先进东西了。</p>

<p>创建了一个tabbar的工程，试着在storyboard中研究它，发于UITextView这个控件在w(Compact), h(Regular)iPhone竖屏的情况下，字符显示不完整（如下图所以，好像UITextView的frame比较小）。最开始以为是constraints的问题，仔细看了一下，没有发现constraints有问题。
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1eimvr8u4eoj20v40zo75u.jpg" alt="" /><br></p>

<p>由于强迫症严重，所以总感觉这样不太对。 最后终于找到了，原来是没有设置Editable属性。只需要在storyboard属性栏中将其勾中就ok了。</p>

<p><img src="http://ww2.sinaimg.cn/large/6bf526ffgw1eimvucfa68j20eq0go767.jpg" alt="" /> <br></p>

<p>下在是不是看着顺眼多了？ ^V^</p>

<p><img src="http://ww1.sinaimg.cn/large/6bf526ffgw1eimvvwb33aj20t20v0dhf.jpg" alt="" /> <br></p>

<p>然后我试着运行工程，看结果，发现第二个tab中UITextView中的字符不见了。
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1eimvz0q0xwj20gw0vo0ta.jpg" alt="" /> <br>
这是为什么呢？</p>

<p>经研究发现是constraints的Placeholder属性勾中了。<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1eimw0ph1taj20dy0ceab9.jpg" alt="" /> <br></p>

<p>Placeholder就是占位的意思，在编译的时候就会去掉这个Constraint. 由于去掉了Constraint,那么就不无决定它的frame, 结果就显示不出来了。</p>

<p>有了这个属性，那么就可以在storyboard或xib中先用了个constraints来占位，可以去掉警告， 方便代码加Constraints的朋友使用。</p>

<p>虽然用Auto Layout有一段时间了，但是这些细节还不是很清楚，还得慢慢吸收。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Jailbreak Dev准备工作]]></title>
    <link href="http://www.ifun.cc/blog/2014/07/11/ios-jailbreak-devzhun-bei-gong-zuo/"/>
    <updated>2014-07-11T16:58:09+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/07/11/ios-jailbreak-devzhun-bei-gong-zuo</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>安全越来越重要了，所以我也在开始着手研究iOS安全。iOS的安全很大一部份是在iOS越狱的基础上进行的，所以对基设备进行越狱，并准备向安全领域进军。</p>

<p>1.iOS越狱设备，这我就不多说了,(有风险，自行承担)
2.在iOS越狱设备上安装openssh, SBSettings, BigBoss Recommended tools, MobileTerminal,这些可以通过Cydia安装</p>

<p>下面安装clutch,class-dump-z</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh root@you ios device ip
</span><span class='line'>apt-get upgrade
</span><span class='line'>wget http://networkpx.googlecode.com/files/class-dump-z_0.2a.tar.gz
</span><span class='line'>tar -xvzf class-dump-z_0.2a.tar.gz
</span><span class='line'>cd iphone_armv6
</span><span class='line'>cp class-dump-z /usr/bin
</span><span class='line'>chmod 777 /usr/bin/class-dump-z</span></code></pre></td></tr></table></div></figure>


<p>可以用sftp将clutch上传到iOS设备里。Clutch在<a href="https://github.com/KJCracks/Clutch">这儿</a>哦</p>

<p>从appstore上下载的app是加了密的，加了密的app，class-dump-z就无能为力了，所以需要clutch将基解密。</p>

<p>以2048为例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>clutch 2048
</span><span class='line'>cd /User/Documents/Cracked
</span><span class='line'>unzip /User/Documents/Cracked/2048.ipa -d 2048
</span><span class='line'>class-dump-z 2048/Payload/2048.app/2048 &gt; class-info-2048</span></code></pre></td></tr></table></div></figure>


<p>3.在Mac上安装theOS,iOSOpenDev,Cycript</p>

<p>就这些了，以后再加用到的。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义iOS上双击Home键App切屏]]></title>
    <link href="http://www.ifun.cc/blog/2014/07/10/zi-ding-yi-iosshang-shuang-ji-homejian-appqie-ping/"/>
    <updated>2014-07-10T16:34:06+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/07/10/zi-ding-yi-iosshang-shuang-ji-homejian-appqie-ping</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>在iOS7上，如果双击Home，会来到iOS App的switcher页面，在这儿列出了当前系统挂起的App, 上面有每个App的切屏，相信大家都熟悉这个东东了。它其实是每个App在挂起前，对App截屏。</p>

<p>那么我们如何自定义它在App Switcher上的展示呢，明白了它其实是对App的截屏，那么在它快进入后台的时候，我们改变其外观，那么截下来的图片，不就改变了吗？</p>

<p>明白这个原理后，那我们就试一试。</p>

<p>新建一个工程，准备三张图片，Defautl.png, Defautl@2x.png, Default-568h@2x.png,  将其放进工程。</p>

<p>我们在AppDelegate.h中声明一个UIImageView变量</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface AppDelegate : UIResponder &lt;UIApplicationDelegate&gt; {
</span><span class='line'>    UIImageView *screenShotView;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@property (strong, nonatomic) UIWindow *window;
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>接着在AppDelegate中加入以下代码:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)applicationWillResignActive:(UIApplication *)application
</span><span class='line'>{
</span><span class='line'>    if (!screenShotView) {
</span><span class='line'>        screenShotView = [[UIImageView alloc]initWithFrame:[self.window frame]];
</span><span class='line'>        [screenShotView setImage:[UIImage imageNamed:@"Default-568h"]];
</span><span class='line'>        [self.window addSubview:screenShotView];
</span><span class='line'>    }
</span><span class='line'>    screenShotView.alpha = 1;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)applicationDidBecomeActive:(UIApplication *)application
</span><span class='line'>{
</span><span class='line'>    screenShotView.alpha = 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>先在模拟器上删除以app,然后再点xcode run.  双击Home, 这下你是不是在App Switcher中看到了你的Default的图片，将上面的代码中Default-568h改为其它图片, 这样达到了自定义目的, 是不是太简单了呀？</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个基于Nodejs的简单iOS MDM服务]]></title>
    <link href="http://www.ifun.cc/blog/2014/07/08/%5B%3F%5D-ge-ji-yu-nodejsde-jian-dan-ios-mdmfu-wu/"/>
    <updated>2014-07-08T18:57:37+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/07/08/[?]-ge-ji-yu-nodejsde-jian-dan-ios-mdmfu-wu</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>如果有效的管理自己的iOS移动设备，苹果为我们提供了MDM技术。最近小弟在研究它，有一点小经验，写了一个简单的iOS MDM服务, 服务器采用Nodejs＋Mongodb.</p>

<p>大家可以试用一下,请直接<a href="https://www.sohoin.com">猛击这儿</a>(记得用设备的safari打开)进入。</p>

<p>首先需要大家注册一个帐号，密码与帐号是管理你设备所需的。</p>

<p>登陆进系统后，会有两步需要你完成，一是点击安装mdm描述文件，安装成功后请进行第二步，安装udid获取描述文件，第二步会获取你设备UDID, 并加入到你的管理列表中，这样你以后就可以对其进行管理。</p>

<p>完成上面两步后就可以看到下面多了两列命令，一个是锁屏，一个是清除密码。目前只支持这两个命令，后续会慢慢加入。</p>

<p>界在很丑呀，有空美化一下，换衣大家提意见。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu Apache的一些配置]]></title>
    <link href="http://www.ifun.cc/blog/2014/06/17/ubuntu-apachede-%5B%3F%5D-xie-pei-zhi/"/>
    <updated>2014-06-17T17:35:10+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/06/17/ubuntu-apachede-[?]-xie-pei-zhi</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004
开发过程中需要解决的问题，然后记录解决方法。</p></blockquote>

<h3>1.ubuntu配置虚拟主机</h3>

<p>apache2虚拟主机的好处是可以在一台服务器上，一个端口上建立多个站点<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /etc/apache2/sites-available
</span><span class='line'>cp default test.com</span></code></pre></td></tr></table></div></figure>


<p>然后vim打开test.com
主要有三处修改</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DocumentRoot /var/www/test.com
</span><span class='line'>ServerName www.test.com
</span><span class='line'>&lt;Directory /var/www/test.com&gt;
</span><span class='line'>                Options Indexes FollowSymLinks MultiViews
</span><span class='line'>                AllowOverride None
</span><span class='line'>                Order allow,deny
</span><span class='line'>                allow from all
</span><span class='line'>&lt;/Directory&gt;</span></code></pre></td></tr></table></div></figure>


<p>然后保存修改<br></p>

<p>下面命令就enable这个虚拟主机<BR></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo a2ensite test.com</span></code></pre></td></tr></table></div></figure>


<p>接下来重启我们的apache2<BR></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /etc/init.d/apache2 restart</span></code></pre></td></tr></table></div></figure>


<p>这下就可以通过www.test.com（你自己的域名）访问/var/www/test.com下的站点内容了。</p>

<p>disable这个虚拟主机的命令是:<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo a2dissite test.com</span></code></pre></td></tr></table></div></figure>


<h3>2.ubuntu apache启用SSL</h3>

<p>在上面我们介绍了配置虚拟主机，接着，如果我想对这个虚拟主机加入ssl功能如何办呢，其实方法很简单。假设你已经有了证书与私钥，分别是server.crt与server.key.</p>

<p>那么，我们只需要修改/etc/apache2/sites-available/test.com这个文件。<br></p>

<p>加入以下代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># SSL
</span><span class='line'>SSLEngine On
</span><span class='line'>SSLCertificateFile /etc/apache2/ssl/server.crt
</span><span class='line'>SSLCertificateKeyFile /etc/apache2/ssl/server.key</span></code></pre></td></tr></table></div></figure>


<p>就是你服务器上对应的两个文件路径<br></p>

<p>接着重启apache2生效：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /etc/init.d/apache2 restart</span></code></pre></td></tr></table></div></figure>


<p>这下就需要 <a href="https://www.test.com">https://www.test.com</a><br>来访问你的站点了。</p>

<h3>3.ubuntu apache与nodejs共享80端口</h3>

<p>首先我们要开启proxy模块<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo a2enmod proxy_http
</span><span class='line'>sudo a2enmod proxy</span></code></pre></td></tr></table></div></figure>


<p>如果想关闭则用a2dismod命令,如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo a2dismod proxy</span></code></pre></td></tr></table></div></figure>


<p>配置一个虚拟主机：<br>
假如nodejs的源码放在/home/weixin目录下<br>
那下面是一个简单的示例配置:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>  ServerAdmin admin@gmail.com
</span><span class='line'>  ServerName www.test.com
</span><span class='line'> 
</span><span class='line'>  ProxyRequests off
</span><span class='line'> 
</span><span class='line'>  &lt;Proxy *&gt;
</span><span class='line'>    Order deny,allow
</span><span class='line'>    Allow from all
</span><span class='line'>  &lt;/Proxy&gt;
</span><span class='line'> 
</span><span class='line'>  &lt;Location /&gt;
</span><span class='line'>    ProxyPass http://localhost:8001/
</span><span class='line'>    ProxyPassReverse http://localhost:8001/
</span><span class='line'>  &lt;/Location&gt;
</span><span class='line'> 
</span><span class='line'>  DocumentRoot /home/weixin
</span><span class='line'>  &lt;Directory "/home/weixin"&gt;
</span><span class='line'>    AllowOverride All
</span><span class='line'>  &lt;/Directory&gt;
</span><span class='line'> 
</span><span class='line'>  ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
</span><span class='line'>  &lt;Directory "/usr/lib/cgi-bin"&gt;
</span><span class='line'>    AllowOverride None
</span><span class='line'>    Options ExecCGI -MultiViews +SymLinksIfOwnerMatch
</span><span class='line'>    Allow from all
</span><span class='line'>  &lt;/Directory&gt;
</span><span class='line'>
</span><span class='line'>  ErrorLog /var/log/apache2/error.log
</span><span class='line'>  # Possible values include: debug, info, notice, warn, error, crit,
</span><span class='line'>  # alert, emerg.
</span><span class='line'>  LogLevel warn
</span><span class='line'>  CustomLog /var/log/apache2/access.log combined
</span><span class='line'>  ServerSignature On
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>接着重启apache2生效：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /etc/init.d/apache2 restart</span></code></pre></td></tr></table></div></figure>


<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa触发方法调用的几种方法]]></title>
    <link href="http://www.ifun.cc/blog/2014/06/14/cocoahong-fa-fang-fa-diao-yong-de-ji-chong-fang-fa/"/>
    <updated>2014-06-14T09:38:40+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/06/14/cocoahong-fa-fang-fa-diao-yong-de-ji-chong-fang-fa</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>今天周未，有点空闲时间，小结一下Cocoa中触发方法调用的几种方法。</p>

<h3>1.SEL触发</h3>

<p>SEL就是selector的缩写，它表示Cocoa中的方法选择器，不明白？那请仔细了解Objective_C的运行时机制与Cocoa底层思想。 <br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SEL theSelector = @selector(methodWithInt:andInt:);</span></code></pre></td></tr></table></div></figure>


<p>看了上面代码这下你明白了什么是SEL了吧，平时我们开发当中经常用到的。<br>
有了SEL这样就可以触发方法调用了,<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[self performSelector:theSelector]
</span><span class='line'>[self performSelector:@selector(methodWithInt:andInt:)];</span></code></pre></td></tr></table></div></figure>


<p>上面两句代码是同一个道理。<br></p>

<h3>2. IMP触发</h3>

<p>IMP其实就是一个函数指针的概念，就可以这么简单理解。<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IMP theImplementation = [self methodForSelector:theSelector]; </span></code></pre></td></tr></table></div></figure>


<p>上面这句代码就是获取methodWithInt:andInt:这个方法的地址。<br>
有了这个函数指针后，我们就可以触发方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>theImplementation(self, theSelector, 30, 5);</span></code></pre></td></tr></table></div></figure>


<p>第一个是对象，第二个SEL， 后面的传入的参数。</p>

<h3>3. objc_msgSend方法</h3>

<p>这是Objc运行时的一个C方法，我们先看一个示列:<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>objc_msgSend(self, @selector(fly)); </span></code></pre></td></tr></table></div></figure>


<p>这行代码等价于<br></p>

<p>[self fly];</p>

<h3>4. NSInvocation</h3>

<p>NSInvocation相比上面几种方法，可以动态决定传入的参数个数。有了它，我们就可以实现&hellip;这样的变参API封装。<br>
说得有点抽像，看代码更清楚:<br></p>

<p>假如我们实现了一个两个数相加的方法，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(void)addNSNumber:(NSNumber *)first withNumber:(NSNumber *)second</span></code></pre></td></tr></table></div></figure>


<p>我们可以用下面的方法来触发这个方法，并获取返回值。<BR></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSNumber *)testAdd {
</span><span class='line'>  NSNumber *retval;
</span><span class='line'> 
</span><span class='line'>  NSNumber *arg1 = [NSNumber numberWithDouble:15.0];
</span><span class='line'>  NSNumber *arg2 = [NSNumber numberWithDouble:13.0];
</span><span class='line'> 
</span><span class='line'>  SEL selector = @selector(addNSNumber:withNumber:);
</span><span class='line'> 
</span><span class='line'>  NSMethodSignature *sig = [self  methodSignatureForSelector:selector];
</span><span class='line'>  NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:sig];
</span><span class='line'> 
</span><span class='line'>  [invocation setTarget:self];
</span><span class='line'>  [invocation setSelector:selector];
</span><span class='line'>  [invocation setArgument:(void *)&arg1 atIndex:2];
</span><span class='line'>  [invocation setArgument:(void *)&arg2 atIndex:3];
</span><span class='line'>  [invocation invoke];
</span><span class='line'> 
</span><span class='line'>  if ([sig methodReturnLength]) {
</span><span class='line'>      [invocation getReturnValue:&retval];
</span><span class='line'>      return retval;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  return nil;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>代码很容易理解，我也不多做解释，有不明白的请留言。<br></p>

<p>下面是变参封装, 写了两个NSObject的Extension（Category）:<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ (NSInvocation *)createInvocationOnTarget:(id)target selector:(SEL)selector {
</span><span class='line'>  return [NSObject createInvocationOnTarget:target selector:selector withArguments:nil];
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>+ (NSInvocation *)createInvocationOnTarget:(id)target selector:(SEL)selector withArguments:(id)arg1, ... {
</span><span class='line'>  NSMethodSignature *sig = [target methodSignatureForSelector:selector];
</span><span class='line'>  NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:sig];
</span><span class='line'> 
</span><span class='line'>  [invocation setTarget:target];
</span><span class='line'>  [invocation setSelector:selector];
</span><span class='line'> 
</span><span class='line'> 
</span><span class='line'> 
</span><span class='line'>  if(arg1) {
</span><span class='line'>      va_list args;
</span><span class='line'>      va_start(args, arg1);
</span><span class='line'> 
</span><span class='line'>      [invocation setArgument:(void *)&arg1 atIndex:2];
</span><span class='line'> 
</span><span class='line'>      id obj;
</span><span class='line'>      int ct = 3;
</span><span class='line'> 
</span><span class='line'>      while( obj = va_arg(args, id) ) {
</span><span class='line'>          NSLog(@"%@", obj);
</span><span class='line'>          [invocation setArgument:(void *)&obj atIndex:ct];
</span><span class='line'> 
</span><span class='line'>          ct++;
</span><span class='line'>      }
</span><span class='line'> 
</span><span class='line'>      va_end(args);
</span><span class='line'>  }
</span><span class='line'> 
</span><span class='line'> 
</span><span class='line'>  return invocation;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>调用方法:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSInvocation *invocation = [NSObject createInvocationOnTarget:mathInstance selector:selector withArguments: arg1, arg2, nil]; 
</span><span class='line'> 
</span><span class='line'>[invocation invoke];
</span><span class='line'>[invocation getReturnValue:&retval];
</span><span class='line'> 
</span><span class='line'>return retval;</span></code></pre></td></tr></table></div></figure>


<p>目前只了解这些方法，如果你有更多的方法，还望提醒<br></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8 APP国际化]]></title>
    <link href="http://www.ifun.cc/blog/2014/06/07/ios8-appguo-ji-hua/"/>
    <updated>2014-06-07T21:31:53+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/06/07/ios8-appguo-ji-hua</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>1.创建一个Localizable.strings文件 <br>
2.code中用字符串的地方使用NSLocalizedString，这与系统语言相关 <br>
3.时间显示，数字，金融与地区相关，所以需要各类NSFormater, 如NSDateFormatter, NSNumberFormatter &hellip; <br>
3.用命令将所有NSLocalizedString返回的字符串格式化到Localizable.strings里。命令行进入工程目录（我的工程名是LocalizationTest），运行下面命令：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find ./ -name "*.m" -print0 | xargs -0 genstrings -o LocalizationTest/en.lproj</span></code></pre></td></tr></table></div></figure>


<p>4.这下就将Localizable.strings拿给翻译的人 <br></p>

<p>上面是iOS7以下国际化的方法。</p>

<p>在iOS8中加入了一种国际通用的xliff文件，全称是 Localisation Interchange File Format（本地化交换文件格式，是xml文件）， 里面就是需要翻译的东西。打开xliff文件，里面<source></source>标签中是表示要翻译的东西，对应Localizable.strings中=号左边的字符串，<target></target>中是每种语言的翻译，对应Localizable.strings中=号右边的字符串。没有一个source标签对应一个target标签。</p>

<p>选中Editor &ndash;> Export For Localization就可以导出需要翻译的字符串，它会遍历整个工程，将xib，stroryboard, 代码中需要本地化字符串导出到.xliff文件中。小伙伴们再也不需要手动输入上面的命令将NSLocalizedString对应的需要翻译的字符串输出到Localizable.strings里了。 Import Localizations就是导入翻译的字符串，并自动刷新xib，.strings， storyboard中本地化文件 <br></p>

<p>同时Xcode6加入了 语言Debug方式，以前测试国际化，都是修改系统的语言，然后运行程序，现在在xcode中的target的scheme中就可以修改该target运行时的语言。  这样就不需要到系统设置里去设置，更简单高效。<br></p>

<p>同时xcode storyboard的预览功能更加强大了，可以实时修改预览的语言。<br></p>

<p>开发越来越方便了。<br></p>

<p>继续写代码，改变世界。<br></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
</feed>
