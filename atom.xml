<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Haven's Blog]]></title>
  <link href="http://www.ifun.cc/atom.xml" rel="self"/>
  <link href="http://www.ifun.cc/"/>
  <updated>2015-02-11T14:37:36+08:00</updated>
  <id>http://www.ifun.cc/</id>
  <author>
    <name><![CDATA[Haven]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress中的rake Generate问题]]></title>
    <link href="http://www.ifun.cc/blog/2015/02/11/octopresszhong-de-rake-generatewen-ti/"/>
    <updated>2015-02-11T14:14:53+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/02/11/octopresszhong-de-rake-generatewen-ti</id>
    <content type="html"><![CDATA[<p>好久没有写博客了，今天想写突然发现rake generate出问题了，可能是系统升级造成的。在此记录一下。</p>

<p>随便我就重新装了一下octopress环境。
以前的环境我是用的rvm安装的ruby，这种方式安装不了最新的ruby,所以我将rvm删了,命令是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm implode</span></code></pre></td></tr></table></div></figure>


<p>接着用brew来安装了最新的ruby</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo brew install ruby</span></code></pre></td></tr></table></div></figure>


<p>然后到Octopress中安装bundler</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem install bundler</span></code></pre></td></tr></table></div></figure>


<p>由于以前我使用的rake 版本是0.9.6,  现在我Mac上的rake版本却是10.4.2, 所以到Gemfile中修改rake版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'rake', '~&gt; 10.4.2'</span></code></pre></td></tr></table></div></figure>


<p>rake版本可以通过下面命令查看</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake -V</span></code></pre></td></tr></table></div></figure>


<p>下面总结一下Octopress 2.0的rake命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["XXX"]  //新建博文
</span><span class='line'>rake new_page["xxx"]  //新建页面
</span><span class='line'>rake install ["theme name"]   //.theme目录下的主题
</span><span class='line'>rake generate   //生成静态html文件
</span><span class='line'>rake preview    //本地浏览 http://127.0.0.1:4000
</span><span class='line'>rake watch    //没用过，不太清楚作用
</span><span class='line'>rake deploy   //发布</span></code></pre></td></tr></table></div></figure>


<p>Octopress 3.0将要发布了，到时候就不用rake命公了，<a href="http://octopress.org/">这儿</a>抢先了解。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下安装GDB]]></title>
    <link href="http://www.ifun.cc/blog/2015/02/10/macxia-an-zhuang-gdb/"/>
    <updated>2015-02-10T16:04:35+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/02/10/macxia-an-zhuang-gdb</id>
    <content type="html"><![CDATA[<ol>
<li>安装<a href="http://brew.sh/">brew</a></li>
<li>安装gdb</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew tap homebrew/dupes
</span><span class='line'>brew install gdb</span></code></pre></td></tr></table></div></figure>


<p>将被安装到/usr/local/bin/gdb
3. 由于Mac不允许随意进入进程空间，要经过许可才可以。如果要用gdb依附进程，那就要对gdb授权才可以。所以需要创建自签证书。下面命令进行授权</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>codesign -s gdb-cert $(which gdb)</span></code></pre></td></tr></table></div></figure>


<p>这下就可以使用GDB了</p>

<p>参考:<a href="http://ntraft.com/installing-gdb-on-os-x-mavericks/">http://ntraft.com/installing-gdb-on-os-x-mavericks/</a></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Objective-C 2.0学习笔记]]></title>
    <link href="http://www.ifun.cc/blog/2015/01/22/effective-objective-c-2-dot-0xue-xi-bi-ji/"/>
    <updated>2015-01-22T10:50:41+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/01/22/effective-objective-c-2-dot-0xue-xi-bi-ji</id>
    <content type="html"><![CDATA[<h3>Item 1</h3>

<p>熟悉C/C++会提高你ObjC的能力 <br></p>

<h3>Item 2</h3>

<p>包括头文件要注意，尽量写到.m中，.h中尽量用预声明 <br></p>

<h3>Item 3</h3>

<p>尽量用ObjC的精简语法来创建NSFoundation</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSNumber *intNumber = @1;
</span><span class='line'>NSNumber *floatNumber = @2.f;
</span><span class='line'>NSNumber *doubleNumber = @3.14;
</span><span class='line'>NSNumber *boolNumber = @YES;
</span><span class='line'>NSNumber *charNumber = @'a'
</span><span class='line'>NSArray *animals = @[@"cat", @"dog", @"mouse", @"badger"];
</span><span class='line'>NSString *dog = animals[1];
</span><span class='line'>NSDictionary *personData = @{@"firstName": @"Matt", @"lastName": @"Galloway", @"age": @28};
</span><span class='line'>NSString *lastName = personData[@"lastName"];</span></code></pre></td></tr></table></div></figure>


<h3>Item 4 尽量用常量代替宏</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static const NSTimeInterval kAnimationDuration = 0.3;</span></code></pre></td></tr></table></div></figure>


<p>//代替</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define ANIMATION_DURATION 0.3</span></code></pre></td></tr></table></div></figure>


<p>static 是为了防止重名重定义，即本文件可见，其它文件不可见，const是为了防止改变其值</p>

<p>.h中extern 定义全局变量，.m中赋值，这样引用.h后就对其变量可见，达到全局变量的效果</p>

<h3>Item 5</h3>

<p>正确使用枚举</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef enum ETest: NSInteger {
</span><span class='line'>  ETest1,
</span><span class='line'>  ETest2
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>等同</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef NS_ENUM(NSInteger, ETest) {
</span><span class='line'>    ETest1,
</span><span class='line'>    ETest2
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>可以使用or运算的optional</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef NS_OPTIONS(NSInteger, ETest) {
</span><span class='line'>    ETest1 = 1 &lt;&lt; 0,
</span><span class='line'>    ETest2 = 1 &lt;&lt; 1
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Item 6</h3>

<p>理解属性
@public</p>

<p>@private</p>

<p>@property声明数据封装</p>

<p>@synthesize 自动生成操作成员变量的方法</p>

<p>@dynamic 手动生成操作成员变量的方法</p>

<p>类属性的一些属性</p>

<p>nonatomic, readwrite, readonly, assign, strong, weak, unsafe_unretained, copy, getter, setter</p>

<h3>Item 7</h3>

<p>类内部实现中最好直接操作类变量，不要用property的方法。</p>

<p>@dynamic自己实现数据封装，能够实现延迟加载</p>

<h3>Item 8 理解对象相等</h3>

<p>比较相等要实现isEqual:与hash方法</p>

<p>两个对象相等那么他们的hash返回的值一定相等，hash返回的值相等，两个对象不一定相等</p>

<p>比较两个对象是否相等，根据需要来比较，并不一定要比较所有的属性</p>

<p>自定义hash方法，一定要快速高效的方法</p>

<h3>Item 9 用类簇隐藏子类的执行细节</h3>

<p>类簇可以隐藏开放接口后的实现细节</p>

<p>类簇常用在系统框架中</p>

<h3>Item 10 给存在的实例依附数据</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void objc_setAssociatedObject(id object, void *key, id value, objc_AssociationPolicy policy);
</span><span class='line'>id objc_getAssociatedObject(id object, void *key);
</span><span class='line'>void objc_removeAssociatedObjects(id object);</span></code></pre></td></tr></table></div></figure>


<p>该方法将两个实例关联起来</p>

<p>内存管理一定要注意</p>

<p>不到万不得已的时候不要用，因为出了问题很难找到原因</p>

<h3>Item 11 理解objc_msgSend</h3>

<p>Objc中方法调用叫发消息，消息是由消息接收者，selector(路由)与参数组成。发送一个消息给接收者同步对应调用一个方法。</p>

<p>调用就是消息查询路由，然后找到执行入口，最好执行。</p>

<h3>Item 12 理解消息走向</h3>

<p>在Item 11中解释了正确情况下的消息走向，接着讲在非正常情况下(即selector不存在的情况下)消息的走向。</p>

<p>如果发送的消息，实例没有对应的selector，那么就会crash并报unrecognized selector send to的错误。</p>

<p>iOS XMPP Framework就运用了这个技巧实现了多代理类</p>

<h3>Item 13 用方法移置来调试,达到hook效果</h3>

<p>Method class_getInstanceMethod(Class aClass, SEL aSelector) 获取方法的method
void method_exchangeImplementations(Method m1, Method m2) 交换两个方法的IMP</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Method originalMethod = class_getInstanceMethod([NSString class],
</span><span class='line'>@selector(lowercaseString));
</span><span class='line'>Method swappedMethod = class_getInstanceMethod([NSString class],
</span><span class='line'>@selector(uppercaseString)); method_exchangeImplementations(originalMethod, swappedMethod);
</span><span class='line'>NSString *string = @"ThIs iS tHe StRiNg";
</span><span class='line'>NSString *lowercaseString = [string lowercaseString]; NSLog(@"lowercaseString = %@", lowercaseString);
</span><span class='line'>// Output: lowercaseString = THIS IS THE STRING
</span><span class='line'>NSString *uppercaseString = [string uppercaseString]; NSLog(@"uppercaseString = %@", uppercaseString);
</span><span class='line'>// Output: uppercaseString = this is the string</span></code></pre></td></tr></table></div></figure>


<p>hook系统方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface NSString (EOCMyAdditions) 
</span><span class='line'>- (NSString*)eoc_myLowercaseString; 
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation NSString (EOCMyAdditions)
</span><span class='line'>- (NSString*)eoc_myLowercaseString {
</span><span class='line'>NSString *lowercase = [self eoc_myLowercaseString]; 
</span><span class='line'>NSLog(@"%@ =&gt; %@", self, lowercase);
</span><span class='line'>return lowercase;
</span><span class='line'>} 
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>Method originalMethod = class_getInstanceMethod([NSString class], @selector(lowercaseString));
</span><span class='line'>Method swappedMethod = class_getInstanceMethod([NSString class], @selector(eoc_myLowercaseString)); 
</span><span class='line'>method_exchangeImplementations(originalMethod, swappedMethod);
</span><span class='line'>
</span><span class='line'>NSString *string = @"ThIs iS tHe StRiNg";
</span><span class='line'>NSString *lowercaseString = [string lowercaseString]; 
</span><span class='line'>// Output: ThIs iS tHe StRiNg =&gt; this is the string</span></code></pre></td></tr></table></div></figure>


<p>路由后的执行入口可以被添加，与可以被改变</p>

<p>Swizzling可以用来丰富原来接口的内容</p>

<p>尽量少用，用来调试不错。</p>

<h3>Item 14 理解类对象</h3>

<p>略</p>

<h3>Item 15 类名前缀，防止重复定义</h3>

<p>略</p>

<h3>Item 16 初始化方法设计</h3>

<p>根据需要设计实现初始化方法</p>

<p>子类中根据需要重写super初始化方法</p>

<p>子类中不需要的父类的初始化方法重写，并在实现中抛出异常</p>

<h3>Item 17 重写description方法</h3>

<p>debugDescription或description</p>

<p>NSLog出来更有可读性，用NSDictionary来format</p>

<h3>Item 18 少用可变类型的属性</h3>

<p>属性对外只读，对内可读写，实现方式是在.h中readonly, 在.m中用readwrite重新声明一下属性</p>

<p>提供方法来操作可变容器，不要直接声明为属性</p>

<h3>Item 19 命名意图清晰</h3>

<p>命名要更像objc</p>

<p>命名要简明，优雅得像一句陈诉句</p>

<p>命名避免缩写</p>

<p>命名风格要一致</p>

<h3>Item 20 私有方法用前缀表明</h3>

<p>前缀私有方法用于区别公有方法</p>

<p>不要用_来做私有方法前缀，因为苹果用了这规则</p>

<h3>Item 21 理解Objc Error Model</h3>

<p>异常是用来处理fatal error的</p>

<p>非fatal error,要用代理或参数方式来自行处理</p>

<h3>Item 22 理解NSCopying协议</h3>

<p>如果想copy，那就一定要执行NSCopying协议</p>

<p>如果有mutable的变量，那么还需要执行NSMutableCopying</p>

<p>区分Shallow copy与Deep copy</p>

<p>建意使用deep copy, 如果需要的话</p>

<h3>Item 23 内部通信使用代理协议与数据协议</h3>

<p>delegate在开发中运用得非常多，这儿不再多说</p>

<h3>Item 24 用Category来拆分类，使其更容易维护</h3>

<p>很容易明白，也不说了</p>

<h3>Item 25 Category中要加前缀，防止出现bug,容易调试</h3>

<p>Category中的类要加前缀</p>

<p>category中方法名要加前缀</p>

<h3>Item 26 Category中避免声明属性</h3>

<p>属性是数据的封装，不能在category中声明属性，编译器会找不到的。</p>

<p>有两种方法可以，一种是在Item 10中介绍的，一种是可以声明readonly的属性，然后手动实现其get方法。</p>

<h3>Item 27 用class-continuation的Category隐藏类的执行(类似private方法)</h3>

<p>class-continuation category与一般的category差不多，只是括号时用写名字。</p>

<p>class-continuation category可以在里面声明属性与方法，也可以遵循protocol，其中的方法相当于私有方法。</p>

<p>可以改变类属性的一些类型，如只读变成可读写</p>

<h3>Item 28 用protocol提供匿名对象</h3>

<p>id加protocol提供匿名类型</p>

<p>如果想隐藏类则可以使用匿名对象</p>

<p>只关心实现了方法，不关心实现细节的时候可以用匿名对象</p>

<h2>5 内存管理</h2>

<h3>Item 29 理解引用计数</h3>

<p>每个对象使用的时候会对其引用次数进行计数。</p>

<p>new出来的对象retainCount为1.</p>

<p>retain对象retainCount加1.</p>

<p>release对象retainCount减1.</p>

<p>autorelease对象retainCount减1.</p>

<p>当retainCount为0的时候，内存被回收。</p>

<p>对象加到容器(如NSArray)中，会对其retain一次，及引用计数加1,记得要平衡retainCount.</p>

<p>避免循环引用</p>

<h3>Item 30 使用ARC管理引用计数</h3>

<p>ARC中将不再手动调用retain,release,autorelease，dealloc等方法了。编译器会自动将这些加入到我们的程序当中。</p>

<p>ARC解放了开发人员对内存的管理，还少写代码。</p>

<p>ARC只能管理ObjC的对象，CoreFoundation object还是得用CFRetain/CFRelease来管理内存</p>

<h3>Item 31 清理与删观察者只放在dealloc中执行</h3>

<p>有dealloc中释放CoreFoundation并去掉观察者</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)dealloc {
</span><span class='line'>    CFRelease(coreFoundationObject);
</span><span class='line'>    [[NSNotificationCenter defaultCenter] removeObserver:self];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如果是MRC, 调用[super dealloc];应放到最后</p>

<p>如果有文件操作，一定要记得close</p>

<h3>Item 32 内存相关记得异常处理</h3>

<p>MRC一定要处理异常处理，方式要正确，@try中需要将释放的工作放到@finally中</p>

<p>ARC要使用-fobjc-arc-exceptions来开启异常处理，不过使用异常处理会降低运行效率</p>

<p>如果有很多异常处理，建意使用NSError的方式来处理</p>

<h3>Item 33 使用弱引用避免循环引用</h3>

<p>循环引用就是A对象拥有B对象，B对象拥有A对象，当A想释放的时候，等待B释放，这时B却又要等待A释放完才释放完才释放，这样两个对象相互等待，却一直释放不了。</p>

<p>用weak或unsafe_unretained声明属性就可以了。</p>

<p>weak比unsafe_unretained更安全</p>

<h3>Item 34 使用Autorelease Pool来管理地高内存分配</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSArray *databaseRecords = /* ... */;
</span><span class='line'>NSMutableArray *people = [NSMutableArray new]; for (NSDictionary *record in databaseRecords) {
</span><span class='line'>@autoreleasepool { 
</span><span class='line'>EOCPerson *person =
</span><span class='line'>[[EOCPerson alloc] initWithRecord:record];
</span><span class='line'>[people addObject:person];
</span><span class='line'>} 
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如上面的代码，如果NSArray有10000个对象，那么就可以加一个autoreleasepool，这样可以实时的进行内存回收。</p>

<h3>Item 35 使用Zombies来调试内存问题</h3>

<p>内存分配给对象，然后对象被释放。如果该对象内存没有被重写，那么再次向该对象发送消息，也是可以成功执行的。如果被重写了，那么就会崩溃。</p>

<p>所以会出现有时候crash,有时候正常运行，给程序调试与bug排除带来不便。所以我们可以开启Zombies（僵尸对象）。</p>

<p>它将所有释放了的对象放到放到一个Zombies区，内存也不释放也不被重写，这样标记它是一个僵尸对象。如果程序再次向僵尸对象发送消息，那么就会在控制台打出消息提供开发人员，方向开发人员定位排除bug.</p>

<h3>Item 36 避免使用retainCount</h3>

<p>如果用MRC,开发过程中，中心有retainCount的概念平衡retainCount就可以。代码中一定不要用retainCount来做判断，因为是根据runtime autorelease等决定的。所以release一个对象retainCount不是马上改变。如下面的代码就是错误的，是一个死循环。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>while([obj retainCount]) {
</span><span class='line'>    [obj release];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>6 块与GCD</h2>

<h3>Item 37 理解块代码</h3>

<p>待续</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoapods国内速度问题]]></title>
    <link href="http://www.ifun.cc/blog/2014/12/03/cocoapodsguo-nei-su-du-wen-ti/"/>
    <updated>2014-12-03T12:48:56+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/12/03/cocoapodsguo-nei-su-du-wen-ti</id>
    <content type="html"><![CDATA[<p>1.使用淘宝的gem镜像</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem sources --remove https://rubygems.org/
</span><span class='line'>gem sources -a http://ruby.taobao.org/</span></code></pre></td></tr></table></div></figure>


<p>2.使用国内的Cocoapods镜像</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod repo remove master
</span><span class='line'>pod repo add master https://gitcafe.com/lloydsheng/Specs.git
</span><span class='line'>pod repo update</span></code></pre></td></tr></table></div></figure>


<p>3.不用每次install/update更新Cocoapods Specs</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod install --verbose --no-repo-update
</span><span class='line'>pod update --verbose --no-repo-update</span></code></pre></td></tr></table></div></figure>


<p>如果想自己搞一个镜像，<a href="http://lloydsheng.com/post/setup-cocoapods-mirror">这儿</a>有方法可以参考</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSOpenDev配置]]></title>
    <link href="http://www.ifun.cc/blog/2014/09/22/iosopendevpei-zhi/"/>
    <updated>2014-09-22T16:43:25+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/09/22/iosopendevpei-zhi</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<h3>配置</h3>

<p>首先我们安装iOSOpenDev, 直接下载最新的进行安装，如果有错，可以参看<a href="https://github.com/kokoabim/iOSOpenDev/wiki/Troubleshoot">这儿</a>。</p>

<p>越狱开发需要TheOS环境，而iOSOpenDev也是建立在TheOS的基础上的，只不过用iOSOpenDev我们就可以使用我们熟悉的Xcode进行开发了。所以我们还需要安装TheOS.打开命令行，直接运行下面命令进行安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export THEOS=/opt/theos
</span><span class='line'>git clone git://github.com/DHowett/theos.git $THEOS</span></code></pre></td></tr></table></div></figure>


<p>利用iOSOpenDev, 我们只需要简单command+shift+i就可以将程序布置到设备上了。这个过程需要ssh连接，所以我们还需要配置ssh钥匙对。只需要一条命令即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iosod sshkey -h 192.168.1.1</span></code></pre></td></tr></table></div></figure>


<p>192.168.1.1是你设备的地址，记住，你设备上一定要开启ssh哦。</p>

<p>iOSOpenDev的官方文档都在<a href="https://github.com/kokoabim/iOSOpenDev/wiki/_pages">这儿</a>，你可以再研究研究。</p>

<p>接下来，我们需要dump出来的iOS header, 比如我们要hook SpringBoard. 大家可以自行dump出header，也可以到网上下载已经dump好了的。我就是直接<a href="https://github.com/MP0w/iOS-Headers">这儿</a>下载的。将下载好的头文件放到/opt/theos/include目录下。</p>

<h3>Hello Word</h3>

<p>现在一切都准备好了，那我们来进行我们的Hello Word.
创建一个logos Tweak工程。接着在Build Settings中iOSOpenDevDevice设置为自己设备的IP地址，设备与你的Mac要在一个局域网内。</p>

<p>由于我们需要引用头文件，所以还需要在Build Settings中将Header Search Paths中加一行/opt/theos/include</p>

<p>下面我们实现hook SpringBoard，当SPringBoard启动的时候，我们就弹出一个Alert.</p>

<p>在.xm中加以下代码.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;SpringBoard/SpringBoard.h&gt;
</span><span class='line'>
</span><span class='line'>%hook SpringBoard
</span><span class='line'>
</span><span class='line'>- (void)applicationDidFinishLaunching:(id)application {
</span><span class='line'>    %orig;
</span><span class='line'>    
</span><span class='line'>    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Welcome"
</span><span class='line'>                                                    message:@"Welcome to your iPhone!"
</span><span class='line'>                                                   delegate:nil
</span><span class='line'>                                          cancelButtonTitle:@"Thanks" 
</span><span class='line'>                                          otherButtonTitles:nil];
</span><span class='line'>    [alert show];
</span><span class='line'>    [alert release];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>%end</span></code></pre></td></tr></table></div></figure>


<p>由于用到了UIAlertView属于UIKit的东西，所以我们要链接UIKit.framework, 还有hook的库文件libsubstrate.dylib(在opt/iOSOpenDev/lib目录下面)。</p>

<p>中以command+B进行编译，一定会报错，下面列出我遇到的错。</p>

<p>1.找不到NSObject.h <br>
将#import &ldquo;NSObject.h&rdquo; 改为#import &lt;NSFoundation/NSObject.h>
2.一些不能识别的数据类型，我将期改为id类型。</p>

<p>进行一些修改，直到编译不报错为止。</p>

<p>Command+Shift+i  将程序布署到设备上，SpringBoard会重启，重启后是不是看到Alert？ 没看到？ 那你一定哪儿错了，重新再来一遍吧，如果还不行，那我也帮不了你，只有去求神了。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Auto Layout的坑]]></title>
    <link href="http://www.ifun.cc/blog/2014/07/23/shi-yong-auto-layoutde-keng/"/>
    <updated>2014-07-23T17:40:05+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/07/23/shi-yong-auto-layoutde-keng</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>最近在研究iOS8, 用beta版的xcode创建了一个swift项目，由于iOS8加入了size classes的概念，所以当然要用这先进东西了。</p>

<p>创建了一个tabbar的工程，试着在storyboard中研究它，发于UITextView这个控件在w(Compact), h(Regular)iPhone竖屏的情况下，字符显示不完整（如下图所以，好像UITextView的frame比较小）。最开始以为是constraints的问题，仔细看了一下，没有发现constraints有问题。
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1eimvr8u4eoj20v40zo75u.jpg" alt="" /><br></p>

<p>由于强迫症严重，所以总感觉这样不太对。 最后终于找到了，原来是没有设置Editable属性。只需要在storyboard属性栏中将其勾中就ok了。</p>

<p><img src="http://ww2.sinaimg.cn/large/6bf526ffgw1eimvucfa68j20eq0go767.jpg" alt="" /> <br></p>

<p>下在是不是看着顺眼多了？ ^V^</p>

<p><img src="http://ww1.sinaimg.cn/large/6bf526ffgw1eimvvwb33aj20t20v0dhf.jpg" alt="" /> <br></p>

<p>然后我试着运行工程，看结果，发现第二个tab中UITextView中的字符不见了。
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1eimvz0q0xwj20gw0vo0ta.jpg" alt="" /> <br>
这是为什么呢？</p>

<p>经研究发现是constraints的Placeholder属性勾中了。<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1eimw0ph1taj20dy0ceab9.jpg" alt="" /> <br></p>

<p>Placeholder就是占位的意思，在编译的时候就会去掉这个Constraint. 由于去掉了Constraint,那么就不无决定它的frame, 结果就显示不出来了。</p>

<p>有了这个属性，那么就可以在storyboard或xib中先用了个constraints来占位，可以去掉警告， 方便代码加Constraints的朋友使用。</p>

<p>虽然用Auto Layout有一段时间了，但是这些细节还不是很清楚，还得慢慢吸收。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Jailbreak Dev准备工作]]></title>
    <link href="http://www.ifun.cc/blog/2014/07/11/ios-jailbreak-devzhun-bei-gong-zuo/"/>
    <updated>2014-07-11T16:58:09+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/07/11/ios-jailbreak-devzhun-bei-gong-zuo</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>安全越来越重要了，所以我也在开始着手研究iOS安全。iOS的安全很大一部份是在iOS越狱的基础上进行的，所以对基设备进行越狱，并准备向安全领域进军。</p>

<p>1.iOS越狱设备，这我就不多说了,(有风险，自行承担)
2.在iOS越狱设备上安装openssh, SBSettings, BigBoss Recommended tools, MobileTerminal,这些可以通过Cydia安装</p>

<p>下面安装clutch,class-dump-z</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh root@you ios device ip
</span><span class='line'>apt-get upgrade
</span><span class='line'>wget http://networkpx.googlecode.com/files/class-dump-z_0.2a.tar.gz
</span><span class='line'>tar -xvzf class-dump-z_0.2a.tar.gz
</span><span class='line'>cd iphone_armv6
</span><span class='line'>cp class-dump-z /usr/bin
</span><span class='line'>chmod 777 /usr/bin/class-dump-z</span></code></pre></td></tr></table></div></figure>


<p>可以用sftp将clutch上传到iOS设备里。Clutch在<a href="https://github.com/KJCracks/Clutch">这儿</a>哦</p>

<p>从appstore上下载的app是加了密的，加了密的app，class-dump-z就无能为力了，所以需要clutch将基解密。</p>

<p>以2048为例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>clutch 2048
</span><span class='line'>cd /User/Documents/Cracked
</span><span class='line'>unzip /User/Documents/Cracked/2048.ipa -d 2048
</span><span class='line'>class-dump-z 2048/Payload/2048.app/2048 &gt; class-info-2048</span></code></pre></td></tr></table></div></figure>


<p>3.在Mac上安装theOS,iOSOpenDev,Cycript</p>

<p>就这些了，以后再加用到的。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义iOS上双击Home键App切屏]]></title>
    <link href="http://www.ifun.cc/blog/2014/07/10/zi-ding-yi-iosshang-shuang-ji-homejian-appqie-ping/"/>
    <updated>2014-07-10T16:34:06+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/07/10/zi-ding-yi-iosshang-shuang-ji-homejian-appqie-ping</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>在iOS7上，如果双击Home，会来到iOS App的switcher页面，在这儿列出了当前系统挂起的App, 上面有每个App的切屏，相信大家都熟悉这个东东了。它其实是每个App在挂起前，对App截屏。</p>

<p>那么我们如何自定义它在App Switcher上的展示呢，明白了它其实是对App的截屏，那么在它快进入后台的时候，我们改变其外观，那么截下来的图片，不就改变了吗？</p>

<p>明白这个原理后，那我们就试一试。</p>

<p>新建一个工程，准备三张图片，Defautl.png, Defautl@2x.png, Default-568h@2x.png,  将其放进工程。</p>

<p>我们在AppDelegate.h中声明一个UIImageView变量</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface AppDelegate : UIResponder &lt;UIApplicationDelegate&gt; {
</span><span class='line'>    UIImageView *screenShotView;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@property (strong, nonatomic) UIWindow *window;
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>接着在AppDelegate中加入以下代码:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)applicationWillResignActive:(UIApplication *)application
</span><span class='line'>{
</span><span class='line'>    if (!screenShotView) {
</span><span class='line'>        screenShotView = [[UIImageView alloc]initWithFrame:[self.window frame]];
</span><span class='line'>        [screenShotView setImage:[UIImage imageNamed:@"Default-568h"]];
</span><span class='line'>        [self.window addSubview:screenShotView];
</span><span class='line'>    }
</span><span class='line'>    screenShotView.alpha = 1;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)applicationDidBecomeActive:(UIApplication *)application
</span><span class='line'>{
</span><span class='line'>    screenShotView.alpha = 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>先在模拟器上删除以app,然后再点xcode run.  双击Home, 这下你是不是在App Switcher中看到了你的Default的图片，将上面的代码中Default-568h改为其它图片, 这样达到了自定义目的, 是不是太简单了呀？</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个基于Nodejs的简单iOS MDM服务]]></title>
    <link href="http://www.ifun.cc/blog/2014/07/08/%5B%3F%5D-ge-ji-yu-nodejsde-jian-dan-ios-mdmfu-wu/"/>
    <updated>2014-07-08T18:57:37+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/07/08/[?]-ge-ji-yu-nodejsde-jian-dan-ios-mdmfu-wu</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>如果有效的管理自己的iOS移动设备，苹果为我们提供了MDM技术。最近小弟在研究它，有一点小经验，写了一个简单的iOS MDM服务, 服务器采用Nodejs＋Mongodb.</p>

<p>大家可以试用一下,请直接<a href="https://www.sohoin.com">猛击这儿</a>(记得用设备的safari打开)进入。</p>

<p>首先需要大家注册一个帐号，密码与帐号是管理你设备所需的。</p>

<p>登陆进系统后，会有两步需要你完成，一是点击安装mdm描述文件，安装成功后请进行第二步，安装udid获取描述文件，第二步会获取你设备UDID, 并加入到你的管理列表中，这样你以后就可以对其进行管理。</p>

<p>完成上面两步后就可以看到下面多了两列命令，一个是锁屏，一个是清除密码。目前只支持这两个命令，后续会慢慢加入。</p>

<p>界在很丑呀，有空美化一下，换衣大家提意见。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu Apache的一些配置]]></title>
    <link href="http://www.ifun.cc/blog/2014/06/17/ubuntu-apachede-%5B%3F%5D-xie-pei-zhi/"/>
    <updated>2014-06-17T17:35:10+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/06/17/ubuntu-apachede-[?]-xie-pei-zhi</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004
开发过程中需要解决的问题，然后记录解决方法。</p></blockquote>

<h3>1.ubuntu配置虚拟主机</h3>

<p>apache2虚拟主机的好处是可以在一台服务器上，一个端口上建立多个站点<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /etc/apache2/sites-available
</span><span class='line'>cp default test.com</span></code></pre></td></tr></table></div></figure>


<p>然后vim打开test.com
主要有三处修改</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DocumentRoot /var/www/test.com
</span><span class='line'>ServerName www.test.com
</span><span class='line'>&lt;Directory /var/www/test.com&gt;
</span><span class='line'>                Options Indexes FollowSymLinks MultiViews
</span><span class='line'>                AllowOverride None
</span><span class='line'>                Order allow,deny
</span><span class='line'>                allow from all
</span><span class='line'>&lt;/Directory&gt;</span></code></pre></td></tr></table></div></figure>


<p>然后保存修改<br></p>

<p>下面命令就enable这个虚拟主机<BR></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo a2ensite test.com</span></code></pre></td></tr></table></div></figure>


<p>接下来重启我们的apache2<BR></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /etc/init.d/apache2 restart</span></code></pre></td></tr></table></div></figure>


<p>这下就可以通过www.test.com（你自己的域名）访问/var/www/test.com下的站点内容了。</p>

<p>disable这个虚拟主机的命令是:<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo a2dissite test.com</span></code></pre></td></tr></table></div></figure>


<h3>2.ubuntu apache启用SSL</h3>

<p>在上面我们介绍了配置虚拟主机，接着，如果我想对这个虚拟主机加入ssl功能如何办呢，其实方法很简单。假设你已经有了证书与私钥，分别是server.crt与server.key.</p>

<p>那么，我们只需要修改/etc/apache2/sites-available/test.com这个文件。<br></p>

<p>加入以下代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># SSL
</span><span class='line'>SSLEngine On
</span><span class='line'>SSLCertificateFile /etc/apache2/ssl/server.crt
</span><span class='line'>SSLCertificateKeyFile /etc/apache2/ssl/server.key</span></code></pre></td></tr></table></div></figure>


<p>就是你服务器上对应的两个文件路径<br></p>

<p>接着重启apache2生效：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /etc/init.d/apache2 restart</span></code></pre></td></tr></table></div></figure>


<p>这下就需要 <a href="https://www.test.com">https://www.test.com</a><br>来访问你的站点了。</p>

<h3>3.ubuntu apache与nodejs共享80端口</h3>

<p>首先我们要开启proxy模块<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo a2enmod proxy_http
</span><span class='line'>sudo a2enmod proxy</span></code></pre></td></tr></table></div></figure>


<p>如果想关闭则用a2dismod命令,如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo a2dismod proxy</span></code></pre></td></tr></table></div></figure>


<p>配置一个虚拟主机：<br>
假如nodejs的源码放在/home/weixin目录下<br>
那下面是一个简单的示例配置:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;VirtualHost *:80&gt;
</span><span class='line'>  ServerAdmin admin@gmail.com
</span><span class='line'>  ServerName www.test.com
</span><span class='line'> 
</span><span class='line'>  ProxyRequests off
</span><span class='line'> 
</span><span class='line'>  &lt;Proxy *&gt;
</span><span class='line'>    Order deny,allow
</span><span class='line'>    Allow from all
</span><span class='line'>  &lt;/Proxy&gt;
</span><span class='line'> 
</span><span class='line'>  &lt;Location /&gt;
</span><span class='line'>    ProxyPass http://localhost:8001/
</span><span class='line'>    ProxyPassReverse http://localhost:8001/
</span><span class='line'>  &lt;/Location&gt;
</span><span class='line'> 
</span><span class='line'>  DocumentRoot /home/weixin
</span><span class='line'>  &lt;Directory "/home/weixin"&gt;
</span><span class='line'>    AllowOverride All
</span><span class='line'>  &lt;/Directory&gt;
</span><span class='line'> 
</span><span class='line'>  ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
</span><span class='line'>  &lt;Directory "/usr/lib/cgi-bin"&gt;
</span><span class='line'>    AllowOverride None
</span><span class='line'>    Options ExecCGI -MultiViews +SymLinksIfOwnerMatch
</span><span class='line'>    Allow from all
</span><span class='line'>  &lt;/Directory&gt;
</span><span class='line'>
</span><span class='line'>  ErrorLog /var/log/apache2/error.log
</span><span class='line'>  # Possible values include: debug, info, notice, warn, error, crit,
</span><span class='line'>  # alert, emerg.
</span><span class='line'>  LogLevel warn
</span><span class='line'>  CustomLog /var/log/apache2/access.log combined
</span><span class='line'>  ServerSignature On
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>接着重启apache2生效：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /etc/init.d/apache2 restart</span></code></pre></td></tr></table></div></figure>


<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoa触发方法调用的几种方法]]></title>
    <link href="http://www.ifun.cc/blog/2014/06/14/cocoahong-fa-fang-fa-diao-yong-de-ji-chong-fang-fa/"/>
    <updated>2014-06-14T09:38:40+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/06/14/cocoahong-fa-fang-fa-diao-yong-de-ji-chong-fang-fa</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>今天周未，有点空闲时间，小结一下Cocoa中触发方法调用的几种方法。</p>

<h3>1.SEL触发</h3>

<p>SEL就是selector的缩写，它表示Cocoa中的方法选择器，不明白？那请仔细了解Objective_C的运行时机制与Cocoa底层思想。 <br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SEL theSelector = @selector(methodWithInt:andInt:);</span></code></pre></td></tr></table></div></figure>


<p>看了上面代码这下你明白了什么是SEL了吧，平时我们开发当中经常用到的。<br>
有了SEL这样就可以触发方法调用了,<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[self performSelector:theSelector]
</span><span class='line'>[self performSelector:@selector(methodWithInt:andInt:)];</span></code></pre></td></tr></table></div></figure>


<p>上面两句代码是同一个道理。<br></p>

<h3>2. IMP触发</h3>

<p>IMP其实就是一个函数指针的概念，就可以这么简单理解。<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IMP theImplementation = [self methodForSelector:theSelector]; </span></code></pre></td></tr></table></div></figure>


<p>上面这句代码就是获取methodWithInt:andInt:这个方法的地址。<br>
有了这个函数指针后，我们就可以触发方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>theImplementation(self, theSelector, 30, 5);</span></code></pre></td></tr></table></div></figure>


<p>第一个是对象，第二个SEL， 后面的传入的参数。</p>

<h3>3. objc_msgSend方法</h3>

<p>这是Objc运行时的一个C方法，我们先看一个示列:<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>objc_msgSend(self, @selector(fly)); </span></code></pre></td></tr></table></div></figure>


<p>这行代码等价于<br></p>

<p>[self fly];</p>

<h3>4. NSInvocation</h3>

<p>NSInvocation相比上面几种方法，可以动态决定传入的参数个数。有了它，我们就可以实现&hellip;这样的变参API封装。<br>
说得有点抽像，看代码更清楚:<br></p>

<p>假如我们实现了一个两个数相加的方法，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-(void)addNSNumber:(NSNumber *)first withNumber:(NSNumber *)second</span></code></pre></td></tr></table></div></figure>


<p>我们可以用下面的方法来触发这个方法，并获取返回值。<BR></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSNumber *)testAdd {
</span><span class='line'>  NSNumber *retval;
</span><span class='line'> 
</span><span class='line'>  NSNumber *arg1 = [NSNumber numberWithDouble:15.0];
</span><span class='line'>  NSNumber *arg2 = [NSNumber numberWithDouble:13.0];
</span><span class='line'> 
</span><span class='line'>  SEL selector = @selector(addNSNumber:withNumber:);
</span><span class='line'> 
</span><span class='line'>  NSMethodSignature *sig = [self  methodSignatureForSelector:selector];
</span><span class='line'>  NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:sig];
</span><span class='line'> 
</span><span class='line'>  [invocation setTarget:self];
</span><span class='line'>  [invocation setSelector:selector];
</span><span class='line'>  [invocation setArgument:(void *)&arg1 atIndex:2];
</span><span class='line'>  [invocation setArgument:(void *)&arg2 atIndex:3];
</span><span class='line'>  [invocation invoke];
</span><span class='line'> 
</span><span class='line'>  if ([sig methodReturnLength]) {
</span><span class='line'>      [invocation getReturnValue:&retval];
</span><span class='line'>      return retval;
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>  return nil;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>代码很容易理解，我也不多做解释，有不明白的请留言。<br></p>

<p>下面是变参封装, 写了两个NSObject的Extension（Category）:<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ (NSInvocation *)createInvocationOnTarget:(id)target selector:(SEL)selector {
</span><span class='line'>  return [NSObject createInvocationOnTarget:target selector:selector withArguments:nil];
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>+ (NSInvocation *)createInvocationOnTarget:(id)target selector:(SEL)selector withArguments:(id)arg1, ... {
</span><span class='line'>  NSMethodSignature *sig = [target methodSignatureForSelector:selector];
</span><span class='line'>  NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:sig];
</span><span class='line'> 
</span><span class='line'>  [invocation setTarget:target];
</span><span class='line'>  [invocation setSelector:selector];
</span><span class='line'> 
</span><span class='line'> 
</span><span class='line'> 
</span><span class='line'>  if(arg1) {
</span><span class='line'>      va_list args;
</span><span class='line'>      va_start(args, arg1);
</span><span class='line'> 
</span><span class='line'>      [invocation setArgument:(void *)&arg1 atIndex:2];
</span><span class='line'> 
</span><span class='line'>      id obj;
</span><span class='line'>      int ct = 3;
</span><span class='line'> 
</span><span class='line'>      while( obj = va_arg(args, id) ) {
</span><span class='line'>          NSLog(@"%@", obj);
</span><span class='line'>          [invocation setArgument:(void *)&obj atIndex:ct];
</span><span class='line'> 
</span><span class='line'>          ct++;
</span><span class='line'>      }
</span><span class='line'> 
</span><span class='line'>      va_end(args);
</span><span class='line'>  }
</span><span class='line'> 
</span><span class='line'> 
</span><span class='line'>  return invocation;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>调用方法:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSInvocation *invocation = [NSObject createInvocationOnTarget:mathInstance selector:selector withArguments: arg1, arg2, nil]; 
</span><span class='line'> 
</span><span class='line'>[invocation invoke];
</span><span class='line'>[invocation getReturnValue:&retval];
</span><span class='line'> 
</span><span class='line'>return retval;</span></code></pre></td></tr></table></div></figure>


<p>目前只了解这些方法，如果你有更多的方法，还望提醒<br></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS8 APP国际化]]></title>
    <link href="http://www.ifun.cc/blog/2014/06/07/ios8-appguo-ji-hua/"/>
    <updated>2014-06-07T21:31:53+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/06/07/ios8-appguo-ji-hua</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>1.创建一个Localizable.strings文件 <br>
2.code中用字符串的地方使用NSLocalizedString，这与系统语言相关 <br>
3.时间显示，数字，金融与地区相关，所以需要各类NSFormater, 如NSDateFormatter, NSNumberFormatter &hellip; <br>
3.用命令将所有NSLocalizedString返回的字符串格式化到Localizable.strings里。命令行进入工程目录（我的工程名是LocalizationTest），运行下面命令：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find ./ -name "*.m" -print0 | xargs -0 genstrings -o LocalizationTest/en.lproj</span></code></pre></td></tr></table></div></figure>


<p>4.这下就将Localizable.strings拿给翻译的人 <br></p>

<p>上面是iOS7以下国际化的方法。</p>

<p>在iOS8中加入了一种国际通用的xliff文件，全称是 Localisation Interchange File Format（本地化交换文件格式，是xml文件）， 里面就是需要翻译的东西。打开xliff文件，里面<source></source>标签中是表示要翻译的东西，对应Localizable.strings中=号左边的字符串，<target></target>中是每种语言的翻译，对应Localizable.strings中=号右边的字符串。没有一个source标签对应一个target标签。</p>

<p>选中Editor &ndash;> Export For Localization就可以导出需要翻译的字符串，它会遍历整个工程，将xib，stroryboard, 代码中需要本地化字符串导出到.xliff文件中。小伙伴们再也不需要手动输入上面的命令将NSLocalizedString对应的需要翻译的字符串输出到Localizable.strings里了。 Import Localizations就是导入翻译的字符串，并自动刷新xib，.strings， storyboard中本地化文件 <br></p>

<p>同时Xcode6加入了 语言Debug方式，以前测试国际化，都是修改系统的语言，然后运行程序，现在在xcode中的target的scheme中就可以修改该target运行时的语言。  这样就不需要到系统设置里去设置，更简单高效。<br></p>

<p>同时xcode storyboard的预览功能更加强大了，可以实时修改预览的语言。<br></p>

<p>开发越来越方便了。<br></p>

<p>继续写代码，改变世界。<br></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让Appstore开启Degub菜单]]></title>
    <link href="http://www.ifun.cc/blog/2014/04/14/rang-appstorekai-qi-degubcai-dan/"/>
    <updated>2014-04-14T12:42:37+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/04/14/rang-appstorekai-qi-degubcai-dan</id>
    <content type="html"><![CDATA[<p>有时候在Mac App Store下载或更新应用的，会出现一些错误，造成这原因可能是由于cookie造成的。所以我们可以重设appstore的cookie。方法如下：<br>
1.打开Terminal, 运行:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defaults write com.apple.appstore ShowDebugMenu -bool true</span></code></pre></td></tr></table></div></figure>


<p>2.重启Mac App Store， 大家就可以发现菜单栏多了一个Debug菜单。<br>
快选择清除cookie试试。</p>

<p><img src="http://iosman.qiniudn.com/2014-04-14PM.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[结队开发之多storyboard]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/23/jie-dui-kai-fa-zhi-duo-storyboard/"/>
    <updated>2014-02-23T10:38:15+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/23/jie-dui-kai-fa-zhi-duo-storyboard</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>Storyboard的出现，让开发变得像讲故事一样，UI间的关系流程也一目了然。它其实是xib的升级版本，将多个xib统一管理了。任何事都有双面性，Storyboard也有它的缺点。笔者就说说自己的经验，版本管理中，多人修改很容易严生冲突。storyboard中UIViewController太多，找到想要的比较困难（特别是在MBA上）。 这些缺点在结队开发中就会遇见。 如果我们用xib文件，这样将UI最小化分隔开，将后用code将这些小单元连接起来，就可以解决这个问题。如果只用xib就展现不出storyboard的故事情节能力。</p>

<!-- more -->


<p>本人提供两种解决方案：<br>
1.<a href="#md-1">Xib link Xib</a><br>
2.<a href="#md-2">Storyboard link Storyboard</a></p>

<p>其实它们之间可以两两组合，这样就可以延伸出另外两种方法:
3.Xib link Storyboard <br>
4.Storyboard link Xib <br></p>

<h3><a id="md-1">Xib link Xib</a></h3>

<p>这种方法其实我以<a href="http://www.ifun.cc/blog/2014/02/22/ioskai-fa-zhi-xibji-qiao-jie-shao/">上一篇</a>文章已经介绍过了，大家自行阅读，在些也不多述。</p>

<h3><a id="md-2">Storyboard link Storyboard</a></h3>

<p>这种方法与上面方法原理是一样的，利用加载storyboard时，实例化对应自定义UIViewController类，然后手动addSubview到对link view上，以达到链接的目录。 用言语表达是有点抽象，还是用代码表达吧，容易理解。<br></p>

<p>在这儿用到了Github上一个人写的link代码:<a href="https://github.com/rob-brown/RBStoryboardLink">RBStoryboardLink</a>。它的用法也在README中说得很清楚了。</p>

<p>大家将源码下载下来，里面有一个sample:LinkedTabs. 由于原作者用到了cocoapods,所以需要到源码LinkedTabs目录下， 运行一个命令行:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod update</span></code></pre></td></tr></table></div></figure>


<p>我还是简单说一下sample的结构。<br>
里面有三个storyboard,分别是MainStoryboard，FirstTabStoryboard， SecondTabStoryboard， 现在需要将MainStoryboard中的两个UIViewController分别与FirstTabStoryboard,SecondTabStoryboard建立连接，以达到程序运行后，这三个storyboard像是在一起的目的。<br></p>

<p>打开MainStoryboard，定位到Tab1的UIViewController<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edt58mgnxij20vp0g6mzp.jpg" alt="" /><br></p>

<p>注意图中两个箭头，上面一个一定要填这个自定义类RBStoryboardLink， 就是个类完成了连接的任务。<br>
下面一个箭头处，是传递的属性与对应的值，在实例化RBStoryboardLink的时候传送递给实例化对象。storyboardName这个属性表示要link到哪儿去，这儿我们要link到FirstTabStoryboard，所以值为FirstTabStoryboard。还有一个可选属性sceneIdentifier, 表示要link到Storyboard中的哪一个UIViewController. 如果不传这个属性，那就link到FirstTabStoryboard中的initial View Controller.<br></p>

<p>如果我们想link到FirstTabStoryboard中的第二个UIViewController那如何办呢，很简单:<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edt5kfj27gj20vp0haju2.jpg" alt="" /><br>
如上图，我们先找到这个被linke的View Controller，然后在Storyboard ID那输入该View Controller的标识，如在此输入:NavController.</p>

<p>接着在需要link的地方加入sceneIdentifier:NavController, 见下图箭头处。<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edt5nd36iwj20vl0fktb6.jpg" alt="" /><br></p>

<p>这样就link成功了。</p>

<p>方法3与方法4只是组合出来的方法，也不在此多述了。</p>

<hr />

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS开发之xib技巧介绍]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/22/ioskai-fa-zhi-xibji-qiao-jie-shao/"/>
    <updated>2014-02-22T16:16:29+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/22/ioskai-fa-zhi-xibji-qiao-jie-shao</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>iOS开发的这些年里，我遇到过这样的一群人，他们认为用代码写UI的人就要NB一点，用xib就是要低一个级别。更有一个高级工程师Level的朋友，聊天当中还特意强调自己全用代码写UI。对此我只能在心里暗笑两下。到底是用xib还是代码来创建UI,这个问题以前也有过很多争论，我只想说一点，各有各的优点。如果能够将两者融合贯通，那将是更有优势。笔者开发过程中，UI能用xib就尽量用xib（能用storyboard就用storyboard, 一个storyboard里最好别装太多的UIViewController，这在结队开发中将不利，我在下一篇教程中介绍如何使用多个storyboard来解决这个问题）.本文主要介绍使用xib的一些技术，即在xib中布局UI,然后xib与code相结合，快速UI开发介绍。本文主要讲解的也就是加载xib的技术。<br></p>

<!-- more -->


<p>还是老方法，用代码说话，首先创建一个Single Page工程，命名为:LoadNibViewDemo.<br></p>

<h3>1.直接加载xib中的UIView</h3>

<p>创建一个View1.xib, 随便设一个背景色，加一个标识UILabel, 这样好知道是这个view是哪一个view. 你可以在这个view上加作意的subview，我只是说明原理，所以这儿并没有加作何subview. 最终我的View1如下图：<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edsa871blkj20vk0ekdhe.jpg" alt="" /><br>
由于View1会放到其它View上作为subview，所以这儿size是Freeform, Status Bar是:None。<br><br></p>

<p>将下面代码放到viewDidLoad中:<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//1
</span><span class='line'>NSArray *views = [[NSBundle mainBundle] loadNibNamed:@"View1" owner:nil options:nil]; //&1
</span><span class='line'>UIView *v = [views lastObject];
</span><span class='line'>CGRect r = v.frame;
</span><span class='line'>r.origin.y += 80;
</span><span class='line'>v.frame = r;
</span><span class='line'>[self.view addSubview:v];</span></code></pre></td></tr></table></div></figure>


<p>&amp;1这行代码就是加载View1.xib， 然后将xib中的UIView实保存到views中， 由于xib中我们只拖入了一个view, 所以这儿lastObject就返回这个view的实例，这样便加载了xib中的UIView. 接着将这个UIView addSubview到其它view上，运行效果如图：<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edsai5knbvj208v0fsjre.jpg" alt="" /><br></p>

<h3>2.通过Owner建立变量关联<br></h3>

<p>首先我们为ViewController创建一个IBOutlet属性:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, weak) IBOutlet UIView *referencedView;</span></code></pre></td></tr></table></div></figure>


<p>接着同上面介绍的一样创建一个View2.xib, 如下图：<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1edsap4cbeoj20vp0ebwfj.jpg" alt="" /><br><br></p>

<p>File&rsquo;s Owner中，我们设为ViewController, 这样我们就可以与实例变量_referencedView建立关联了,如图<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edsaret2huj20kg0aogm7.jpg" alt="" /> <br></p>

<p>接着在viewDidLoad中，在刚才加入的代码下面添加如下代码：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 2
</span><span class='line'>[[NSBundle mainBundle] loadNibNamed:@"View2" owner:self options:nil];
</span><span class='line'>r = _referencedView.frame;
</span><span class='line'>r.origin.y = v.frame.size.height + v.frame.origin.y;
</span><span class='line'>_referencedView.frame = r;
</span><span class='line'>[self.view addSubview:_referencedView];</span></code></pre></td></tr></table></div></figure>


<p>与//1中的代码有点类似，只不过owner属性为self了。这样一来，loadNibNamed后，就会实例化与之关联的变量_referencedView, 运行程序你将会看到效果：<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edsay5nckmj208w0fst8r.jpg" alt="" /><br></p>

<h3>3.Class Owner建立变量关联<br></h3>

<p>其实这个原理与上面2说的一样的，只不过这儿我们特别定义一个class来作为xib的Owner， 要所有需要关系的view都可以声明在这个Owner中，这样方便代码管理与维护。<br>
这儿我们声明一个NSObject的子类FileOwner, 然后再在FileOnwer中声明IBOutLet的关联变量：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, weak) IBOutlet UIView *view;</span></code></pre></td></tr></table></div></figure>


<p>同理创建一个View3.xib, File&rsquo;s Owner设为FileOwner, 并建立view关联：<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edsb5soi16j20ql0c4t9r.jpg" alt="" /><br><br></p>

<p>接着在viewDidLoad结尾处添加以下代码:<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 3
</span><span class='line'>FileOwner *owner = [FileOwner new];
</span><span class='line'>[[NSBundle mainBundle] loadNibNamed:@"View3" owner:owner options:nil];
</span><span class='line'>r = owner.view.frame;
</span><span class='line'>r.origin.y = _referencedView.frame.origin.y + _referencedView.frame.size.height;
</span><span class='line'>owner.view.frame = r;
</span><span class='line'>[self.view addSubview:owner.view];</span></code></pre></td></tr></table></div></figure>


<p>运行效果：<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edsb8f38gxj208x0fsglp.jpg" alt="" /><br><br></p>

<h3>4.引入UIView Category<br></h3>

<p>为了代码简单，我们增加一个UIView Category方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+(id)loadFromNibNamed:(NSString*) nibName {
</span><span class='line'>    return [FileOwner viewFromNibNamed:nibName];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>其中FileOwner的class 方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+(id)viewFromNibNamed:(NSString*) nibName {
</span><span class='line'>    FileOwner *owner = [self new];
</span><span class='line'>    [[NSBundle mainBundle] loadNibNamed:nibName owner:owner options:nil];
</span><span class='line'>    return owner.view;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这样加载xib的代码就会变得更简单。<br>
同理，我们创建一个View4.xib, File&rsquo;s Owner设为FileOwner, 并建立view关联：<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edsbhtxokzj20vn0dut9n.jpg" alt="" /><br></p>

<p>接着在viewDidLoad尾添加代码:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 4
</span><span class='line'>UIView *v4 = [UIView loadFromNibNamed:@"View4"];
</span><span class='line'>r = v4.frame;
</span><span class='line'>r.origin.y = owner.view.frame.origin.y + owner.view.frame.size.height;
</span><span class='line'>v4.frame = r;
</span><span class='line'>[self.view addSubview:v4];</span></code></pre></td></tr></table></div></figure>


<p>运行效果:<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edsehvv6clj208w0frq2z.jpg" alt="" /> <br></p>

<h3>5.自定义UIView类<br></h3>

<p>在4Category的基础上，我们再引入自定义UIView类，并在xib中与之关联。首先我们创建一个UIView字类UIView5.<br>
接着，我们创建一个View5.xib, File&rsquo;s Owner设为FileOwner, 并建立view关联：<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edsen8i9nvj20vq0ed0u2.jpg" alt="" /><br></p>

<p>接着增加一个UIView的Category方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+(id)loadFromNib {
</span><span class='line'>    return [self loadFromNibNamed:NSStringFromClass(self)];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在viewDidLoad尾加入代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 5
</span><span class='line'>View5 *v5 = [View5 loadFromNib];
</span><span class='line'>r = v5.frame;
</span><span class='line'>r.origin.y = v4.frame.origin.y + v4.frame.size.height;
</span><span class='line'>v5.frame = r;
</span><span class='line'>[self.view addSubview:v5];</span></code></pre></td></tr></table></div></figure>


<p>动行效果：<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edserc400wj208x0fuglv.jpg" alt="" /><br></p>

<h3>6.设置Onwer为UIViewController</h3>

<p>首先，我们创建一个View6.xib, File&rsquo;s Owner设为UIViewController. 这样UIViewController的view属性关联我们xib中的UIView <br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edsezb1w85j20vv0dtgn1.jpg" alt="" /><br></p>

<p>接着在viewDidLoad中添加代码:<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 6
</span><span class='line'>UIView *v6 = [[UIViewController alloc] initWithNibName:@"View6" bundle:nil].view;
</span><span class='line'>r = v6.frame;
</span><span class='line'>r.origin.y = v5.frame.origin.y + v5.frame.size.height;
</span><span class='line'>v6.frame = r;
</span><span class='line'>[self.view addSubview:v6];</span></code></pre></td></tr></table></div></figure>


<p>动行效果:<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edsf1mhayzj208w0ft74f.jpg" alt="" /><br></p>

<p>说了这么多，是时候做一下总结了，其实其本是两个方法，一个是没有File&rsquo;s Onwer直接加载xib中的UIView，二是通过File&rsquo;s Onwer关联变量加载xib中的UIView。 然后就是一些Category提供简单接口而已。大家可以再细细品味一下上面所介绍的内容。<br></p>

<p>大家可以看我源码中UIView+Ext的Category方法中还提供了一个方法：+ (id)loadFromNibNoOwner;它应是方法5与方法1的组合，在此我就不细说了。 都是由上面两个基本方法演变出来的。<br></p>

<h3>7.xib link xib</h3>

<p>大家有没有想过在xib中link其它xib？ 很可惜苹果不支持这个功能。但是我们可以通过一点技巧实现这个功能。下而我就简单介绍一下<br>
先说一下原理，加载xib的UIView，如果这个UIView是自定义的UIView（即xib中关联了UIView的子类），如下图：<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1edsfenvw77j20vo0g40ux.jpg" alt="" /><br></p>

<p>那么在加载显示这个view的时候会触发一些方法，如:<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (id)initWithCoder:(NSCoder *)aDecoder
</span><span class='line'>- (id)awakeAfterUsingCoder:(NSCoder*)aDecoder</span></code></pre></td></tr></table></div></figure>


<p>我们就在这儿作些文章，在这儿用前面介绍的方法加载想要的的xib中UI实例替换掉原来返回的实例。</p>

<p>首先我写了一个UIView的了类SubView，代码很容易理解:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import "SubView.h"
</span><span class='line'>#include "UIView+Ext.h"
</span><span class='line'>
</span><span class='line'>@implementation SubView
</span><span class='line'>
</span><span class='line'>- (id)initWithFrame:(CGRect)frame
</span><span class='line'>{
</span><span class='line'>    self = [super initWithFrame:frame];
</span><span class='line'>    if (self) {
</span><span class='line'>        // Initialization code
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>- (id) awakeAfterUsingCoder:(NSCoder*)aDecoder {
</span><span class='line'>    BOOL theThingThatGotLoadedWasJustAPlaceholder = ([[self subviews] count] == 0);
</span><span class='line'>    if (theThingThatGotLoadedWasJustAPlaceholder) {
</span><span class='line'>        SubView* theRealThing = [[self class] loadFromNibNoOwner];
</span><span class='line'>      
</span><span class='line'>        // pass properties through
</span><span class='line'>        [self copyUIPropertiesTo:theRealThing];
</span><span class='line'>        
</span><span class='line'>        //auto layout
</span><span class='line'>        self.translatesAutoresizingMaskIntoConstraints = NO;
</span><span class='line'>        theRealThing.translatesAutoresizingMaskIntoConstraints = NO;
</span><span class='line'>      
</span><span class='line'>        return theRealThing;
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>-(void) copyUIPropertiesTo:(UIView *)view
</span><span class='line'>{
</span><span class='line'>    // reflection did not work to get those lists, so I hardcoded them
</span><span class='line'>    // any suggestions are welcome here
</span><span class='line'>    
</span><span class='line'>    NSArray *properties =
</span><span class='line'>    [NSArray arrayWithObjects: @"frame",@"bounds", @"center", @"transform", @"contentScaleFactor", @"multipleTouchEnabled", @"exclusiveTouch", @"autoresizesSubviews", @"autoresizingMask", @"clipsToBounds", @"backgroundColor", @"alpha", @"opaque", @"clearsContextBeforeDrawing", @"hidden", @"contentMode", @"contentStretch", nil];
</span><span class='line'>    
</span><span class='line'>    // some getters have 'is' prefix
</span><span class='line'>    NSArray *getters =
</span><span class='line'>    [NSArray arrayWithObjects: @"frame", @"bounds", @"center", @"transform", @"contentScaleFactor", @"isMultipleTouchEnabled", @"isExclusiveTouch", @"autoresizesSubviews", @"autoresizingMask", @"clipsToBounds", @"backgroundColor", @"alpha", @"isOpaque", @"clearsContextBeforeDrawing", @"isHidden", @"contentMode", @"contentStretch", nil];
</span><span class='line'>    
</span><span class='line'>    for (int i=0; i&lt;[properties count]; i++)
</span><span class='line'>    {
</span><span class='line'>        NSString * propertyName = [properties objectAtIndex:i];
</span><span class='line'>        NSString * getter = [getters objectAtIndex:i];
</span><span class='line'>        
</span><span class='line'>        SEL getPropertySelector = NSSelectorFromString(getter);
</span><span class='line'>        
</span><span class='line'>        NSString *setterSelectorName =
</span><span class='line'>        [propertyName stringByReplacingCharactersInRange:NSMakeRange(0,1) withString:[[propertyName substringToIndex:1] capitalizedString]];
</span><span class='line'>        
</span><span class='line'>        setterSelectorName = [NSString stringWithFormat:@"set%@:", setterSelectorName];
</span><span class='line'>        
</span><span class='line'>        SEL setPropertySelector = NSSelectorFromString(setterSelectorName);
</span><span class='line'>        
</span><span class='line'>        if ([self respondsToSelector:getPropertySelector] && [view respondsToSelector:setPropertySelector])
</span><span class='line'>        {
</span><span class='line'>            NSObject * propertyValue = [self valueForKey:propertyName];
</span><span class='line'>            
</span><span class='line'>            [view setValue:propertyValue forKey:propertyName];
</span><span class='line'>        }
</span><span class='line'>    }    
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@end
</span></code></pre></td></tr></table></div></figure>


<p>创建一个EmbeddedView.xib，我们想在其它xib中直接link这个EmbeddedView.xib, 还需要创建一个SubView的了类EmbeddedView.<br>
我的xib信息是这样的:<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1edsfrbnwxnj212u0ge771.jpg" alt="" /><br></p>

<p>一切就绪后，运行:<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edsfsk2afbj208v0ft0ss.jpg" alt="" /><br></p>

<p>xib可以快速布署UI, 可以提高开发速度哦。
随便在此预告一下下一篇教程的内容:多Storyboard协作开发。</p>

<p>终于这个教程写完了，完整的Demo可以在此下载:<a href="https://github.com/ondev/LoadNibViewDemo">LoadNibViewDemo</a>.
写个教程我容易吗？ 还希望大家多多支持，你们的支持将是我源源不断的动力。</p>

<hr />

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS App重新签名方法介绍]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/22/ios-appzhong-xin-qian-ming-fang-fa-jie-shao/"/>
    <updated>2014-02-22T14:38:26+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/22/ios-appzhong-xin-qian-ming-fang-fa-jie-shao</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>今天要给大家介绍两种app重新签名的方法, 做一下记录方便需要的朋友。<br>
1. <a href="#md-1">通过Xcode重答名</a> <br>
2. <a href="#md-2">直接修改已签名的iPA文件</a></p>

<!-- more -->


<h3>1.<a name="md-1" id="md-1">通过Xcode重答名</a></h3>

<p>用Xcode打过包的朋友都知道，只需要在Xcode中点两下，就可以签名了，这种方法比较简单直观。今天要介绍的是打包后，不同Mac上重新签名的方法，即传播Xcode Archive.<br></p>

<p>在Xcode中archive成功后，点击Distribute后,我们选择第三个选项：Export as Xcode Archive:<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1eds5kjya4pj20o30h4767.jpg" alt="" /><br></p>

<p>然后我们就会得到一个后缀为xcarchive的文件，用于Mac间传递。现在我们就可以将这个.xcarchive文件发给其它同事，同事收到后双击，就可以在Xcode中打开，接着它就可以Submit to the iOS App Store或Save for Enterprise or Ad Hoc Deployment. 这样就可以达到重签名的目的 <br></p>

<h3>2.<a name="md-2" id="md-2">直接修改已签名的iPA文件</a></h3>

<p>其实iPA文件就是zip文件，只是后缀不同而已。要重签名，我们需要准备证书与provision profile， 证书直接在Keychian里管理，provision profile与证书是对应关系。 真机调试或提交过App到App Store的朋友都应不会陌生。<br></p>

<p>下面直接说步骤：<br>
a.解压iPA文件<br>
b.删掉旧的签名文件<br>
c.拷贝新的provision profile替换旧的embedded.mobileprovision<br>
d.用codesign命令重签名<br>
f.重新zip为iPA文件<br></p>

<p>下面有一个脚本，它完成了上面5步骤：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>if ! ([ -f "$1" ]); then
</span><span class='line'>echo \"${1}\"文件不存在
</span><span class='line'>exit
</span><span class='line'>fi
</span><span class='line'>ipaName=${1%.ipa}
</span><span class='line'>if [ "$ipaName" = "$1" ]; then
</span><span class='line'>echo \"${1}\"不是ipa文件
</span><span class='line'>exit
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>## step 1, unzip ipa file
</span><span class='line'>unzip ${ipaName}.ipa
</span><span class='line'>
</span><span class='line'>## step 2, remove old codesign
</span><span class='line'>rm -rf Payload/*.app/_CodeSignature/
</span><span class='line'>
</span><span class='line'>## step 3, copy new provision profile
</span><span class='line'>cp 123.mobileprovision Payload/*.app/embedded.mobileprovision
</span><span class='line'>
</span><span class='line'>## step 4, codesign with new certificate and provision
</span><span class='line'>(/usr/bin/codesign -f -s "iPhone Developer: XXXXX (XXX)" --resource-rules Payload/*.app/ResourceRules.plist Payload/*.app/) || {
</span><span class='line'>## if code sign error, will to here
</span><span class='line'>echo failed
</span><span class='line'>rm -rf Payload/
</span><span class='line'>exit
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>## step 5, zip it
</span><span class='line'>zip -r ${ipaName}abc.ipa Payload/
</span><span class='line'>rm -rf Payload/
</span></code></pre></td></tr></table></div></figure>


<p>需要注意脚本中有两处需要你们手动修改，第一处是123.mobileprovision，这个文件需要与脚本放同一目录，第二处是XXXXX (XXX), 这儿XXX改为你keychian里有的证书，只需要改XXX, 括号保留。<br></p>

<h3>用法</h3>

<p>保存并修改上面的脚本为resign.sh，再将需要重签名的xxx.ipa与123.mobileprovision文件置于同一目录。然后运行命令：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod 777 resign.sh
</span><span class='line'>./resign.sh xxx.ipa</span></code></pre></td></tr></table></div></figure>


<p>成功后，在目录里会多一个重签名的abc.ipa<br></p>

<hr />

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[动态计算UITableViewCell高度详解]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/21/dong-tai-ji-suan-uitableviewcellgao-du-xiang-jie/"/>
    <updated>2014-02-21T21:49:56+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/21/dong-tai-ji-suan-uitableviewcellgao-du-xiang-jie</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>不知道大家有没有发现，在iOS APP开发过程中，UITableView是我们显示内容常见的控件，本人觉得它是UIKit中最复杂的一个控件。今天要向大家介绍的就是如何动态计算UITableViewCell高度的一经验与技巧，在此做一些总结方便朋友们查阅。<br></p>

<blockquote><p>同时也欢迎广大iOS技术人员加入技术开发群：&lt;疯狂IT人>93916004，众人拾柴火焰高，大家一起讨论研究。<br></p></blockquote>

<p>为了不让讲解空洞抽象，我还是用代码实例的方式进行讲解，这样更容易接收与学习。<br>
本文将介绍四种情况下UITableViewCell的计算方式，分别是：<br></p>

<ol>
<li><a href="#md-1">Auto Layout with UILabel in UITableViewCell</a></li>
<li><a href="#md-2">Auto Layout with UITextView in UITableViewCell</a></li>
<li><a href="#md-3">Manual Layout with UILabel in UITableViewCell</a></li>
<li><a href="#md-4">Manual Layout with UITextView in UITableViewCell</a></li>
<li><a href="#md-5">随UITextView高度动态改变Cell高度</a></li>
</ol>


<blockquote><p>由于只是一个demo，所以命名这些都是随意从简。</p></blockquote>

<!-- more -->


<p>首先创建一个Single Page的工程，我命名为CellHeightDemo</p>

<h3><a name="md-1" id="md-1">1. Auto Layout with UILabel in UITableViewCell</a></h3>

<p>创建一个空的xib,命名为C1.xib, 然后拖入一个UITableViewCell控件。接着创建一个UITableViewCell的子类，命名为C1类。然后在C1.xib中，将与C1类进行关联。别给我说你不会关联，如果不会那看下图你就明白了。<sup>V</sup>^<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edryoxqtp4j207806v0sx.jpg" alt="" /><br>
只需要在Class那里写入关联的类名C1即可。<br><br></p>

<p>还有由于UITableViewCell需要重用功能，所以我们还需要设置一个重用标识<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1edrysb61mgj207906vdg8.jpg" alt="" /><br>
在Identifier那里写入重用标识C1,当然你也可以用任意字符。不过后面代码里需要这个字符。<br><br></p>

<p>接着我们来布局。用到了auto layout, 在此我不想介绍auto layout, 以后有时间再专门介绍，下图就是我布局<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1edrywtqnijj20vk0dv416.jpg" alt="" /><br>
这儿有两点需要说明：1. UILabel的属性Lines这儿设为了0表示显示多行。2. Auto Layout一定要建立完完整。<br><br></p>

<p>接着我们在UITableView中来使用我们自定义的UITableViewCell C1.<br>
首先我们创建一个UITableViewController的子类T1ViewController, 接着在Main.storyboard中拖入一个UITableViewController，并关联T1ViewController.<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1edrzk4ttqrj20kj0i7dhk.jpg" alt="" /><br><br></p>

<p>一切都准备好了，那我们现在来写点代码，给UITableView加点料。<br>
我们想要我们的UITableView使用C1.xib中自定义的Cell,那么我们需要向UITableView进行注册。<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UINib *cellNib = [UINib nibWithNibName:@"C1" bundle:nil];
</span><span class='line'>[self.tableView registerNib:cellNib forCellReuseIdentifier:@"C1"];</span></code></pre></td></tr></table></div></figure>


<p>这样就进行注册了，接着我们还需要每行显示的数据，为了简单一点，我就声明了一个NSArray变量来存放数据。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.tableData = @[@"1\n2\n3\n4\n5\n6", @"123456789012345678901234567890", @"1\n2", @"1\n2\n3", @"1"];</span></code></pre></td></tr></table></div></figure>


<p>现在实现UITableViewDataSource的protocol:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
</span><span class='line'>{
</span><span class='line'>    // Return the number of rows in the section.
</span><span class='line'>    return self.tableData.count;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    C1 *cell = [self.tableView dequeueReusableCellWithIdentifier:@"C1"];
</span><span class='line'>    cell.t.text = [self.tableData objectAtIndex:indexPath.row];
</span><span class='line'>    return cell;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>从self.tableData中的数据我们可以看到，每一个Cell显示的数据高度是不一样的，那么我们需要动态计算Cell的高度。由于是auto layout，所以我们需要用到一个新的API systemLayoutSizeFittingSize:来计算UITableViewCell所占空间高度。Cell的高度是在- (CGFloat)tableView:(UITableView <em>)tableView heightForRowAtIndexPath:(NSIndexPath </em>)indexPath这个UITableViewDelegate的方法里面传给UITableView的。<br></p>

<blockquote><p>这里有一个需要特别注意的问题，也是效率问题。UITableView是一次性计算完所有Cell的高度，如果有1W个Cell，那么- (CGFloat)tableView:(UITableView <em>)tableView heightForRowAtIndexPath:(NSIndexPath </em>)indexPath就会触发1W次，然后才显示内容。不过在iOS7以后，提供了一个新方法可以避免这1W次调用，它就是- (CGFloat)tableView:(UITableView <em>)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath </em>)indexPath。要求返回一个Cell的估计值，实现了这个方法，那只有显示的Cell才会触发计算高度的protocol. 由于systemLayoutSizeFittingSize需要cell的一个实例才能计算，所以这儿用一个成员变量存一个Cell的实列，这样就不需要每次计算Cell高度的时候去动态生成一个Cell实例，这样即方便也高效也少用内存，可谓一举三得。</p></blockquote>

<p>我们声明一个存计算Cell高度的实例变量：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (nonatomic, strong) UITableViewCell *prototypeCell;</span></code></pre></td></tr></table></div></figure>


<p>然后初始化它：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>self.prototypeCell  = [self.tableView dequeueReusableCellWithIdentifier:@"C1"];</span></code></pre></td></tr></table></div></figure>


<p>下面是计算Cell高度的实现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
</span><span class='line'>    C1 *cell = (C1 *)self.prototypeCell;
</span><span class='line'>    cell.t.text = [self.tableData objectAtIndex:indexPath.row];
</span><span class='line'>    CGSize size = [cell.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize];
</span><span class='line'>    NSLog(@"h=%f", size.height + 1);
</span><span class='line'>    return 1  + size.height;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>看了代码，可能你有点疑问，为何这儿要加1呢？笔者告诉你，如果不加1，结果就是错误的，Cell中UILabel将显示不正确。原因就是因为这行代码CGSize size = [cell.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize];由于是在cell.contentView上调用这个方法，那么返回的值将是contentView的高度，UITableViewCell的高度要比它的contentView要高1,也就是它的分隔线的高度。如果你不相信，那请看C1.xib的属性，比较下面两张图。<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1eds2g75es4j20vi0bd3zx.jpg" alt="" />
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1eds2gqoui2j20vl0eegni.jpg" alt="" />
发现没Cell的高度是127, 面contentView的高度是126, 这下明白了吧。</p>

<p>为了让读者看清楚，我将Cell中UILabel的背景色充为了light gray.下面是运行效果：<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1eds2k4ighsj208y0ejdgc.jpg" alt="" /></p>

<h3><a name="md-2" id="md-2">2. Auto Layout with UITextView in UITableViewCell</a></h3>

<p>本小段教程将介绍UITextView在cell中计算高度需要注意的地方。同样参考上面我们创建一个C2.xib, UITableViewCell的子类C2,并关联C2.xib与C2类。并在C2.xib中对其布局，同样使用了auto layout. 布局如下图：<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1eds2o28t18j20vp0ej41f.jpg" alt="" /></p>

<p>创始UITableViewController的了类T2ViewController，在Main.storyboard中拖入UITableViewController,并关联他们。接着代码中注册C2.xib到UITableView.</p>

<p>下面计是计算高度的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
</span><span class='line'>    C2 *cell = (C2 *)self.prototypeCell;
</span><span class='line'>    cell.t.text = [self.tableData objectAtIndex:indexPath.row];
</span><span class='line'>    CGSize size = [cell.contentView systemLayoutSizeFittingSize:UILayoutFittingCompressedSize];
</span><span class='line'>    CGSize textViewSize = [cell.t sizeThatFits:CGSizeMake(cell.t.frame.size.width, FLT_MAX)];
</span><span class='line'>    CGFloat h = size.height + textViewSize.height;
</span><span class='line'>    h = h &gt; 89 ? h : 89;  //89是图片显示的最低高度， 见xib
</span><span class='line'>    NSLog(@"h=%f", h);
</span><span class='line'>    return 1 + h;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在这儿我们是通过sizeThatFits:计算的UITextView的高度(这是计算UITextView内容全部显示时的方法，在第四小段中我们还会用到它)，然后加上systemLayoutSizeFittingSize:返回的高度。为什么要这样呢？ 因为UITextView内容的高度不会影响systemLayoutSizeFittingSize计算。这句话什么意思呢？我真不知道如何用言语表达了。还是先上一张图吧：<br>
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1eds2zaziwfj20bf05udg4.jpg" alt="" /><br>
此图中距顶的约束是10, 距底的约束8, 距左边约束是87,距右边的约束是13, 那么systemLayoutSizeFittingSize:返回的CGSize为height等于19, size等于100. 它UITextView的frame是不影响systemLayoutSizeFittingSize:的计算。不知道这样说大家明白没。<br>
所以，我们需要加上textViewSize.height. <br></p>

<p>下面是运行效果：<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1eds36rqilej208w0cpt94.jpg" alt="" /></p>

<h3><a name="md-3" id="md-3">3. Manual Layout with UILabel in UITableViewCell</a></h3>

<p>本小段教程将介绍UILabel在Manual layout cell中计算高度， 原理是根据字体与字符串长度来计算长度与宽度。
按照前面介绍的，我们需要创建C3.xib, C3类, T3ViewController类,Main.storyboard中拖入UITableViewController，并分别建立关联。 为了简单，C3.xib中我就不加padding之类的了，如图<br></p>

<blockquote><p>记得关闭C3.xib的auto layout</p></blockquote>

<p><img src="http://ww1.sinaimg.cn/large/6bf526ffgw1eds3ek4ejjj20vq0dr0ue.jpg" alt="" /><br></p>

<p>直接上代码了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    C3 *cell = [self.tableView dequeueReusableCellWithIdentifier:@"C3"];
</span><span class='line'>    cell.t.text = [self.tableData objectAtIndex:indexPath.row];
</span><span class='line'>    [cell.t sizeToFit];
</span><span class='line'>    return cell;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
</span><span class='line'>    C3 *cell = (C3 *)self.prototypeCell;
</span><span class='line'>    NSString *str = [self.tableData objectAtIndex:indexPath.row];
</span><span class='line'>    cell.t.text = str;
</span><span class='line'>    CGSize s = [str calculateSize:CGSizeMake(cell.t.frame.size.width, FLT_MAX) font:cell.t.font];
</span><span class='line'>    CGFloat defaultHeight = cell.contentView.frame.size.height;
</span><span class='line'>    CGFloat height = s.height &gt; defaultHeight ? s.height : defaultHeight;
</span><span class='line'>    NSLog(@"h=%f", height);
</span><span class='line'>    return 1  + height;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这儿用到了一个NSString的Cagetory方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (CGSize)calculateSize:(CGSize)size font:(UIFont *)font {
</span><span class='line'>    CGSize expectedLabelSize = CGSizeZero;
</span><span class='line'>    
</span><span class='line'>    if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7) {
</span><span class='line'>        NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];
</span><span class='line'>        paragraphStyle.lineBreakMode = NSLineBreakByWordWrapping;
</span><span class='line'>        NSDictionary *attributes = @{NSFontAttributeName:font, NSParagraphStyleAttributeName:paragraphStyle.copy};
</span><span class='line'>        
</span><span class='line'>        expectedLabelSize = [self boundingRectWithSize:size options:NSStringDrawingUsesLineFragmentOrigin attributes:attributes context:nil].size;
</span><span class='line'>    }
</span><span class='line'>    else {
</span><span class='line'>        expectedLabelSize = [self sizeWithFont:font
</span><span class='line'>                                       constrainedToSize:size
</span><span class='line'>                                           lineBreakMode:NSLineBreakByWordWrapping];
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    return CGSizeMake(ceil(expectedLabelSize.width), ceil(expectedLabelSize.height));
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>原理上面我已说了，这儿没有什么好说明的，代码一目了然。</p>

<p>运行效果如图：<br>
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1eds3jmducyj208u0ekjrq.jpg" alt="" /></p>

<h3><a name="md-4" id="md-4">4. Manual Layout with UITextView in UITableViewCell</a></h3>

<p>本小段教程将介绍UITextView在Manual layout cell中计算高度， 原理是与第二小节里的相同，用sizeThatFits:的方法计算UITextView的长度与高度。然后加上padding就是Cell的高度。
按照前面介绍的，我们需要创建C4.xib, C4类, T4ViewController类,Main.storyboard中拖入UITableViewController，并分别建立关联。 为了简单，C4.xib中我就不加padding之类的了，如图<br></p>

<blockquote><p>计得关闭C4.xib的auto layout</p></blockquote>

<p><img src="http://ww3.sinaimg.cn/large/6bf526ffgw1eds3nkgxyyj20vn0g6dhh.jpg" alt="" /> <br></p>

<p>也直接上代码了，直观明了：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    C4 *cell = [self.tableView dequeueReusableCellWithIdentifier:@"C4"];
</span><span class='line'>    cell.t.text = [self.tableData objectAtIndex:indexPath.row];
</span><span class='line'>    [cell.t sizeToFit];
</span><span class='line'>    return cell;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
</span><span class='line'>    C4 *cell = (C4 *)self.prototypeCell;
</span><span class='line'>    NSString *str = [self.tableData objectAtIndex:indexPath.row];
</span><span class='line'>    cell.t.text = str;
</span><span class='line'>    CGSize s =  [cell.t sizeThatFits:CGSizeMake(cell.t.frame.size.width, FLT_MAX)];
</span><span class='line'>    CGFloat defaultHeight = cell.contentView.frame.size.height;
</span><span class='line'>    CGFloat height = s.height &gt; defaultHeight ? s.height : defaultHeight;
</span><span class='line'>    return 1  + height;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>运行效果：<br>
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1eds3q86ryyj208y0ei0t5.jpg" alt="" /> <br></p>

<h3><a name="md-5" id="md-5">5.随UITextView高度动态改变Cell高度</a></h3>

<p>本小节要介绍的一个功能是，UITextView中UITableViewCell中，当输入UITextView中的字变多/变少时，高度变化，Cell高度与随之变化的功能。<br>
按照前面介绍的，我们需要创建C5.xib, C5类, T5ViewController类,Main.storyboard中拖入UITableViewController，并分别建立关联。 为了简单，C5.xib中我就不加padding之类的了，如图<br></p>

<blockquote><p>记得开启C5.xib的auto layout</p></blockquote>

<p><img src="http://ww3.sinaimg.cn/large/6bf526ffgw1eds3y3bt19j20vn0fq766.jpg" alt="" /> <br></p>

<p>先看代码：<br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
</span><span class='line'>{
</span><span class='line'>    C5 *cell = [self.tableView dequeueReusableCellWithIdentifier:@"C5"];
</span><span class='line'>    cell.t.text = @"123";
</span><span class='line'>    cell.t.delegate = self;
</span><span class='line'>    return cell;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#pragma mark - UITableViewDelegate
</span><span class='line'>- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
</span><span class='line'>    C5 *cell = (C5 *)self.prototypeCell;
</span><span class='line'>    cell.t.text = self.updatedStr;
</span><span class='line'>    CGSize s =  [cell.t sizeThatFits:CGSizeMake(cell.t.frame.size.width, FLT_MAX)];
</span><span class='line'>    CGFloat defaultHeight = cell.contentView.frame.size.height;
</span><span class='line'>    CGFloat height = s.height &gt; defaultHeight ? s.height : defaultHeight;
</span><span class='line'>    return 1  + height;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#pragma mark - UITextViewDelegate
</span><span class='line'>- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text {
</span><span class='line'>    if ([text isEqualToString:@"\n"]) {
</span><span class='line'>        NSLog(@"h=%f", textView.contentSize.height);
</span><span class='line'>    }
</span><span class='line'>    return YES;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)textViewDidChange:(UITextView *)textView {
</span><span class='line'>    self.updatedStr = textView.text;
</span><span class='line'>    [self.tableView beginUpdates];
</span><span class='line'>    [self.tableView endUpdates];
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>原理就是UITextView内容改变的时候，计算自身高度，然后通知UITableView更新，这样就会触发UITableViewCell高度重新计算，以达到目的。 <br></p>

<hr />

<p>本文只是简单的介绍了一些原理与技巧，细节之处还请参看<a href="https://github.com/ondev/CellHeightDemo">源码</a> <br></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>参考：<br>
<a href="http://www.howlin-interactive.com/2013/01/creating-a-self-sizing-uitextview-within-a-uitableviewcell-in-ios-6/">http://www.howlin-interactive.com/2013/01/creating-a-self-sizing-uitextview-within-a-uitableviewcell-in-ios-6/</a>
<a href="http://johnszumski.com/blog/auto-layout-for-table-view-cells-with-dynamic-heights">http://johnszumski.com/blog/auto-layout-for-table-view-cells-with-dynamic-heights</a>
<a href="http://technet.weblineindia.com/mobile/add-auto-layout-support-for-uiscrollview-with-example-in-ios-app-development/">http://technet.weblineindia.com/mobile/add-auto-layout-support-for-uiscrollview-with-example-in-ios-app-development/</a>
<a href="http://useyourloaf.com/blog/2014/02/14/table-view-cells-with-varying-row-heights.html">http://useyourloaf.com/blog/2014/02/14/table-view-cells-with-varying-row-heights.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS7计算字符串所占空间大小]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/17/ios7ji-suan-zi-fu-chuan-suo-zhan-kong-jian-da-xiao/"/>
    <updated>2014-02-17T21:42:20+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/17/ios7ji-suan-zi-fu-chuan-suo-zhan-kong-jian-da-xiao</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>iOS7以前计算NSString所占size的API是NSString的成员方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (CGSize)sizeWithFont:(UIFont *)font constrainedToSize:(CGSize)size lineBreakMode:(NSLineBreakMode)lineBreakMode</span></code></pre></td></tr></table></div></figure>


<p>现在iOS7中如果用这个方法计算，计算出来的值要比实际值小，所以可能出现显示不完全的效果。这是因为在iOS7中，上面这个方法已被新的API替代了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (CGRect)boundingRectWithSize:(CGSize)size options:(NSStringDrawingOptions)options attributes:(NSDictionary *)attributes context:(NSStringDrawingContext *)context</span></code></pre></td></tr></table></div></figure>


<p>下面的代码是一个示例，大家可以做为参考：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CGSize expectedLabelSize = CGSizeZero;
</span><span class='line'>    
</span><span class='line'>    if ([[[UIDevice currentDevice] systemVersion] floatValue] &gt;= 7) {
</span><span class='line'>        NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];
</span><span class='line'>        paragraphStyle.lineBreakMode = NSLineBreakByWordWrapping;
</span><span class='line'>        NSDictionary *attributes = @{NSFontAttributeName:sideLabel.font, NSParagraphStyleAttributeName:paragraphStyle.copy};
</span><span class='line'>        
</span><span class='line'>        expectedLabelSize = [sideLabel.text boundingRectWithSize:CGSizeMake(260, 999) options:NSStringDrawingUsesLineFragmentOrigin attributes:attributes context:nil].size;
</span><span class='line'>    }
</span><span class='line'>    else {
</span><span class='line'>        expectedLabelSize = [sideLabel.text sizeWithFont:sideLabel.font
</span><span class='line'>                                       constrainedToSize:CGSizeMake(260, 999)
</span><span class='line'>                                           lineBreakMode:sideLabel.lineBreakMode];
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p>这样就正确了。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FFmpeg for iOS7]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/12/ffmpeg-for-iOS7/"/>
    <updated>2014-02-12T11:24:19+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/12/ffmpeg-for-iOS7</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>最近花了点时间来学习ffmpeg for iOS.
首先是编译，在<a href="https://github.com/kewlbear/FFmpeg-iOS-build-script">github</a>上已有人写了编译脚本，我试了，能成功编译。</p>

<p>接着是使用ffmpeg, 在<a href="https://github.com/kolyvan/kxmovie">github</a>上找到一个工程，不过没有更新了（需要ruby环境），它的rake在xcode5环境下是编译不过的。不过我已修改了它的编译脚本，并支持xcode5+iOS7，rake可以直接使用, 大家可以在我的<a href="https://github.com/ondev/kxmovie">github</a>上下载， 我已向原作者提交了pull request。库没有加x86_64，需要的参考arm64自己加吧，这样也明白脚本编译的原理。 <br>
这个工程比较不错用opengles+coreaudio的方式播放视频，值得大家研究研究。</p>

<p>ffmpeg编译通过了，接下来就是ffmpeg的世界。</p>

<p>大家有问题可以给我留言交流也可以加我的qq群交流(疯狂IT人):93916004</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下配置Mantis]]></title>
    <link href="http://www.ifun.cc/blog/2014/02/11/mac-xia-pei-zi-mantis/"/>
    <updated>2014-02-11T11:24:19+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/02/11/mac-xia-pei-zi-mantis</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>安装我就不介绍了，与传统的php应用安装一样，放到对应的site目录下，然后在浏览器方问进行安装。
安装成功后会有红色的warning,</p>

<h3>去掉Warning</h3>

<p>然后修改phi.ini</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo vim /etc/php.ini</span></code></pre></td></tr></table></div></figure>


<p>中的值</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>date.timezone = Asia/Shanghai</span></code></pre></td></tr></table></div></figure>


<p>然后重启apache</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apachectl restart</span></code></pre></td></tr></table></div></figure>


<h3>中文支持</h3>

<p>修改config_defaults_inc.php</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$g_default_language      = 'chinese_simplified';</span></code></pre></td></tr></table></div></figure>


<p>如果想方便，你可以下载一键安装包
<a href="https://bitnami.com/stack/mantis/installer">https://bitnami.com/stack/mantis/installer</a></p>

<p>与svn的整合，我没有配置成功，还是介绍一下我所做的：
用到了mantis的<a href="https://github.com/mantisbt-plugins/source-integration">插件</a>
Mac自带的svn server，见参考。</p>

<p>有成功配置的朋友，希望能分享一下。<br></p>

<p>参考：
<a href="http://xiayong.blog.51cto.com/6292420/1088790">Mac下配置svn server</a>
<a href="https://github.com/mantisbt-plugins/source-integration">VCS plugs</a></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
</feed>
