<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Haven's Blog]]></title>
  <link href="http://www.ifun.cc/atom.xml" rel="self"/>
  <link href="http://www.ifun.cc/"/>
  <updated>2015-11-04T15:57:38+08:00</updated>
  <id>http://www.ifun.cc/</id>
  <author>
    <name><![CDATA[Haven]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xcode7 Storyboard Reference]]></title>
    <link href="http://www.ifun.cc/blog/2015/11/04/xcode7-storyboard-reference/"/>
    <updated>2015-11-04T15:15:17+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/11/04/xcode7-storyboard-reference</id>
    <content type="html"><![CDATA[<p>Storyboard在团队开发中一直被人鄙弃，因为其Merge的时候很容易出现冲突。在Xcode7中Storyboard Reference的引入，这个问题将得到解决。</p>

<p>接下来我们就来看看它能做什么。</p>

<p>用Xcode7创建一个tabbar的工程。</p>

<ol>
<li>分离storyboard</li>
</ol>


<p>在Main.storyboard中选中要分离的UIViewController, 然后顺序点菜单：Editor->Refactor to Storyboard, 这样就可以将选中的UIViewController分离到一个新的storyboard中去。而在Main.storyboard中被分离出来的UIViewController将被Storyboard reference取代。点击它，我们看看它的属性，如图:
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1exoz7tt4dnj20g107eq3b.jpg" alt="" />
右边的属性表示这引Storyboard reference指向的Storyboard。</p>

<p>我们也可以拖一个Storyboard Reference出来，然后在它属性中选择指向的Storyboard建立关系。</p>

<ol>
<li>不同Storyboard中相互引用UIViewController</li>
</ol>


<p>在Main.storyboard中拖一个UIViewController，并设置其Storyboard ID为ThreeViewController（可以为任意值）, 如下图:
<img src="http://ww2.sinaimg.cn/large/6bf526ffgw1exozk23pvoj209v075dgk.jpg" alt="" /></p>

<p>然后在First.storyboard中拖一个Storyboard Reference, 并设置其属性，如图：
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1exozvaxkt9j20ed07kgm0.jpg" alt="" /></p>

<p>Storyboard Reference如果没有设定Refenenced ID， 那么就指向Storyboard的Initial View Controller, 指定了，就指向指定的View Controller.</p>

<p>很好用吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译opencore-amr for iOS8并支持bitcode]]></title>
    <link href="http://www.ifun.cc/blog/2015/10/23/bian-yi-opencore-amr-for-ios8bing-zhi-chi-bitcode/"/>
    <updated>2015-10-23T09:27:30+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/10/23/bian-yi-opencore-amr-for-ios8bing-zhi-chi-bitcode</id>
    <content type="html"><![CDATA[<p>由于很多网友向我反应，<a href="http://www.ifun.cc/blog/2014/02/09/amr-for-ios7/">这儿</a>这个编译脚本不能成功编译iOS8的库，所以在空闲时间搞了一下, 让其支持iOS8与bitcode.</p>

<p>直接上菜</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>set -xe
</span><span class='line'>
</span><span class='line'>VERSION="0.1.3"
</span><span class='line'>SDKVERSION="8.4"
</span><span class='line'>LIBSRCNAME="opencore-amr"
</span><span class='line'>
</span><span class='line'>CURRENTPATH=`pwd`
</span><span class='line'>
</span><span class='line'>mkdir -p "${CURRENTPATH}/src"
</span><span class='line'>tar zxvf ${LIBSRCNAME}-${VERSION}.tar.gz -C "${CURRENTPATH}/src"
</span><span class='line'>cd "${CURRENTPATH}/src/${LIBSRCNAME}-${VERSION}"
</span><span class='line'>
</span><span class='line'>DEVELOPER=`xcode-select -print-path`
</span><span class='line'>DEST="${CURRENTPATH}/lib-ios"
</span><span class='line'>mkdir -p "${DEST}"
</span><span class='line'>
</span><span class='line'>ARCHS="armv7 armv7s arm64 i386 x86_64"
</span><span class='line'># ARCHS="armv7"
</span><span class='line'>LIBS="libopencore-amrnb.a libopencore-amrwb.a"
</span><span class='line'>
</span><span class='line'>DEVELOPER=`xcode-select -print-path`
</span><span class='line'>
</span><span class='line'>for arch in $ARCHS; do
</span><span class='line'>case $arch in
</span><span class='line'>arm*)
</span><span class='line'>
</span><span class='line'>IOSV="-miphoneos-version-min=7.0"
</span><span class='line'>if [ $arch == "arm64" ]
</span><span class='line'>then
</span><span class='line'>IOSV="-miphoneos-version-min=7.0"
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>echo "Building for iOS $arch ****************"
</span><span class='line'>SDKROOT="$(xcrun --sdk iphoneos --show-sdk-path)"
</span><span class='line'>CC="$(xcrun --sdk iphoneos -f clang)"
</span><span class='line'>CXX="$(xcrun --sdk iphoneos -f clang++)"
</span><span class='line'>CPP="$(xcrun -sdk iphonesimulator -f clang++)"
</span><span class='line'>CFLAGS="-isysroot $SDKROOT -arch $arch $IOSV -isystem $SDKROOT/usr/include -fembed-bitcode"
</span><span class='line'>CXXFLAGS=$CFLAGS
</span><span class='line'>CPPFLAGS=$CFLAGS
</span><span class='line'>export CC CXX CFLAGS CXXFLAGS CPPFLAGS
</span><span class='line'>
</span><span class='line'>./configure \
</span><span class='line'>--host=arm-apple-darwin \
</span><span class='line'>--prefix=$DEST \
</span><span class='line'>--disable-shared --enable-static
</span><span class='line'>;;
</span><span class='line'>*)
</span><span class='line'>IOSV="-mios-simulator-version-min=7.0"
</span><span class='line'>echo "Building for iOS $arch*****************"
</span><span class='line'>
</span><span class='line'>SDKROOT=`xcodebuild -version -sdk iphonesimulator Path`
</span><span class='line'>CC="$(xcrun -sdk iphoneos -f clang)"
</span><span class='line'>CXX="$(xcrun -sdk iphonesimulator -f clang++)"
</span><span class='line'>CPP="$(xcrun -sdk iphonesimulator -f clang++)"
</span><span class='line'>CFLAGS="-isysroot $SDKROOT -arch $arch $IOSV -isystem $SDKROOT/usr/include -fembed-bitcode"
</span><span class='line'>CXXFLAGS=$CFLAGS
</span><span class='line'>CPPFLAGS=$CFLAGS
</span><span class='line'>export CC CXX CFLAGS CXXFLAGS CPPFLAGS
</span><span class='line'>./configure \
</span><span class='line'>--prefix=$DEST \
</span><span class='line'>--disable-shared
</span><span class='line'>;;
</span><span class='line'>esac
</span><span class='line'>make &gt; /dev/null
</span><span class='line'>make install
</span><span class='line'>make clean
</span><span class='line'>for i in $LIBS; do
</span><span class='line'>mv $DEST/lib/$i $DEST/lib/$i.$arch
</span><span class='line'>done
</span><span class='line'>done
</span><span class='line'>
</span><span class='line'>for i in $LIBS; do
</span><span class='line'>input=""
</span><span class='line'>for arch in $ARCHS; do
</span><span class='line'>input="$input $DEST/lib/$i.$arch"
</span><span class='line'>done
</span><span class='line'>lipo -create -output $DEST/lib/$i $input
</span><span class='line'>done</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac iOS推送测试]]></title>
    <link href="http://www.ifun.cc/blog/2015/09/21/mac-iostui-song-ce-shi/"/>
    <updated>2015-09-21T12:37:32+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/09/21/mac-iostui-song-ce-shi</id>
    <content type="html"><![CDATA[<p>今天给大家介绍一个自己写的iOS推送测试程序，在Mac下有一个同类产品PushMeBaby,它使用的是.cer证书。一般我们都使用p12文件来保存证书与密钥，所以我写了一个用p12文件来测试推送的App,命名为EasyPush. <a href="https://github.com/ondev/EasyPush">源码在此</a>，感兴趣的朋友可以拿来看看。</p>

<p>使用到的第三方库有:<a href="https://github.com/robbiehanson/CocoaAsyncSocket">CocoaAsyncSocket</a></p>

<p>库依赖管理:<a href="https://github.com/Carthage/Carthage">Carthage</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenGL ES简明教程之2]]></title>
    <link href="http://www.ifun.cc/blog/2015/04/02/opengl-esjian-ming-jiao-cheng-zhi-2/"/>
    <updated>2015-04-02T15:50:23+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/04/02/opengl-esjian-ming-jiao-cheng-zhi-2</id>
    <content type="html"><![CDATA[<p>在本系统教程1中我们做好了准备，这次我们开始我们的OpenGLES的渲染。<br></p>

<h4>Step 1</h4>

<p>创建一个Single Page的iOS工程。</p>

<h4>Step 2</h4>

<p>创建一个UIView的子类，比如叫EGLView.<br>
在EGLView.h中声明三个变量</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>EAGLContext *m_context;
</span><span class='line'>GLuint m_renderbuffer;
</span><span class='line'>GLuint m_framebuffer;</span></code></pre></td></tr></table></div></figure>


<p>在EGLView.m中引入OpenglES头文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;OpenGLES/ES1/gl.h&gt;
</span><span class='line'>#import &lt;OpenGLES/ES1/glext.h&gt;</span></code></pre></td></tr></table></div></figure>


<p>然后实现如下方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ (Class) layerClass
</span><span class='line'>{
</span><span class='line'>    return [CAEAGLLayer class];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (id) initWithFrame: (CGRect) frame
</span><span class='line'>{
</span><span class='line'>    if (self = [super initWithFrame:frame]) {
</span><span class='line'>        CAEAGLLayer* eaglLayer = (CAEAGLLayer*) super.layer;
</span><span class='line'>        eaglLayer.opaque = YES;
</span><span class='line'>        
</span><span class='line'>        // step 1 创建Context
</span><span class='line'>        EAGLRenderingAPI api = kEAGLRenderingAPIOpenGLES1;
</span><span class='line'>        m_context = [[EAGLContext alloc] initWithAPI:api];
</span><span class='line'>
</span><span class='line'>        if (!m_context) {
</span><span class='line'>            api = kEAGLRenderingAPIOpenGLES1;
</span><span class='line'>            m_context = [[EAGLContext alloc] initWithAPI:api];
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>      // step 2 马上设置为当前Context
</span><span class='line'>        if (!m_context || ![EAGLContext setCurrentContext:m_context]) {
</span><span class='line'>            return nil;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        if (api == kEAGLRenderingAPIOpenGLES1) {
</span><span class='line'>            NSLog(@"Using OpenGL ES 1.1");
</span><span class='line'>        } else {
</span><span class='line'>            NSLog(@"Using OpenGL ES 2.0");
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>      // step 3 创建render buffer 也叫 color buffer
</span><span class='line'>        glGenRenderbuffersOES(1, &m_renderbuffer);
</span><span class='line'>        glBindRenderbufferOES(GL_RENDERBUFFER_OES, m_renderbuffer);
</span><span class='line'>        
</span><span class='line'>        // step 4, 这一步一定要在step 3之后，否则会失败
</span><span class='line'>        [m_context renderbufferStorage:GL_RENDERBUFFER fromDrawable: eaglLayer];
</span><span class='line'>        
</span><span class='line'>        
</span><span class='line'>        // step 5 创建frame buffer
</span><span class='line'>        glGenFramebuffersOES(1, &m_framebuffer);
</span><span class='line'>        glBindFramebufferOES(GL_FRAMEBUFFER_OES, m_framebuffer);
</span><span class='line'>        glFramebufferRenderbufferOES(GL_FRAMEBUFFER_OES, GL_COLOR_ATTACHMENT0_OES, GL_RENDERBUFFER_OES, m_renderbuffer);
</span><span class='line'>        
</span><span class='line'>        //这句可有可无
</span><span class='line'>        GLenum status = glCheckFramebufferStatusOES(GL_FRAMEBUFFER_OES);
</span><span class='line'>        if (status != GL_FRAMEBUFFER_COMPLETE_OES) {
</span><span class='line'>            NSLog(@"err");
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        // step 6 设置 view port
</span><span class='line'>        glViewport(0, 0, frame.size.width, frame.size.height);
</span><span class='line'>        
</span><span class='line'>        [self drawView: nil];
</span><span class='line'>        m_timestamp = CACurrentMediaTime();
</span><span class='line'>
</span><span class='line'>        CADisplayLink *displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(drawView:)];
</span><span class='line'>        [displayLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];
</span><span class='line'>    }
</span><span class='line'>    return self;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void) drawView: (CADisplayLink*) displayLink
</span><span class='line'>{
</span><span class='line'>    
</span><span class='line'>    glLoadIdentity();
</span><span class='line'>    glClearColor(0.7, 0.7, 0.7, 1.0);
</span><span class='line'>    glClear(GL_COLOR_BUFFER_BIT);
</span><span class='line'>     
</span><span class='line'>    static GLfloat vertexData[] = {-0.4f,-0.4f, 0.0f, 0.4f,-0.4f, 0.0f, 0.0f, 0.4f, 0.0f};
</span><span class='line'>    glEnableClientState(GL_VERTEX_ARRAY);
</span><span class='line'>    glVertexPointer(3, GL_FLOAT, 0, vertexData);
</span><span class='line'>    glColor4f(1.0f, 1.0f, 0.66f, 1.0f);
</span><span class='line'>    glDrawArrays(GL_TRIANGLES, 0, 3);
</span><span class='line'>
</span><span class='line'>    [m_context presentRenderbuffer:GL_RENDERBUFFER];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>Step 3</h4>

<p>使用EGLView<br>
在ViewController.m中的viewDidLoad中加以下代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CGRect frameSize;
</span><span class='line'>UIScreen* screen = [UIScreen mainScreen];
</span><span class='line'>CGFloat    scale = 1.0;
</span><span class='line'>if ([UIScreen instancesRespondToSelector:@selector(scale)])
</span><span class='line'>{
</span><span class='line'>    scale = [screen scale];
</span><span class='line'>}
</span><span class='line'>CGRect appFrame = [screen bounds];
</span><span class='line'>frameSize       = CGRectMake(appFrame.origin.x, appFrame.origin.y, appFrame.size.width, appFrame.size.height);
</span><span class='line'>EAGLView *v = [[EAGLView alloc] initWithFrame:frameSize];
</span><span class='line'>
</span><span class='line'>[self.view addSubview:v];</span></code></pre></td></tr></table></div></figure>


<p>运行吧，将会看到一个黄色的三角形，代码里有明确的注释不不多解释。<br>
glVertexPointer第一个参数表示每个顶点占几个顶点数组成员，这儿3表示点3个(因为一个点是x,y,z). 第二个参数是顶点是什么类型数据，这儿是GLfloat对应的就是GL_FLOAT, 第三个是每个顶点之间的步长，如果数据中有存color就需要设置这儿，这儿没有color，所以就设为0表示边续，最后一个参数则是存顶点数据的内存。</p>

<p>glDrawArrays第一个参数表示绘制的方式，看下面图就明白了，第二个表示顶点数据内存中的起始索引，这儿为0,最后一个表示顶点的个数，三角形有3个顶点，所以这儿为3.如果不明白，再仔细消化一下。<br>
<img src="http://www.ifun.cc/images/openglesdrawmodel.png" alt="" /></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS自动化测试]]></title>
    <link href="http://www.ifun.cc/blog/2015/03/30/ioszi-dong-hua-ce-shi/"/>
    <updated>2015-03-30T09:21:53+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/03/30/ioszi-dong-hua-ce-shi</id>
    <content type="html"><![CDATA[<p>给一些关键字，有时间再详细补上</p>

<p>MonkeyTalk</p>

<p>FruitStrap</p>

<p>ynma3k</p>

<p>Athrun</p>

<p>tuneup</p>

<p>InstrumentsDriver</p>

<p>ULAutomation</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NodeJS版本管理]]></title>
    <link href="http://www.ifun.cc/blog/2015/03/29/nodejsban-ben-guan-li/"/>
    <updated>2015-03-29T20:28:04+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/03/29/nodejsban-ben-guan-li</id>
    <content type="html"><![CDATA[<p>在Mac上可以通过brew来更新nodejs</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo brew upgrade node</span></code></pre></td></tr></table></div></figure>


<p>还有一种方法是用n, n也是nodejs的项目，首先安装它:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo npm install -g n</span></code></pre></td></tr></table></div></figure>


<p>下面命令升级nodejs</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo n 0.10.33
</span><span class='line'>sudo n stable
</span><span class='line'>sudo n latest</span></code></pre></td></tr></table></div></figure>


<p>更详细的命令请查看使用帮助:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>n --help</span></code></pre></td></tr></table></div></figure>


<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java解析Html]]></title>
    <link href="http://www.ifun.cc/blog/2015/03/29/javajie-xi-html/"/>
    <updated>2015-03-29T13:20:36+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/03/29/javajie-xi-html</id>
    <content type="html"><![CDATA[<p>最近用到了Java解析Html的一个库Jsoup, 这儿是<a href="http://jsoup.org/">官网</a>, 在此分享给大家，有这方面需要的朋友可以试一试。</p>

<p>有三个类需要我们了解，分别是Document，Elements，Element</p>

<p>大至用法有两步<br></p>

<h1>第一步:加载html,，这儿提供两种方式，一种是从本地加载，一种是从网上直接加载。</h1>

<h2>从本地加载:</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>String html = "YOU HTML STRING";
</span><span class='line'>Document doc = Jsoup.parse(html);</span></code></pre></td></tr></table></div></figure>


<p>也可以直接从文件加载</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>File input = new File("/tmp/input.html");
</span><span class='line'>Document doc = Jsoup.parse(input, "UTF-8", "http://example.com/");</span></code></pre></td></tr></table></div></figure>


<h2>通过url从网络加载</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Document doc = Jsoup.connect("http://en.wikipedia.org/").get();
</span><span class='line'>String title = doc.title();</span></code></pre></td></tr></table></div></figure>


<p>上面是通过http的get方法，下可以通过post来获取</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Document doc = Jsoup.connect("http://example.com")
</span><span class='line'>  .data("query", "Java")
</span><span class='line'>  .userAgent("Safari")
</span><span class='line'>  .cookie("auth", "token")
</span><span class='line'>  .timeout(3000)
</span><span class='line'>  .post();</span></code></pre></td></tr></table></div></figure>


<h1>第二步:定位元素</h1>

<h2>通过定义的api定位无素</h2>

<p>定位body</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>String html = "&lt;div&gt;&lt;p&gt;Lorem ipsum.&lt;/p&gt;";
</span><span class='line'>Document doc = Jsoup.parseBodyFragment(html);
</span><span class='line'>Element body = doc.body();</span></code></pre></td></tr></table></div></figure>


<p>定位标签</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Element content = doc.getElementById("content");
</span><span class='line'>Elements links = content.getElementsByTag("a");
</span><span class='line'>for (Element link : links) {
</span><span class='line'>  String linkHref = link.attr("href");
</span><span class='line'>  String linkText = link.text();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>常用的API有</p>

<p>查找API：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>getElementById(String id)
</span><span class='line'>getElementsByTag(String tag)
</span><span class='line'>getElementsByClass(String className)
</span><span class='line'>getElementsByAttribute(String key) (and related methods)
</span><span class='line'>兄弟关系的:siblingElements(), firstElementSibling(), lastElementSibling(); nextElementSibling(), previousElementSibling()
</span><span class='line'>父子关系的: parent(), children(), child(int index)</span></code></pre></td></tr></table></div></figure>


<p>值操作API:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>attr(String key) to get and attr(String key, String value) to set attributes
</span><span class='line'>attributes() to get all attributes
</span><span class='line'>id(), className() and classNames()
</span><span class='line'>text() to get and text(String value) to set the text content
</span><span class='line'>html() to get and html(String value) to set the inner HTML content
</span><span class='line'>outerHtml() to get the outer HTML value
</span><span class='line'>data() to get data content (e.g. of script and style tags)
</span><span class='line'>tag() and tagName()</span></code></pre></td></tr></table></div></figure>


<p>修改API</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>append(String html), prepend(String html)
</span><span class='line'>appendText(String text), prependText(String text)
</span><span class='line'>appendElement(String tagName), prependElement(String tagName)
</span><span class='line'>html(String value)</span></code></pre></td></tr></table></div></figure>


<h2>通过select语法定位元素</h2>

<p>这个不好用文字表达，直接看<a href="http://jsoup.org/cookbook/extracting-data/selector-syntax">官网</a>文档吧.</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ionic简明教程一]]></title>
    <link href="http://www.ifun.cc/blog/2015/03/29/ionicjian-ming-jiao-cheng/"/>
    <updated>2015-03-29T11:17:10+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/03/29/ionicjian-ming-jiao-cheng</id>
    <content type="html"><![CDATA[<p>ionic是一个Hybrid框架，关于它的介绍可以看它的<a href="http://www.ionic.io">官网</a><br></p>

<p>要使用这个框架，得配置环境。<br>
需要安装nodejs,自行google。<br></p>

<p>安装cordova, ionic，cordova是什么？你应听说过PhoneGap吧，就是它，同一个东西。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo npm install -g cordova ionic</span></code></pre></td></tr></table></div></figure>


<p>在Mac上开发测试iOS需要模拟器，还需要安装ios-sim</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo npm -g install ios-sim</span></code></pre></td></tr></table></div></figure>


<p>而Android则需要Ant, 在<a href="http://ant.apache.org/bindownload.cgi">这儿</a>下载并解压放到本地目录,然后配置环境变量</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export ANT_HOME=/usr/local/apache-ant-1.9.4
</span><span class='line'>export PATH=${PATH}:${ANT_HOME}/bin</span></code></pre></td></tr></table></div></figure>


<p>查看ant版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ant -version</span></code></pre></td></tr></table></div></figure>


<p>下面就可以通过ionic的CLI来创建工程:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ionic start myApp tabs</span></code></pre></td></tr></table></div></figure>


<p>其中myApp是工程名字，tabs是内置模板中的一种，与xcode创建iOS工程的一样，有模板选择。inoic内置模板包括:blank,tabs,sidemenu</p>

<p>下面编译并运行项目:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd myApp
</span><span class='line'>$ ionic platform add ios
</span><span class='line'>$ ionic build ios
</span><span class='line'>$ ionic emulate ios</span></code></pre></td></tr></table></div></figure>


<p>发果一切顺利，就会启动iOS的模拟器运行工程。</p>

<p>同时也可以使用浏览器来测试:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ionic serve
</span><span class='line'>ionic serve --lab</span></code></pre></td></tr></table></div></figure>


<p>编译与运行一步到位</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ionic run ios </span></code></pre></td></tr></table></div></figure>


<p>更新cordova与ionic</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm update -g cordova ionic</span></code></pre></td></tr></table></div></figure>


<p>更新项目中使用的js库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ionic lib update </span></code></pre></td></tr></table></div></figure>


<p>查看ionic版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ionic -v </span></code></pre></td></tr></table></div></figure>


<p>ionic run android如果出现Failure [INSTALL_FAILED_OLDER_SDK],表示你用高版本的sdk编译，安装到低版本的android系统上，所以需要重新配置模拟器的target api level; 如果出现HAX is not installed on this machine (/dev/HAX is missing).表示没有安装Inter X86 Emulator Accelerator(HAXM installer),在Android SDK Manager下的Extras里。 这儿ADT里显示是installed，其实是没有安装的，需要到android sdk目录下的extras/intel/Hardware_Accelerated_Execution_Manager 中手动安装。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[拯救越狱白苹果]]></title>
    <link href="http://www.ifun.cc/blog/2015/03/28/zheng-jiu-yue-yu-bai-ping-guo/"/>
    <updated>2015-03-28T10:39:06+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/03/28/zheng-jiu-yue-yu-bai-ping-guo</id>
    <content type="html"><![CDATA[<p>今天要一大早，太操蛋了，好久没玩越狱了，用了一个重启命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>killall -HUP SpringBoard</span></code></pre></td></tr></table></div></figure>


<p>结果成了白苹果了。</p>

<p>然后我在ssh中用reboot重启，还是白苹果，最后用Home+开机键关机后重启还是不能解决。</p>

<h2>重刷系统</h2>

<p>首先强制关机Home+Power键
然后按一直按住Power键，直到屏上出现白苹果时(不要松开Power键)再按住Home键，当屏幕黑屏后松开Power键(Home键不要松)，直到电脑ITunes上有反应时才松开。</p>

<p>如果不成功多次几次，顺序是Power->Power+Home->Home，先按先放，后按后放的原则，理一下过程就清楚了。<br></p>

<p>当ITunes检测到Recovery Mode，Mac系统上按住Option键(Windows上按Shift键)并点击Restore，在弹出的对话框中选你下载的iOS固件(ipsw文件)，然后就是等待了。</p>

<h2>安全模式</h2>

<p>1、如果遭遇循环重启或白苹果，同时按住电源键和 Home 键<br>
2、当苹果 Logo 出现又消失后松开两个键<br>
3、同时按住电源键和音量增加键开机<br>
4、当苹果 Logo 出现时，松开电源键，但一直按住音量增加键直至启动完成<br>
5、前往 Cydia 卸载所有你认为和循环重启有关的插件<br>
6、如果问题未能解决重复以上五步<br>
7、问题解决</p>

<p>我只知道这两种解决白苹果，如果你有更好的方法还望告之。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenGL ES简明教程之1]]></title>
    <link href="http://www.ifun.cc/blog/2015/03/13/opengl-esjian-ming-jiao-cheng-zhi-1/"/>
    <updated>2015-03-13T12:48:55+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/03/13/opengl-esjian-ming-jiao-cheng-zhi-1</id>
    <content type="html"><![CDATA[<p>最近在弄一点3D相关的东西，大概有四年没有做3D相关的东西了，也忘得差不多了。我就把最近学到的东西总结一下，记录一下，方便查询。</p>

<p>在iOS上开发3D的东西，有三个选择:OpenGLES,GLKit,Metal. <br></p>

<p>我选择了直接用OpenGLES，因为这样更了解底层。 GLKit也是封装了OpenGLES, Metal则是新出来的苹果3D技术，也学微软了出自己DirectX标准. <br></p>

<p>iOS7就支持OpenGLES 1.0, 2.0，3.0。<br></p>

<p>本系列教程先介绍并学习OpenGLES 1.0，OpenGLES 1.0学完以后，再过渡到2.0, 最后再上3.0.因为学东西要先学基础，再深入，这样更容易。<br></p>

<p>在学习的过程中会用到PowerVR SDK, 大家可以去<a href="http://community.imgtec.com/developers/powervr/installers/">这儿</a>下载并安装。<br></p>

<p>还会用到3D建模工具Blender,也请自行下载。<br></p>

<p>还会用到Blender导出格式为pod的插件与导出格式为collada格式的插件。<br></p>

<p>安装插件的方式，就是将下载好的插件文件复制到以下目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/Applications/Blender/blender.app/Contents/Resources/2.73/scripts/addons/</span></code></pre></td></tr></table></div></figure>


<p>collada格式的插件在<a href="http://sourceforge.net/projects/colladablender/">这儿</a>下载.<br></p>

<p>PowerVR Gen Pod的插件是在以下目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/Applications/Imagination/PowerVR_Graphics/PowerVR_Tools/PVRGeoPOD/Plugins/Blender/OSX_x86/</span></code></pre></td></tr></table></div></figure>


<blockquote><p>注意是复制目录下的文件</p></blockquote>

<p>要导出pod，还需要进Blender配置一下。打开blender, 左下角的列表中选择User Preference，在打开的界面中选择Addon，在Import－Export栏中找到Import－Export：PVRGeoPOD，并将其右侧的checkbox选中，保存用户设置。</p>

<p>还不明白的可以看<a href="http://blog.csdn.net/cj_gameboy/article/details/41171171">这儿</a>，有图有真相。</p>

<p>先准备好这些，下一节开始OpenGLES实战。</p>

<p>搞3D,给大家推荐两本书:<br></p>

<p>《iPhone 3D Programming》<br>
《Learning OpenGL ES for iOS》</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java开发记录]]></title>
    <link href="http://www.ifun.cc/blog/2015/03/06/javakai-fa-ji-lu/"/>
    <updated>2015-03-06T15:46:32+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/03/06/javakai-fa-ji-lu</id>
    <content type="html"><![CDATA[<p>最近在写一个小东东，想一次开发同时运行到多个平台上，由于有UI，所以我选择了JSE + SWT. <br></p>

<p>开发功能还好，没有遇到什么问题，Eclipse用一下就熟悉了.<br></p>

<h3>打包</h3>

<p>开发完后要打包，就遇到问题了，我想打成jar包，结果Eclipse自带的export不强，所以只能google打答案。<br>
得到答案是需要一份清单列表。而还需要手功创建，看到后就醉了，不就打个包吗，弄得这么麻烦。没法只有硬上了，手动创建一个名为MANIFEST.MF的文件.<br>
下面是我的清单列表， Class-Path是工程依赖的jar包，然后这些jar包都放到该工程目录下的libs目录下。<br>
Main-Class是你的程序入口文件，即包括Main的文件。 注意Class-Path中每一行前后都有一个空格，最后一行不需要。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Manifest-Version: 1.0
</span><span class='line'>Class-Path: libs/HttpClient/commons-codec-1.6.jar 
</span><span class='line'> libs/HttpClient/commons-logging-1.1.3.jar 
</span><span class='line'> libs/HttpClient/fluent-hc-4.3.6.jar 
</span><span class='line'> libs/HttpClient/httpclient-4.3.6.jar 
</span><span class='line'> libs/HttpClient/httpclient-cache-4.3.6.jar 
</span><span class='line'> libs/HttpClient/httpcore-4.3.3.jar 
</span><span class='line'> libs/HttpClient/httpmime-4.3.6.jar 
</span><span class='line'> libs/gson-2.3.1.jar 
</span><span class='line'> libs/jsoup-1.8.1-sources.jar 
</span><span class='line'> libs/jsoup-1.8.1.jar 
</span><span class='line'> libs/quartz-2.2.1/lib/quartz-2.2.1.jar 
</span><span class='line'> libs/quartz-2.2.1/lib/quartz-jobs-2.2.1.jar 
</span><span class='line'> libs/quartz-2.2.1/lib/slf4j-log4j12-1.6.6.jar 
</span><span class='line'> libs/quartz-2.2.1/lib/slf4j-api-1.6.6.jar 
</span><span class='line'> libs/quartz-2.2.1/lib/log4j-1.2.16.jar 
</span><span class='line'> libs/quartz-2.2.1/lib/c3p0-0.9.1.1.jar 
</span><span class='line'> libs/sqlite-jdbc-3.8.7.jar 
</span><span class='line'> libs/httpcomponents-asyncclient-4.0.2/lib/httpasyncclient-4.0.2.jar 
</span><span class='line'> libs/httpcomponents-asyncclient-4.0.2/lib/httpcore-nio-4.3.2.jar 
</span><span class='line'> libs/os/com.ibm.icu_52.1.0.v201404241930.jar 
</span><span class='line'> libs/os/org.eclipse.core.commands_3.6.100.v20140528-1422.jar 
</span><span class='line'> libs/os/org.eclipse.core.runtime_3.10.0.v20140318-2214.jar 
</span><span class='line'> libs/os/org.eclipse.equinox.common_3.6.200.v20130402-1505.jar 
</span><span class='line'> libs/os/org.eclipse.equinox.registry_3.5.400.v20140428-1507.jar 
</span><span class='line'> libs/os/org.eclipse.jface_3.10.1.v20140813-1009.jar 
</span><span class='line'> libs/os/org.eclipse.jface.text_3.9.1.v20140827-1810.jar 
</span><span class='line'> libs/os/org.eclipse.osgi_3.10.1.v20140909-1633.jar 
</span><span class='line'> libs/os/org.eclipse.swt.cocoa.macosx.x86_64_3.103.1.v20140903-1947.jar 
</span><span class='line'> libs/os/org.eclipse.text_3.5.300.v20130515-1451.jar 
</span><span class='line'> libs/os/org.eclipse.ui.forms_3.6.100.v20140422-1825.jar 
</span><span class='line'> libs/os/org.eclipse.ui.workbench_3.106.1.v20140827-1737.jar
</span><span class='line'>Main-Class: iBot.Main</span></code></pre></td></tr></table></div></figure>


<p>有了这个列表，这下我们来开始打包，直接用命令行吧，一下就打好，包教包会:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>jar -cvfm yourjarname.jar MANIFEST.MF -C bin .</span></code></pre></td></tr></table></div></figure>


<p>就这么一行命令打包，是不是很easy呀。首先你要cd到你的工程目录，因为我们要用到下面的bin目录，命令中-C后面有bin看到没？</p>

<p>经过上面一行命令的工作，如果一切顺利，在你工程目录下就多了一个yourjarname.jar文件。</p>

<p>这下就可以运行了，我是在Mac系统下运行，双击jar文件却不能运行，然后试着用用命令运行，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -jar yourjarname.jar</span></code></pre></td></tr></table></div></figure>


<p>结果报错了，说要运行在主线程，没事，我们求万能的google, 最后解决方法是加一个参数:XstartOnFirstThread</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -XstartOnFirstThread -jar ibot.jar</span></code></pre></td></tr></table></div></figure>


<p>jar 包成功运行。</p>

<h3>封装Mac下可运行的app</h3>

<p>参考<a href="https://www.eclipse.org/swt/macosx/">https://www.eclipse.org/swt/macosx/</a> <BR>
做了一点修改，将可运行脚本改为了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>BASEDIR=`dirname $0`
</span><span class='line'>exec java \
</span><span class='line'>        -XstartOnFirstThread \
</span><span class='line'>        -jar $BASEDIR/ibot.jar</span></code></pre></td></tr></table></div></figure>


<p>记录一下创建dmg的命令:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hdiutil create -srcfolder SWTHello SWTHello.dmg
</span><span class='line'>hdiutil internet-enable -yes SWTHello.dmg</span></code></pre></td></tr></table></div></figure>


<h3>加载资源</h3>

<p>程序是由代码加资源文件组成的，比如要读取icon,声间文件。由于我是新手，所以加载资源也把我难住了，幸好万能的Google我还能打开，窃喜！！！</p>

<p>将所有的资源放到src/res目录下，这样方便打包。因为放到src目录下，打包的时候会自动将res目录copy到bin目录下去。bin是编译后的生成文件目录，打包的时候-C后面的bin就是指这个目录。这下你明白没？<br></p>

<p>接着我们在程序中加载资源吧: <br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>String filePath = getClass().getResource("/res/" + "icon.png").getFile();
</span><span class='line'>File icon = new File(filePath);</span></code></pre></td></tr></table></div></figure>


<p>这样就可以了，不过如果打包成jar后，这种方式不能成功获取资源，我们得使用另一个方法，用Stream的方式来获取。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>InputStream is = this.getClass().getResourceAsStream("/res/" + "icon.png"); </span></code></pre></td></tr></table></div></figure>


<p>SWT中加载图片，还可以用JFace中的类:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ImageDescriptor.createFromFile(Main.class, "/res/login.png")；</span></code></pre></td></tr></table></div></figure>


<p>返回的ImageDescriptor正是Action中要用到的。</p>

<h2>参考资料</h2>

<p><a href="http://www.eclipse.org/swt/">http://www.eclipse.org/swt/</a></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。若有问题，请留言或加入QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[V2EX for iOS源码]]></title>
    <link href="http://www.ifun.cc/blog/2015/02/11/v2ex-for-iosyuan-ma/"/>
    <updated>2015-02-11T17:01:26+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/02/11/v2ex-for-iosyuan-ma</id>
    <content type="html"><![CDATA[<p>业余时间开发的app, V2EX网站iOS原生态App. 感兴趣的可以下来玩玩<br>
<a href="https://itunes.apple.com/cn/app/v2ex-club/id883141469?l=en&amp;mt=8">Appstore</a><br>
<a href="https://github.com/ondev/iV2EX">源码</a></p>

<p>单枪匹马干了这么几年，希望结识各路高手。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress中的rake Generate问题]]></title>
    <link href="http://www.ifun.cc/blog/2015/02/11/octopresszhong-de-rake-generatewen-ti/"/>
    <updated>2015-02-11T14:14:53+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/02/11/octopresszhong-de-rake-generatewen-ti</id>
    <content type="html"><![CDATA[<p>好久没有写博客了，今天想写突然发现rake generate出问题了，可能是系统升级造成的。在此记录一下。</p>

<p>随便我就重新装了一下octopress环境。
以前的环境我是用的rvm安装的ruby，这种方式安装不了最新的ruby,所以我将rvm删了,命令是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm implode</span></code></pre></td></tr></table></div></figure>


<p>接着用brew来安装了最新的ruby</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo brew install ruby</span></code></pre></td></tr></table></div></figure>


<p>然后到Octopress中安装bundler</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem install bundler</span></code></pre></td></tr></table></div></figure>


<p>由于以前我使用的rake 版本是0.9.6,  现在我Mac上的rake版本却是10.4.2, 所以到Gemfile中修改rake版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'rake', '~&gt; 10.4.2'</span></code></pre></td></tr></table></div></figure>


<p>rake版本可以通过下面命令查看</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake -V</span></code></pre></td></tr></table></div></figure>


<p>下面总结一下Octopress 2.0的rake命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["XXX"]  //新建博文
</span><span class='line'>rake new_page["xxx"]  //新建页面
</span><span class='line'>rake install ["theme name"]   //.theme目录下的主题
</span><span class='line'>rake generate   //生成静态html文件
</span><span class='line'>rake preview    //本地浏览 http://127.0.0.1:4000
</span><span class='line'>rake watch    //没用过，不太清楚作用
</span><span class='line'>rake deploy   //发布</span></code></pre></td></tr></table></div></figure>


<p>Octopress 3.0将要发布了，到时候就不用rake命公了，<a href="http://octopress.org/">这儿</a>抢先了解。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下安装GDB]]></title>
    <link href="http://www.ifun.cc/blog/2015/02/10/macxia-an-zhuang-gdb/"/>
    <updated>2015-02-10T16:04:35+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/02/10/macxia-an-zhuang-gdb</id>
    <content type="html"><![CDATA[<ol>
<li>安装<a href="http://brew.sh/">brew</a></li>
<li>安装gdb</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew tap homebrew/dupes
</span><span class='line'>brew install gdb</span></code></pre></td></tr></table></div></figure>


<p>将被安装到/usr/local/bin/gdb
3. 由于Mac不允许随意进入进程空间，要经过许可才可以。如果要用gdb依附进程，那就要对gdb授权才可以。所以需要创建自签证书。下面命令进行授权</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>codesign -s gdb-cert $(which gdb)</span></code></pre></td></tr></table></div></figure>


<p>这下就可以使用GDB了</p>

<p>参考:<a href="http://ntraft.com/installing-gdb-on-os-x-mavericks/">http://ntraft.com/installing-gdb-on-os-x-mavericks/</a></p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Objective-C 2.0学习笔记]]></title>
    <link href="http://www.ifun.cc/blog/2015/01/22/effective-objective-c-2-dot-0xue-xi-bi-ji/"/>
    <updated>2015-01-22T10:50:41+08:00</updated>
    <id>http://www.ifun.cc/blog/2015/01/22/effective-objective-c-2-dot-0xue-xi-bi-ji</id>
    <content type="html"><![CDATA[<h3>Item 1</h3>

<p>熟悉C/C++会提高你ObjC的能力 <br></p>

<h3>Item 2</h3>

<p>包括头文件要注意，尽量写到.m中，.h中尽量用预声明 <br></p>

<h3>Item 3</h3>

<p>尽量用ObjC的精简语法来创建NSFoundation</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSNumber *intNumber = @1;
</span><span class='line'>NSNumber *floatNumber = @2.f;
</span><span class='line'>NSNumber *doubleNumber = @3.14;
</span><span class='line'>NSNumber *boolNumber = @YES;
</span><span class='line'>NSNumber *charNumber = @'a'
</span><span class='line'>NSArray *animals = @[@"cat", @"dog", @"mouse", @"badger"];
</span><span class='line'>NSString *dog = animals[1];
</span><span class='line'>NSDictionary *personData = @{@"firstName": @"Matt", @"lastName": @"Galloway", @"age": @28};
</span><span class='line'>NSString *lastName = personData[@"lastName"];</span></code></pre></td></tr></table></div></figure>


<h3>Item 4 尽量用常量代替宏</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>static const NSTimeInterval kAnimationDuration = 0.3;</span></code></pre></td></tr></table></div></figure>


<p>//代替</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define ANIMATION_DURATION 0.3</span></code></pre></td></tr></table></div></figure>


<p>static 是为了防止重名重定义，即本文件可见，其它文件不可见，const是为了防止改变其值</p>

<p>.h中extern 定义全局变量，.m中赋值，这样引用.h后就对其变量可见，达到全局变量的效果</p>

<h3>Item 5</h3>

<p>正确使用枚举</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef enum ETest: NSInteger {
</span><span class='line'>  ETest1,
</span><span class='line'>  ETest2
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>等同</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef NS_ENUM(NSInteger, ETest) {
</span><span class='line'>    ETest1,
</span><span class='line'>    ETest2
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>可以使用or运算的optional</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef NS_OPTIONS(NSInteger, ETest) {
</span><span class='line'>    ETest1 = 1 &lt;&lt; 0,
</span><span class='line'>    ETest2 = 1 &lt;&lt; 1
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>Item 6</h3>

<p>理解属性
@public</p>

<p>@private</p>

<p>@property声明数据封装</p>

<p>@synthesize 自动生成操作成员变量的方法</p>

<p>@dynamic 手动生成操作成员变量的方法</p>

<p>类属性的一些属性</p>

<p>nonatomic, readwrite, readonly, assign, strong, weak, unsafe_unretained, copy, getter, setter</p>

<h3>Item 7</h3>

<p>类内部实现中最好直接操作类变量，不要用property的方法。</p>

<p>@dynamic自己实现数据封装，能够实现延迟加载</p>

<h3>Item 8 理解对象相等</h3>

<p>比较相等要实现isEqual:与hash方法</p>

<p>两个对象相等那么他们的hash返回的值一定相等，hash返回的值相等，两个对象不一定相等</p>

<p>比较两个对象是否相等，根据需要来比较，并不一定要比较所有的属性</p>

<p>自定义hash方法，一定要快速高效的方法</p>

<h3>Item 9 用类簇隐藏子类的执行细节</h3>

<p>类簇可以隐藏开放接口后的实现细节</p>

<p>类簇常用在系统框架中</p>

<h3>Item 10 给存在的实例依附数据</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void objc_setAssociatedObject(id object, void *key, id value, objc_AssociationPolicy policy);
</span><span class='line'>id objc_getAssociatedObject(id object, void *key);
</span><span class='line'>void objc_removeAssociatedObjects(id object);</span></code></pre></td></tr></table></div></figure>


<p>该方法将两个实例关联起来</p>

<p>内存管理一定要注意</p>

<p>不到万不得已的时候不要用，因为出了问题很难找到原因</p>

<h3>Item 11 理解objc_msgSend</h3>

<p>Objc中方法调用叫发消息，消息是由消息接收者，selector(路由)与参数组成。发送一个消息给接收者同步对应调用一个方法。</p>

<p>调用就是消息查询路由，然后找到执行入口，最好执行。</p>

<h3>Item 12 理解消息走向</h3>

<p>在Item 11中解释了正确情况下的消息走向，接着讲在非正常情况下(即selector不存在的情况下)消息的走向。</p>

<p>如果发送的消息，实例没有对应的selector，那么就会crash并报unrecognized selector send to的错误。</p>

<p>iOS XMPP Framework就运用了这个技巧实现了多代理类</p>

<h3>Item 13 用方法移置来调试,达到hook效果</h3>

<p>Method class_getInstanceMethod(Class aClass, SEL aSelector) 获取方法的method
void method_exchangeImplementations(Method m1, Method m2) 交换两个方法的IMP</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Method originalMethod = class_getInstanceMethod([NSString class],
</span><span class='line'>@selector(lowercaseString));
</span><span class='line'>Method swappedMethod = class_getInstanceMethod([NSString class],
</span><span class='line'>@selector(uppercaseString)); method_exchangeImplementations(originalMethod, swappedMethod);
</span><span class='line'>NSString *string = @"ThIs iS tHe StRiNg";
</span><span class='line'>NSString *lowercaseString = [string lowercaseString]; NSLog(@"lowercaseString = %@", lowercaseString);
</span><span class='line'>// Output: lowercaseString = THIS IS THE STRING
</span><span class='line'>NSString *uppercaseString = [string uppercaseString]; NSLog(@"uppercaseString = %@", uppercaseString);
</span><span class='line'>// Output: uppercaseString = this is the string</span></code></pre></td></tr></table></div></figure>


<p>hook系统方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface NSString (EOCMyAdditions) 
</span><span class='line'>- (NSString*)eoc_myLowercaseString; 
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation NSString (EOCMyAdditions)
</span><span class='line'>- (NSString*)eoc_myLowercaseString {
</span><span class='line'>NSString *lowercase = [self eoc_myLowercaseString]; 
</span><span class='line'>NSLog(@"%@ =&gt; %@", self, lowercase);
</span><span class='line'>return lowercase;
</span><span class='line'>} 
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>Method originalMethod = class_getInstanceMethod([NSString class], @selector(lowercaseString));
</span><span class='line'>Method swappedMethod = class_getInstanceMethod([NSString class], @selector(eoc_myLowercaseString)); 
</span><span class='line'>method_exchangeImplementations(originalMethod, swappedMethod);
</span><span class='line'>
</span><span class='line'>NSString *string = @"ThIs iS tHe StRiNg";
</span><span class='line'>NSString *lowercaseString = [string lowercaseString]; 
</span><span class='line'>// Output: ThIs iS tHe StRiNg =&gt; this is the string</span></code></pre></td></tr></table></div></figure>


<p>路由后的执行入口可以被添加，与可以被改变</p>

<p>Swizzling可以用来丰富原来接口的内容</p>

<p>尽量少用，用来调试不错。</p>

<h3>Item 14 理解类对象</h3>

<p>略</p>

<h3>Item 15 类名前缀，防止重复定义</h3>

<p>略</p>

<h3>Item 16 初始化方法设计</h3>

<p>根据需要设计实现初始化方法</p>

<p>子类中根据需要重写super初始化方法</p>

<p>子类中不需要的父类的初始化方法重写，并在实现中抛出异常</p>

<h3>Item 17 重写description方法</h3>

<p>debugDescription或description</p>

<p>NSLog出来更有可读性，用NSDictionary来format</p>

<h3>Item 18 少用可变类型的属性</h3>

<p>属性对外只读，对内可读写，实现方式是在.h中readonly, 在.m中用readwrite重新声明一下属性</p>

<p>提供方法来操作可变容器，不要直接声明为属性</p>

<h3>Item 19 命名意图清晰</h3>

<p>命名要更像objc</p>

<p>命名要简明，优雅得像一句陈诉句</p>

<p>命名避免缩写</p>

<p>命名风格要一致</p>

<h3>Item 20 私有方法用前缀表明</h3>

<p>前缀私有方法用于区别公有方法</p>

<p>不要用_来做私有方法前缀，因为苹果用了这规则</p>

<h3>Item 21 理解Objc Error Model</h3>

<p>异常是用来处理fatal error的</p>

<p>非fatal error,要用代理或参数方式来自行处理</p>

<h3>Item 22 理解NSCopying协议</h3>

<p>如果想copy，那就一定要执行NSCopying协议</p>

<p>如果有mutable的变量，那么还需要执行NSMutableCopying</p>

<p>区分Shallow copy与Deep copy</p>

<p>建意使用deep copy, 如果需要的话</p>

<h3>Item 23 内部通信使用代理协议与数据协议</h3>

<p>delegate在开发中运用得非常多，这儿不再多说</p>

<h3>Item 24 用Category来拆分类，使其更容易维护</h3>

<p>很容易明白，也不说了</p>

<h3>Item 25 Category中要加前缀，防止出现bug,容易调试</h3>

<p>Category中的类要加前缀</p>

<p>category中方法名要加前缀</p>

<h3>Item 26 Category中避免声明属性</h3>

<p>属性是数据的封装，不能在category中声明属性，编译器会找不到的。</p>

<p>有两种方法可以，一种是在Item 10中介绍的，一种是可以声明readonly的属性，然后手动实现其get方法。</p>

<h3>Item 27 用class-continuation的Category隐藏类的执行(类似private方法)</h3>

<p>class-continuation category与一般的category差不多，只是括号时用写名字。</p>

<p>class-continuation category可以在里面声明属性与方法，也可以遵循protocol，其中的方法相当于私有方法。</p>

<p>可以改变类属性的一些类型，如只读变成可读写</p>

<h3>Item 28 用protocol提供匿名对象</h3>

<p>id加protocol提供匿名类型</p>

<p>如果想隐藏类则可以使用匿名对象</p>

<p>只关心实现了方法，不关心实现细节的时候可以用匿名对象</p>

<h2>5 内存管理</h2>

<h3>Item 29 理解引用计数</h3>

<p>每个对象使用的时候会对其引用次数进行计数。</p>

<p>new出来的对象retainCount为1.</p>

<p>retain对象retainCount加1.</p>

<p>release对象retainCount减1.</p>

<p>autorelease对象retainCount减1.</p>

<p>当retainCount为0的时候，内存被回收。</p>

<p>对象加到容器(如NSArray)中，会对其retain一次，及引用计数加1,记得要平衡retainCount.</p>

<p>避免循环引用</p>

<h3>Item 30 使用ARC管理引用计数</h3>

<p>ARC中将不再手动调用retain,release,autorelease，dealloc等方法了。编译器会自动将这些加入到我们的程序当中。</p>

<p>ARC解放了开发人员对内存的管理，还少写代码。</p>

<p>ARC只能管理ObjC的对象，CoreFoundation object还是得用CFRetain/CFRelease来管理内存</p>

<h3>Item 31 清理与删观察者只放在dealloc中执行</h3>

<p>有dealloc中释放CoreFoundation并去掉观察者</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)dealloc {
</span><span class='line'>    CFRelease(coreFoundationObject);
</span><span class='line'>    [[NSNotificationCenter defaultCenter] removeObserver:self];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如果是MRC, 调用[super dealloc];应放到最后</p>

<p>如果有文件操作，一定要记得close</p>

<h3>Item 32 内存相关记得异常处理</h3>

<p>MRC一定要处理异常处理，方式要正确，@try中需要将释放的工作放到@finally中</p>

<p>ARC要使用-fobjc-arc-exceptions来开启异常处理，不过使用异常处理会降低运行效率</p>

<p>如果有很多异常处理，建意使用NSError的方式来处理</p>

<h3>Item 33 使用弱引用避免循环引用</h3>

<p>循环引用就是A对象拥有B对象，B对象拥有A对象，当A想释放的时候，等待B释放，这时B却又要等待A释放完才释放完才释放，这样两个对象相互等待，却一直释放不了。</p>

<p>用weak或unsafe_unretained声明属性就可以了。</p>

<p>weak比unsafe_unretained更安全</p>

<h3>Item 34 使用Autorelease Pool来管理地高内存分配</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSArray *databaseRecords = /* ... */;
</span><span class='line'>NSMutableArray *people = [NSMutableArray new]; for (NSDictionary *record in databaseRecords) {
</span><span class='line'>@autoreleasepool { 
</span><span class='line'>EOCPerson *person =
</span><span class='line'>[[EOCPerson alloc] initWithRecord:record];
</span><span class='line'>[people addObject:person];
</span><span class='line'>} 
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如上面的代码，如果NSArray有10000个对象，那么就可以加一个autoreleasepool，这样可以实时的进行内存回收。</p>

<h3>Item 35 使用Zombies来调试内存问题</h3>

<p>内存分配给对象，然后对象被释放。如果该对象内存没有被重写，那么再次向该对象发送消息，也是可以成功执行的。如果被重写了，那么就会崩溃。</p>

<p>所以会出现有时候crash,有时候正常运行，给程序调试与bug排除带来不便。所以我们可以开启Zombies（僵尸对象）。</p>

<p>它将所有释放了的对象放到放到一个Zombies区，内存也不释放也不被重写，这样标记它是一个僵尸对象。如果程序再次向僵尸对象发送消息，那么就会在控制台打出消息提供开发人员，方向开发人员定位排除bug.</p>

<h3>Item 36 避免使用retainCount</h3>

<p>如果用MRC,开发过程中，中心有retainCount的概念平衡retainCount就可以。代码中一定不要用retainCount来做判断，因为是根据runtime autorelease等决定的。所以release一个对象retainCount不是马上改变。如下面的代码就是错误的，是一个死循环。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>while([obj retainCount]) {
</span><span class='line'>    [obj release];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>6 块与GCD</h2>

<h3>Item 37 理解块代码</h3>

<p>匿名block</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>^{
</span><span class='line'>    //Block代码
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>声明block</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void (^someBlock)() = ^ {
</span><span class='line'>    //Block代码
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Block声明后，作用域以外的地方是不可见的。如以下代码:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void (^block)();
</span><span class='line'>if (/*condition*/) {
</span><span class='line'>    block = ^{
</span><span class='line'>        NSLog("Test block A");
</span><span class='line'>    }
</span><span class='line'>} else {
</span><span class='line'>    block = ^{
</span><span class='line'>        NSLog("Test block B");
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>block();</span></code></pre></td></tr></table></div></figure>


<p>以上代码是有问题的，因为是block的内存是在栈上分配的，出了作用域编译器就会重写栈，所有可能会crash.解决方法是加一个copy， 将内存放到堆上去。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void (^block)();
</span><span class='line'>if (/*condition*/) {
</span><span class='line'>    block = [^{
</span><span class='line'>        NSLog("Test block A");
</span><span class='line'>    } copy]
</span><span class='line'>} else {
</span><span class='line'>    block = [^{
</span><span class='line'>    NSLog("Test block B");
</span><span class='line'>    } copy]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>block();</span></code></pre></td></tr></table></div></figure>


<p>Block内存管理与一般对象一样的。</p>

<h3>Item 38 用typedef定义Block类型</h3>

<p>声明block的格式如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>type (^blockName)(parameters);</span></code></pre></td></tr></table></div></figure>


<p>使用typedef可以让Block与一般类型一样，使用非常方便。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef void(^EOCCompletionHandler)(NSData *data, NSError *error);
</span><span class='line'>
</span><span class='line'>- (void)startWithCompletionHandler:(EOCCompletionHandler)completion;</span></code></pre></td></tr></table></div></figure>


<p>可见使用typedef让block的使用更加简单</p>

<h3>Item 39 使用Block可以减少代码分很开的弊端</h3>

<p>回调方法以前都用Delegate, 可以试试用Block的方式。 用过的人都知道。</p>

<h3>Item 40 使用Block的时候注意循环引用</h3>

<p>特别注意Block引用self, 可能会循环引用</p>

<h3>Item 41 Dispatch Queues异步锁</h3>

<p>有三种方式使共享资源多线程安全:<br></p>

<h4>使用 @synchronized</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)synchronizedMethod { 
</span><span class='line'>  @synchronized(self) {       // Safe } }</span></code></pre></td></tr></table></div></figure>


<h4>使用 NSLock</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>_lock = [[NSLock alloc] init];
</span><span class='line'>- (void)synchronizedMethod { 
</span><span class='line'>  [_lock lock];   // Safe [_lock unlock]; }</span></code></pre></td></tr></table></div></figure>


<h4>使用 Dispatch Queues</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>_syncQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);- (NSString*)someString { __block NSString *localSomeString; dispatch_sync(_syncQueue, ^{ localSomeString = _someString; });  return localSomeString; 
</span><span class='line'>}
</span><span class='line'>- (void)setSomeString:(NSString*)someString {     dispatch_barrier_async(_syncQueue, ^{   _someString = someString; });￼}</span></code></pre></td></tr></table></div></figure>


<h3>42 GCD方式的performSelector</h3>

<p>延迟执行一般方式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[self performSelector:@selector(doSomething) withObject:nilafterDelay:5.0];</span></code></pre></td></tr></table></div></figure>


<p>GCD方式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dispatch_time_t time = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5.0 * NSEC_PER_SEC));dispatch_after(time, dispatch_get_main_queue(), ^(void){  [self doSomething];});</span></code></pre></td></tr></table></div></figure>


<p>主线程执行一般方式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[self performSelectorOnMainThread:@selector(doSomething) withObject:nil waitUntilDone:NO];</span></code></pre></td></tr></table></div></figure>


<p>GCD方式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dispatch_async(dispatch_get_main_queue(), ^{ [self doSomething]; 
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>ARC方式下的performSelector非常危险，因为是运行时决定的，所以ARC不能在编译的时候对内存进行管理。返回值与参数都有局限。</p>

<h3>43 什么时候用GCD，什么时候用Operation Queues</h3>

<p>GCD是纯C的API, Operation Queues是Objective C. Operation Queues也有像GCD方式的调用，如NSBlockOperation或NSOperationQueue的addOperationWithBlock， Operation Queues还有以下优点：</p>

<h4>取消队列</h4>

<p>NSOperation的cancel方法可以设置一个取消标志，告诉NSOperation不再运行。而GCD一但运行，就没法取消。</p>

<h4>队列依赖</h4>

<p>一个消息队列可以依赖其它消息队列，比如下载服务器文件与处理文件两个队列，处理队列依赖下载队列，因为只有下载完后，才能处理文件。</p>

<h4>队列的属性可以使用KVO</h4>

<p>可以用KVO的方式检测队列的状态</p>

<h4>队列优先级</h4>

<p>可以用Queues中的每一个NSOperation设置一个优先级，GCD只能对整个队列设置优先级，不但单独对每一个block设置优先级。Operations也可以设置在线程上运行的优先级，同时GCD也可以。</p>

<h4>队列重用</h4>

<p>Operation的类可以直接重用</p>

<p>GCD并不是唯一的多线程与任务管理方案。Operation提供灵活的方式来实现与GCD相关的功能。</p>

<h3>44 Dispatch group</h3>

<p>将任务定义为一个组，当这个组所有任务完成后会得到通知。</p>

<h3>45 dispatch once实现单例</h3>

<p>单例的实现，很容易理解。</p>

<h3>46 避免使用dispatch_get_current_queue</h3>

<p>GDC是不可重入的，用dispatch_queue_set_specific代替dispatch_get_current_queue</p>

<h3>47 熟悉系统框架</h3>

<p>搞iOS的都应知道</p>

<h3>48 遍历容器的方法</h3>

<h4>for loop of C/C++</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for (int i = 0; i &lt; count; i++)</span></code></pre></td></tr></table></div></figure>


<h4>Objective-C 1.0 NSEnumerator</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSArray *anArray = /* ... */;NSEnumerator *enumerator = [anArray objectEnumerator]; id object;while ((object = [enumerator nextObject]) != nil) {// Do something with 'object'}</span></code></pre></td></tr></table></div></figure>


<h4>Objective-C 2.0 Fast Enumeration</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSArray *anArray = /* ... */; for (id object in anArray) {// Do something with 'object'}</span></code></pre></td></tr></table></div></figure>


<h4>Block-Based Enumeration</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSArray *anArray = /* ... */; 
</span><span class='line'>[anArray enumerateObjectsUsingBlock:^(id object, NSUInteger idx, BOOL *stop){ // Do something with 'object'if (shouldStop) {  *stop = YES; 
</span><span class='line'>}}];</span></code></pre></td></tr></table></div></figure>


<p>还可以设置option</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)enumerateObjectsWithOptions: (NSEnumerationOptions)options usingBlock:(void(^)(id obj, NSUInteger idx, BOOL *stop))block- (void)enumerateKeysAndObjectsWithOptions: (NSEnumerationOptions)options usingBlock:(void(^)(id key, id obj, BOOL *stop))block</span></code></pre></td></tr></table></div></figure>


<h3>49 Top-free bridge</h3>

<p><strong>bridge是将类型强转， 不改变内存管理权
</strong>bridge_retain 将Objc的类型转化为Core Foundation类型，内时移交内存管理权，即要使用CFRelease
__bridge_transfer 将Core Foundation类型转化为Objc类型，内时移交内存管理权，不用再使用CFRelease</p>

<h3>50 NSCache代替NSDictionary</h3>

<p>NSCache是线程安全的，系统根据内存自动free内存，也可以使用NSPurgeableData进行手动控制</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)downloadDataForURL:(NSURL*)url {    NSPurgeableData *cachedData = [_cache objectForKey:url]; 
</span><span class='line'>    if (cachedData) {        // Stop the data being purged        [cacheData beginContentAccess]; // Use the cached data        [self useData:cachedData];        // Mark that the data may be purged again        [cacheData endContentAccess]; 
</span><span class='line'>    } else {        // Cache miss        EOCNetworkFetcher *fetcher = [[EOCNetworkFetcher alloc] initWithURL:url];        [fetcher startWithCompletionHandler:^(NSData *data){ 
</span><span class='line'>      NSPurgeableData *purgeableData = [NSPurgeableData dataWithData:data]; 
</span><span class='line'>      [_cache setObject:purgeableData forKey:url cost:purgeableData.length];      // Don't need to beginContentAccess as it begins // with access already marked      // Use the retrieved data       [self useData:data];        // Mark that the data may be purged now     [purgeableData endContentAccess]; }];   } 
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>51 initialize与load中尽量少写代码</h3>

<p>一个类只会调用一次，initialize是延迟触发，不要在里面初始化全局变量。</p>

<h3>52 NSTimer会Retain Target</h3>

<p>所以会循环引用，导致内存泄漏。用block来解决</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+ (NSTimer*)eoc_scheduledTimerWithTimeInterval: (NSTimeInterval)intervalblock:(void(^)())block repeats:(BOOL)repeats{    return [self scheduledTimerWithTimeInterval:interval target:self selector:@selector(eoc_blockInvoke:) userInfo:[block copy] repeats:repeats];}
</span><span class='line'>+ (void)eoc_blockInvoke:(NSTimer*)timer { 
</span><span class='line'>    void (^block)() = timer.userInfo;    if (block) {        block(); 
</span><span class='line'>    }}
</span><span class='line'>- (void)startPolling {
</span><span class='line'>  __weak EOCClass *weakSelf = self;
</span><span class='line'>  _pollTimer = [NSTimer eoc_scheduledTimerWithTimerInterval:5.0 
</span><span class='line'>                                              block:^{EOCClass *strongSelf = weakSelf;
</span><span class='line'>                                              [strongSelf p_doPoll];}, repeats:YES];
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoapods国内速度问题]]></title>
    <link href="http://www.ifun.cc/blog/2014/12/03/cocoapodsguo-nei-su-du-wen-ti/"/>
    <updated>2014-12-03T12:48:56+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/12/03/cocoapodsguo-nei-su-du-wen-ti</id>
    <content type="html"><![CDATA[<p>1.使用淘宝的gem镜像</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem sources --remove https://rubygems.org/
</span><span class='line'>gem sources -a http://ruby.taobao.org/</span></code></pre></td></tr></table></div></figure>


<p>2.使用国内的Cocoapods镜像</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod repo remove master
</span><span class='line'>pod repo add master https://gitcafe.com/lloydsheng/Specs.git
</span><span class='line'>pod repo update</span></code></pre></td></tr></table></div></figure>


<p>3.不用每次install/update更新Cocoapods Specs</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod install --verbose --no-repo-update
</span><span class='line'>pod update --verbose --no-repo-update</span></code></pre></td></tr></table></div></figure>


<p>如果想自己搞一个镜像，<a href="http://lloydsheng.com/post/setup-cocoapods-mirror">这儿</a>有方法可以参考</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSOpenDev配置]]></title>
    <link href="http://www.ifun.cc/blog/2014/09/22/iosopendevpei-zhi/"/>
    <updated>2014-09-22T16:43:25+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/09/22/iosopendevpei-zhi</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<h3>配置</h3>

<p>首先我们安装iOSOpenDev, 直接下载最新的进行安装，如果有错，可以参看<a href="https://github.com/kokoabim/iOSOpenDev/wiki/Troubleshoot">这儿</a>。</p>

<p>越狱开发需要TheOS环境，而iOSOpenDev也是建立在TheOS的基础上的，只不过用iOSOpenDev我们就可以使用我们熟悉的Xcode进行开发了。所以我们还需要安装TheOS.打开命令行，直接运行下面命令进行安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export THEOS=/opt/theos
</span><span class='line'>git clone git://github.com/DHowett/theos.git $THEOS</span></code></pre></td></tr></table></div></figure>


<p>利用iOSOpenDev, 我们只需要简单command+shift+i就可以将程序布置到设备上了。这个过程需要ssh连接，所以我们还需要配置ssh钥匙对。只需要一条命令即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iosod sshkey -h 192.168.1.1</span></code></pre></td></tr></table></div></figure>


<p>192.168.1.1是你设备的地址，记住，你设备上一定要开启ssh哦。</p>

<p>iOSOpenDev的官方文档都在<a href="https://github.com/kokoabim/iOSOpenDev/wiki/_pages">这儿</a>，你可以再研究研究。</p>

<p>接下来，我们需要dump出来的iOS header, 比如我们要hook SpringBoard. 大家可以自行dump出header，也可以到网上下载已经dump好了的。我就是直接<a href="https://github.com/MP0w/iOS-Headers">这儿</a>下载的。将下载好的头文件放到/opt/theos/include目录下。</p>

<h3>Hello Word</h3>

<p>现在一切都准备好了，那我们来进行我们的Hello Word.
创建一个logos Tweak工程。接着在Build Settings中iOSOpenDevDevice设置为自己设备的IP地址，设备与你的Mac要在一个局域网内。</p>

<p>由于我们需要引用头文件，所以还需要在Build Settings中将Header Search Paths中加一行/opt/theos/include</p>

<p>下面我们实现hook SpringBoard，当SPringBoard启动的时候，我们就弹出一个Alert.</p>

<p>在.xm中加以下代码.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#import &lt;SpringBoard/SpringBoard.h&gt;
</span><span class='line'>
</span><span class='line'>%hook SpringBoard
</span><span class='line'>
</span><span class='line'>- (void)applicationDidFinishLaunching:(id)application {
</span><span class='line'>    %orig;
</span><span class='line'>    
</span><span class='line'>    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Welcome"
</span><span class='line'>                                                    message:@"Welcome to your iPhone!"
</span><span class='line'>                                                   delegate:nil
</span><span class='line'>                                          cancelButtonTitle:@"Thanks" 
</span><span class='line'>                                          otherButtonTitles:nil];
</span><span class='line'>    [alert show];
</span><span class='line'>    [alert release];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>%end</span></code></pre></td></tr></table></div></figure>


<p>由于用到了UIAlertView属于UIKit的东西，所以我们要链接UIKit.framework, 还有hook的库文件libsubstrate.dylib(在opt/iOSOpenDev/lib目录下面)。</p>

<p>中以command+B进行编译，一定会报错，下面列出我遇到的错。</p>

<p>1.找不到NSObject.h <br>
将#import &ldquo;NSObject.h&rdquo; 改为#import &lt;NSFoundation/NSObject.h>
2.一些不能识别的数据类型，我将期改为id类型。</p>

<p>进行一些修改，直到编译不报错为止。</p>

<p>Command+Shift+i  将程序布署到设备上，SpringBoard会重启，重启后是不是看到Alert？ 没看到？ 那你一定哪儿错了，重新再来一遍吧，如果还不行，那我也帮不了你，只有去求神了。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Auto Layout的坑]]></title>
    <link href="http://www.ifun.cc/blog/2014/07/23/shi-yong-auto-layoutde-keng/"/>
    <updated>2014-07-23T17:40:05+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/07/23/shi-yong-auto-layoutde-keng</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>最近在研究iOS8, 用beta版的xcode创建了一个swift项目，由于iOS8加入了size classes的概念，所以当然要用这先进东西了。</p>

<p>创建了一个tabbar的工程，试着在storyboard中研究它，发于UITextView这个控件在w(Compact), h(Regular)iPhone竖屏的情况下，字符显示不完整（如下图所以，好像UITextView的frame比较小）。最开始以为是constraints的问题，仔细看了一下，没有发现constraints有问题。
<img src="http://ww1.sinaimg.cn/large/6bf526ffgw1eimvr8u4eoj20v40zo75u.jpg" alt="" /><br></p>

<p>由于强迫症严重，所以总感觉这样不太对。 最后终于找到了，原来是没有设置Editable属性。只需要在storyboard属性栏中将其勾中就ok了。</p>

<p><img src="http://ww2.sinaimg.cn/large/6bf526ffgw1eimvucfa68j20eq0go767.jpg" alt="" /> <br></p>

<p>下在是不是看着顺眼多了？ ^V^</p>

<p><img src="http://ww1.sinaimg.cn/large/6bf526ffgw1eimvvwb33aj20t20v0dhf.jpg" alt="" /> <br></p>

<p>然后我试着运行工程，看结果，发现第二个tab中UITextView中的字符不见了。
<img src="http://ww4.sinaimg.cn/large/6bf526ffgw1eimvz0q0xwj20gw0vo0ta.jpg" alt="" /> <br>
这是为什么呢？</p>

<p>经研究发现是constraints的Placeholder属性勾中了。<br>
<img src="http://ww3.sinaimg.cn/large/6bf526ffgw1eimw0ph1taj20dy0ceab9.jpg" alt="" /> <br></p>

<p>Placeholder就是占位的意思，在编译的时候就会去掉这个Constraint. 由于去掉了Constraint,那么就不无决定它的frame, 结果就显示不出来了。</p>

<p>有了这个属性，那么就可以在storyboard或xib中先用了个constraints来占位，可以去掉警告， 方便代码加Constraints的朋友使用。</p>

<p>虽然用Auto Layout有一段时间了，但是这些细节还不是很清楚，还得慢慢吸收。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Jailbreak Dev准备工作]]></title>
    <link href="http://www.ifun.cc/blog/2014/07/11/ios-jailbreak-devzhun-bei-gong-zuo/"/>
    <updated>2014-07-11T16:58:09+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/07/11/ios-jailbreak-devzhun-bei-gong-zuo</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>安全越来越重要了，所以我也在开始着手研究iOS安全。iOS的安全很大一部份是在iOS越狱的基础上进行的，所以对基设备进行越狱，并准备向安全领域进军。</p>

<p>1.iOS越狱设备，这我就不多说了,(有风险，自行承担)
2.在iOS越狱设备上安装openssh, SBSettings, BigBoss Recommended tools, MobileTerminal,这些可以通过Cydia安装</p>

<p>下面安装clutch,class-dump-z</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh root@you ios device ip
</span><span class='line'>apt-get upgrade
</span><span class='line'>wget http://networkpx.googlecode.com/files/class-dump-z_0.2a.tar.gz
</span><span class='line'>tar -xvzf class-dump-z_0.2a.tar.gz
</span><span class='line'>cd iphone_armv6
</span><span class='line'>cp class-dump-z /usr/bin
</span><span class='line'>chmod 777 /usr/bin/class-dump-z</span></code></pre></td></tr></table></div></figure>


<p>可以用sftp将clutch上传到iOS设备里。Clutch在<a href="https://github.com/KJCracks/Clutch">这儿</a>哦</p>

<p>从appstore上下载的app是加了密的，加了密的app，class-dump-z就无能为力了，所以需要clutch将基解密。</p>

<p>以2048为例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>clutch 2048
</span><span class='line'>cd /User/Documents/Cracked
</span><span class='line'>unzip /User/Documents/Cracked/2048.ipa -d 2048
</span><span class='line'>class-dump-z 2048/Payload/2048.app/2048 &gt; class-info-2048</span></code></pre></td></tr></table></div></figure>


<p>3.在Mac上安装theOS,iOSOpenDev,Cycript</p>

<p>就这些了，以后再加用到的。</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义iOS上双击Home键App切屏]]></title>
    <link href="http://www.ifun.cc/blog/2014/07/10/zi-ding-yi-iosshang-shuang-ji-homejian-appqie-ping/"/>
    <updated>2014-07-10T16:34:06+08:00</updated>
    <id>http://www.ifun.cc/blog/2014/07/10/zi-ding-yi-iosshang-shuang-ji-homejian-appqie-ping</id>
    <content type="html"><![CDATA[<blockquote><p>本站QQ技术群:&lt;疯狂IT人>93916004</p></blockquote>

<p>在iOS7上，如果双击Home，会来到iOS App的switcher页面，在这儿列出了当前系统挂起的App, 上面有每个App的切屏，相信大家都熟悉这个东东了。它其实是每个App在挂起前，对App截屏。</p>

<p>那么我们如何自定义它在App Switcher上的展示呢，明白了它其实是对App的截屏，那么在它快进入后台的时候，我们改变其外观，那么截下来的图片，不就改变了吗？</p>

<p>明白这个原理后，那我们就试一试。</p>

<p>新建一个工程，准备三张图片，Defautl.png, Defautl@2x.png, Default-568h@2x.png,  将其放进工程。</p>

<p>我们在AppDelegate.h中声明一个UIImageView变量</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface AppDelegate : UIResponder &lt;UIApplicationDelegate&gt; {
</span><span class='line'>    UIImageView *screenShotView;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>@property (strong, nonatomic) UIWindow *window;
</span><span class='line'>
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>接着在AppDelegate中加入以下代码:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)applicationWillResignActive:(UIApplication *)application
</span><span class='line'>{
</span><span class='line'>    if (!screenShotView) {
</span><span class='line'>        screenShotView = [[UIImageView alloc]initWithFrame:[self.window frame]];
</span><span class='line'>        [screenShotView setImage:[UIImage imageNamed:@"Default-568h"]];
</span><span class='line'>        [self.window addSubview:screenShotView];
</span><span class='line'>    }
</span><span class='line'>    screenShotView.alpha = 1;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)applicationDidBecomeActive:(UIApplication *)application
</span><span class='line'>{
</span><span class='line'>    screenShotView.alpha = 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>先在模拟器上删除以app,然后再点xcode run.  双击Home, 这下你是不是在App Switcher中看到了你的Default的图片，将上面的代码中Default-568h改为其它图片, 这样达到了自定义目的, 是不是太简单了呀？</p>

<blockquote><p>时间仓促，难免有不少错误，还往指正。</p></blockquote>
]]></content>
  </entry>
  
</feed>
